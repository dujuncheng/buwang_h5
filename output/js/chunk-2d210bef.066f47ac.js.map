{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-regex.js"],"names":["Prism","specialEscape","pattern","alias","escape","charClass","charClassWithoutDot","rangeChar","source","range","RegExp","groupName","lookbehind","languages","regex","inside","forEach","lang","grammar"],"mappings":"kGAAC,SAAUA,GAEV,IAAIC,EAAgB,CACnBC,QAAS,uBACTC,MAAO,UAEJC,EAAS,6FACTC,EAAY,CACfH,QAAS,0BACTC,MAAO,cAEJG,EAAsB,CACzBJ,QAAS,uBACTC,MAAO,cAGJI,EAAY,eAAiBH,EAAOI,OAAS,IAC7CC,EAAQC,OAAOH,EAAY,IAAMA,GAGjCI,EAAY,CACfT,QAAS,wBACTU,YAAY,EACZT,MAAO,YAGRH,EAAMa,UAAUC,MAAQ,CACvB,QAAW,CACVZ,QAAS,kDACTU,YAAY,EACZG,OAAQ,CACP,mBAAoB,CACnBb,QAAS,UACTU,YAAY,EACZT,MAAO,YAER,sBAAuB,CACtBD,QAAS,UACTC,MAAO,eAER,MAAS,CACRD,QAASO,EACTM,OAAQ,CACP,OAAUX,EACV,oBAAqB,CACpBF,QAAS,IACTC,MAAO,cAIV,iBAAkBF,EAClB,UAAaK,EACb,OAAUF,IAGZ,iBAAkBH,EAClB,UAAaI,EACb,cAAiB,CAChB,CAECH,QAAS,2BACTC,MAAO,WAER,CACCD,QAAS,eACTC,MAAO,UACPY,OAAQ,CACP,aAAcJ,KAIjB,OAAU,CACTT,QAAS,kBACTC,MAAO,YAER,OAAUC,EACV,MAAS,CACR,CAKCF,QAAS,8EACTC,MAAO,cACPY,OAAQ,CACP,aAAcJ,IAGhB,CACCT,QAAS,KACTC,MAAO,gBAGT,WAAc,CACbD,QAAS,kCACTC,MAAO,UAER,YAAe,CACdD,QAAS,KACTC,MAAO,YAKT,CACC,eACA,cACA,OACA,aACA,aACA,QACCa,SAAQ,SAAUC,GACnB,IAAIC,EAAUlB,EAAMa,UAAUI,GAC1BC,IACHA,EAAQ,SAASH,OAAS,CACzB,iBAAkB,CACjBb,QAAS,6BACTU,YAAY,EACZG,OAAQf,EAAMa,UAAUC,OAEzB,cAAe,WACf,kBAAmB,gBAzHvB,CA8HEd","file":"js/chunk-2d210bef.066f47ac.js","sourcesContent":["(function (Prism) {\n\n\tvar specialEscape = {\n\t\tpattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n\t\talias: 'escape'\n\t};\n\tvar escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n\tvar charClass = {\n\t\tpattern: /\\.|\\\\[wsd]|\\\\p{[^{}]+}/i,\n\t\talias: 'class-name'\n\t};\n\tvar charClassWithoutDot = {\n\t\tpattern: /\\\\[wsd]|\\\\p{[^{}]+}/i,\n\t\talias: 'class-name'\n\t};\n\n\tvar rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n\tvar range = RegExp(rangeChar + '-' + rangeChar);\n\n\t// the name of a capturing group\n\tvar groupName = {\n\t\tpattern: /(<|')[^<>']+(?=[>']$)/,\n\t\tlookbehind: true,\n\t\talias: 'variable'\n\t};\n\n\tPrism.languages.regex = {\n\t\t'charset': {\n\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'charset-negation': {\n\t\t\t\t\tpattern: /(^\\[)\\^/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'charset-punctuation': {\n\t\t\t\t\tpattern: /^\\[|\\]$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'range': {\n\t\t\t\t\tpattern: range,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'escape': escape,\n\t\t\t\t\t\t'range-punctuation': {\n\t\t\t\t\t\t\tpattern: /-/,\n\t\t\t\t\t\t\talias: 'operator'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'special-escape': specialEscape,\n\t\t\t\t'charclass': charClassWithoutDot,\n\t\t\t\t'escape': escape\n\t\t\t}\n\t\t},\n\t\t'special-escape': specialEscape,\n\t\t'charclass': charClass,\n\t\t'backreference': [\n\t\t\t{\n\t\t\t\t// a backreference which is not an octal escape\n\t\t\t\tpattern: /\\\\(?![123][0-7]{2})[1-9]/,\n\t\t\t\talias: 'keyword'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\\\k<[^<>']+>/,\n\t\t\t\talias: 'keyword',\n\t\t\t\tinside: {\n\t\t\t\t\t'group-name': groupName\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'anchor': {\n\t\t\tpattern: /[$^]|\\\\[ABbGZz]/,\n\t\t\talias: 'function'\n\t\t},\n\t\t'escape': escape,\n\t\t'group': [\n\t\t\t{\n\t\t\t\t// https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n\t\t\t\t// https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n\n\t\t\t\t// (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n\t\t\t\tpattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n\t\t\t\talias: 'punctuation',\n\t\t\t\tinside: {\n\t\t\t\t\t'group-name': groupName\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /\\)/,\n\t\t\t\talias: 'punctuation'\n\t\t\t}\n\t\t],\n\t\t'quantifier': {\n\t\t\tpattern: /(?:[+*?]|\\{(?:\\d+,?\\d*)\\})[?+]?/,\n\t\t\talias: 'number'\n\t\t},\n\t\t'alternation': {\n\t\t\tpattern: /\\|/,\n\t\t\talias: 'keyword'\n\t\t}\n\t};\n\n\n\t[\n\t\t'actionscript',\n\t\t'coffescript',\n\t\t'flow',\n\t\t'javascript',\n\t\t'typescript',\n\t\t'vala'\n\t].forEach(function (lang) {\n\t\tvar grammar = Prism.languages[lang];\n\t\tif (grammar) {\n\t\t\tgrammar['regex'].inside = {\n\t\t\t\t'language-regex': {\n\t\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: Prism.languages.regex\n\t\t\t\t},\n\t\t\t\t'regex-flags': /[a-z]+$/i,\n\t\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t};\n\t\t}\n\t});\n\n}(Prism))\n"],"sourceRoot":""}