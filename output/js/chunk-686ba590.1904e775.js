(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-686ba590"],{"1c35":function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n("1fb5"),i=n("9152"),o=n("e3db");function a(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"===typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(t){return!1}}function u(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(u()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t),e.__proto__=c.prototype):(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!c.TYPED_ARRAY_SUPPORT&&!(this instanceof c))return new c(e,t,n);if("number"===typeof e){if("string"===typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return l(this,e,t,n)}function l(e,t,n,r){if("number"===typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!==typeof ArrayBuffer&&t instanceof ArrayBuffer?m(e,t,n,r):"string"===typeof t?p(e,t,n):v(e,t)}function f(e){if("number"!==typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,t,n,r){return f(t),t<=0?s(e,t):void 0!==n?"string"===typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}function h(e,t){if(f(t),e=s(e,t<0?0:0|b(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t,n){if("string"===typeof n&&""!==n||(n="utf8"),!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|x(t,n);e=s(e,r);var i=e.write(t,n);return i!==r&&(e=e.slice(0,i)),e}function g(e,t){var n=t.length<0?0:0|b(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function m(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");return t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r),c.TYPED_ARRAY_SUPPORT?(e=t,e.__proto__=c.prototype):e=g(e,t),e}function v(e,t){if(c.isBuffer(t)){var n=0|b(t.length);return e=s(e,n),0===e.length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!==typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!==typeof t.length||te(t.length)?s(e,0):g(e,t);if("Buffer"===t.type&&o(t.data))return g(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function b(e){if(e>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|e}function y(e){return+e!=e&&(e=0),c.alloc(+e)}function x(e,t){if(c.isBuffer(e))return e.length;if("undefined"!==typeof ArrayBuffer&&"function"===typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!==typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return J(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Z(e).length;default:if(r)return J(e).length;t=(""+t).toLowerCase(),r=!0}}function w(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if(n>>>=0,t>>>=0,n<=t)return"";e||(e="utf8");while(1)switch(e){case"hex":return B(this,t,n);case"utf8":case"utf-8":return M(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return R(this,t,n);case"base64":return F(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function O(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function E(e,t,n,r,i){if(0===e.length)return-1;if("string"===typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"===typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:k(e,t,n,r,i);if("number"===typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"===typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):k(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function k(e,t,n,r,i){var o,a=1,u=e.length,s=t.length;if(void 0!==r&&(r=String(r).toLowerCase(),"ucs2"===r||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,u/=2,s/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var l=-1;for(o=n;o<u;o++)if(c(e,o)===c(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===s)return l*a}else-1!==l&&(o-=o-l),l=-1}else for(n+s>u&&(n=u-s),o=n;o>=0;o--){for(var f=!0,d=0;d<s;d++)if(c(e,o+d)!==c(t,d)){f=!1;break}if(f)return o}return-1}function _(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r),r>i&&(r=i)):r=i;var o=t.length;if(o%2!==0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var u=parseInt(t.substr(2*a,2),16);if(isNaN(u))return a;e[n+a]=u}return a}function A(e,t,n,r){return ee(J(t,e.length-n),e,n,r)}function S(e,t,n,r){return ee(Q(t),e,n,r)}function j(e,t,n,r){return S(e,t,n,r)}function C(e,t,n,r){return ee(Z(t),e,n,r)}function D(e,t,n,r){return ee(K(t,e.length-n),e,n,r)}function F(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function M(e,t,n){n=Math.min(e.length,n);var r=[],i=t;while(i<n){var o,a,u,s,c=e[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:o=e[i+1],128===(192&o)&&(s=(31&c)<<6|63&o,s>127&&(l=s));break;case 3:o=e[i+1],a=e[i+2],128===(192&o)&&128===(192&a)&&(s=(15&c)<<12|(63&o)<<6|63&a,s>2047&&(s<55296||s>57343)&&(l=s));break;case 4:o=e[i+1],a=e[i+2],u=e[i+3],128===(192&o)&&128===(192&a)&&128===(192&u)&&(s=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&u,s>65535&&s<1114112&&(l=s))}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=f}return N(r)}t.Buffer=c,t.SlowBuffer=y,t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:a(),t.kMaxLength=u(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return l(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!==typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return d(null,e,t,n)},c.allocUnsafe=function(e){return h(null,e)},c.allocUnsafeSlow=function(e){return h(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var a=e[n];if(!c.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},c.byteLength=x,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)O(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)O(this,t,t+3),O(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)O(this,t,t+7),O(this,t+1,t+6),O(this,t+2,t+5),O(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?M(this,0,e):w.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,i){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,i>>>=0,this===e)return 0;for(var o=i-r,a=n-t,u=Math.min(o,a),s=this.slice(r,i),l=e.slice(t,n),f=0;f<u;++f)if(s[f]!==l[f]){o=s[f],a=l[f];break}return o<a?-1:a<o?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return E(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return E(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"===typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return _(this,e,t,n);case"utf8":case"utf-8":return A(this,e,t,n);case"ascii":return S(this,e,t,n);case"latin1":case"binary":return j(this,e,t,n);case"base64":return C(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var z=4096;function N(e){var t=e.length;if(t<=z)return String.fromCharCode.apply(String,e);var n="",r=0;while(r<t)n+=String.fromCharCode.apply(String,e.slice(r,r+=z));return n}function T(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function B(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=X(e[o]);return i}function P(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function I(e,t,n){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,n,r,i,o){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function $(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function U(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function q(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function W(e,t,n,r,o){return o||q(e,t,n,4,34028234663852886e22,-34028234663852886e22),i.write(e,t,n,r,23,4),n+4}function H(e,t,n,r,o){return o||q(e,t,n,8,17976931348623157e292,-17976931348623157e292),i.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r,e<0&&(e=0)):e>r&&(e=r),t<0?(t+=r,t<0&&(t=0)):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)n=this.subarray(e,t),n.__proto__=c.prototype;else{var i=t-e;n=new c(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);var r=this[e],i=1,o=0;while(++o<t&&(i*=256))r+=this[e+o]*i;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);var r=this[e+--t],i=1;while(t>0&&(i*=256))r+=this[e+--t]*i;return r},c.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);var r=this[e],i=1,o=0;while(++o<t&&(i*=256))r+=this[e+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||I(e,t,this.length);var r=t,i=1,o=this[e+--r];while(r>0&&(i*=256))o+=this[e+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},c.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var i=Math.pow(2,8*n)-1;L(this,e,t,n,i,0)}var o=1,a=0;this[t]=255&e;while(++a<n&&(o*=256))this[t+a]=e/o&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t|=0,n|=0,!r){var i=Math.pow(2,8*n)-1;L(this,e,t,n,i,0)}var o=n-1,a=1;this[t+o]=255&e;while(--o>=0&&(a*=256))this[t+o]=e/a&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):$(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):$(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):U(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);L(this,e,t,n,i-1,-i)}var o=0,a=1,u=0;this[t]=255&e;while(++o<n&&(a*=256))e<0&&0===u&&0!==this[t+o-1]&&(u=1),this[t+o]=(e/a>>0)-u&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);L(this,e,t,n,i-1,-i)}var o=n-1,a=1,u=0;this[t+o]=255&e;while(--o>=0&&(a*=256))e<0&&0===u&&0!==this[t+o+1]&&(u=1),this[t+o]=(e/a>>0)-u&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):$(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):$(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):U(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):U(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return W(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return W(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return H(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return H(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},c.prototype.fill=function(e,t,n,r){if("string"===typeof e){if("string"===typeof t?(r=t,t=0,n=this.length):"string"===typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!==typeof r)throw new TypeError("encoding must be a string");if("string"===typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"===typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"===typeof e)for(o=t;o<n;++o)this[o]=e;else{var a=c.isBuffer(e)?e:J(new c(e,r).toString()),u=a.length;for(o=0;o<n-t;++o)this[o+t]=a[o%u]}return this};var G=/[^+\/0-9A-Za-z-_]/g;function Y(e){if(e=V(e).replace(G,""),e.length<2)return"";while(e.length%4!==0)e+="=";return e}function V(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function X(e){return e<16?"0"+e.toString(16):e.toString(16)}function J(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],a=0;a<r;++a){if(n=e.charCodeAt(a),n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function Q(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}function K(e,t){for(var n,r,i,o=[],a=0;a<e.length;++a){if((t-=2)<0)break;n=e.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r)}return o}function Z(e){return r.toByteArray(Y(e))}function ee(e,t,n,r){for(var i=0;i<r;++i){if(i+n>=t.length||i>=e.length)break;t[i+n]=e[i]}return i}function te(e){return e!==e}}).call(this,n("c8ba"))},"1c83":function(e){e.exports=JSON.parse('{"a":"4.4.0"}')},"1fb5":function(e,t,n){"use strict";t.byteLength=l,t.toByteArray=d,t.fromByteArray=g;for(var r=[],i=[],o="undefined"!==typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)r[u]=a[u],i[a.charCodeAt(u)]=u;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");-1===n&&(n=t);var r=n===t?0:4-n%4;return[n,r]}function l(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r}function f(e,t,n){return 3*(t+n)/4-n}function d(e){var t,n,r=c(e),a=r[0],u=r[1],s=new o(f(e,a,u)),l=0,d=u>0?a-4:a;for(n=0;n<d;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],s[l++]=t>>16&255,s[l++]=t>>8&255,s[l++]=255&t;return 2===u&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,s[l++]=255&t),1===u&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,s[l++]=t>>8&255,s[l++]=255&t),s}function h(e){return r[e>>18&63]+r[e>>12&63]+r[e>>6&63]+r[63&e]}function p(e,t,n){for(var r,i=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),i.push(h(r));return i.join("")}function g(e){for(var t,n=e.length,i=n%3,o=[],a=16383,u=0,s=n-i;u<s;u+=a)o.push(p(e,u,u+a>s?s:u+a));return 1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},2410:function(e,t,n){(function(t){var n=function(){"use strict";function e(e,t){return null!=t&&e instanceof t}var n,r,i;try{n=Map}catch(f){n=function(){}}try{r=Set}catch(f){r=function(){}}try{i=Promise}catch(f){i=function(){}}function o(a,u,s,c,f){"object"===typeof u&&(s=u.depth,c=u.prototype,f=u.includeNonEnumerable,u=u.circular);var d=[],h=[],p="undefined"!=typeof t;function g(a,s){if(null===a)return null;if(0===s)return a;var m,v;if("object"!=typeof a)return a;if(e(a,n))m=new n;else if(e(a,r))m=new r;else if(e(a,i))m=new i((function(e,t){a.then((function(t){e(g(t,s-1))}),(function(e){t(g(e,s-1))}))}));else if(o.__isArray(a))m=[];else if(o.__isRegExp(a))m=new RegExp(a.source,l(a)),a.lastIndex&&(m.lastIndex=a.lastIndex);else if(o.__isDate(a))m=new Date(a.getTime());else{if(p&&t.isBuffer(a))return m=t.allocUnsafe?t.allocUnsafe(a.length):new t(a.length),a.copy(m),m;e(a,Error)?m=Object.create(a):"undefined"==typeof c?(v=Object.getPrototypeOf(a),m=Object.create(v)):(m=Object.create(c),v=c)}if(u){var b=d.indexOf(a);if(-1!=b)return h[b];d.push(a),h.push(m)}for(var y in e(a,n)&&a.forEach((function(e,t){var n=g(t,s-1),r=g(e,s-1);m.set(n,r)})),e(a,r)&&a.forEach((function(e){var t=g(e,s-1);m.add(t)})),a){var x;v&&(x=Object.getOwnPropertyDescriptor(v,y)),x&&null==x.set||(m[y]=g(a[y],s-1))}if(Object.getOwnPropertySymbols){var w=Object.getOwnPropertySymbols(a);for(y=0;y<w.length;y++){var O=w[y],E=Object.getOwnPropertyDescriptor(a,O);(!E||E.enumerable||f)&&(m[O]=g(a[O],s-1),E.enumerable||Object.defineProperty(m,O,{enumerable:!1}))}}if(f){var k=Object.getOwnPropertyNames(a);for(y=0;y<k.length;y++){var _=k[y];E=Object.getOwnPropertyDescriptor(a,_);E&&E.enumerable||(m[_]=g(a[_],s-1),Object.defineProperty(m,_,{enumerable:!1}))}}return m}return"undefined"==typeof u&&(u=!0),"undefined"==typeof s&&(s=1/0),g(a,s)}function a(e){return Object.prototype.toString.call(e)}function u(e){return"object"===typeof e&&"[object Date]"===a(e)}function s(e){return"object"===typeof e&&"[object Array]"===a(e)}function c(e){return"object"===typeof e&&"[object RegExp]"===a(e)}function l(e){var t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),t}return o.clonePrototype=function(e){if(null===e)return null;var t=function(){};return t.prototype=e,new t},o.__objToStr=a,o.__isDate=u,o.__isArray=s,o.__isRegExp=c,o.__getRegExpFlags=l,o}();e.exports&&(e.exports=n)}).call(this,n("1c35").Buffer)},"276f":function(e,t,n){"use strict";n.d(t,"f",(function(){return r})),n.d(t,"h",(function(){return i})),n.d(t,"g",(function(){return o})),n.d(t,"x",(function(){return d})),n.d(t,"y",(function(){return h})),n.d(t,"lb",(function(){return p})),n.d(t,"P",(function(){return g})),n.d(t,"hb",(function(){return m})),n.d(t,"s",(function(){return v})),n.d(t,"L",(function(){return k})),n.d(t,"d",(function(){return y})),n.d(t,"b",(function(){return x})),n.d(t,"e",(function(){return w})),n.d(t,"c",(function(){return O})),n.d(t,"a",(function(){return E})),n.d(t,"O",(function(){return j})),n.d(t,"kb",(function(){return C})),n.d(t,"R",(function(){return I})),n.d(t,"S",(function(){return L})),n.d(t,"T",(function(){return $})),n.d(t,"U",(function(){return U})),n.d(t,"mb",(function(){return W})),n.d(t,"nb",(function(){return H})),n.d(t,"ob",(function(){return G})),n.d(t,"pb",(function(){return Y})),n.d(t,"W",(function(){return V})),n.d(t,"ib",(function(){return X})),n.d(t,"i",(function(){return J})),n.d(t,"k",(function(){return Q})),n.d(t,"l",(function(){return ee})),n.d(t,"j",(function(){return te})),n.d(t,"m",(function(){return oe})),n.d(t,"n",(function(){return ae})),n.d(t,"o",(function(){return c})),n.d(t,"p",(function(){return ue})),n.d(t,"q",(function(){return se})),n.d(t,"r",(function(){return ce})),n.d(t,"t",(function(){return he})),n.d(t,"u",(function(){return f})),n.d(t,"v",(function(){return pe})),n.d(t,"w",(function(){return fe})),n.d(t,"z",(function(){return ge})),n.d(t,"A",(function(){return me})),n.d(t,"B",(function(){return _})),n.d(t,"C",(function(){return ve})),n.d(t,"D",(function(){return be})),n.d(t,"E",(function(){return K})),n.d(t,"F",(function(){return ye})),n.d(t,"G",(function(){return A})),n.d(t,"H",(function(){return xe})),n.d(t,"I",(function(){return we})),n.d(t,"J",(function(){return Oe})),n.d(t,"K",(function(){return Ee})),n.d(t,"M",(function(){return _e})),n.d(t,"N",(function(){return Ae})),n.d(t,"Q",(function(){return je})),n.d(t,"V",(function(){return F})),n.d(t,"X",(function(){return Se})),n.d(t,"Y",(function(){return Ce})),n.d(t,"Z",(function(){return l})),n.d(t,"ab",(function(){return De})),n.d(t,"bb",(function(){return Fe})),n.d(t,"cb",(function(){return ze})),n.d(t,"db",(function(){return M})),n.d(t,"fb",(function(){return Ne})),n.d(t,"eb",(function(){return Te})),n.d(t,"gb",(function(){return Re})),n.d(t,"jb",(function(){return Be}));var r=function(e,t,n){return e.fields=t||[],e.fname=n,e};function i(e){return null==e?null:e.fname}function o(e){return null==e?null:e.fields}var a=function(e){return 1===e.length?u(e[0]):s(e)};const u=e=>function(t){return t[e]},s=e=>{const t=e.length;return function(n){for(let r=0;r<t;++r)n=n[e[r]];return n}};var c=function(e){throw Error(e)},l=function(e){const t=[],n=e.length;let r,i,o,a=null,u=0,s="";function l(){t.push(s+e.substring(r,i)),s="",r=i+1}for(e+="",r=i=0;i<n;++i)if(o=e[i],"\\"===o)s+=e.substring(r,i),s+=e.substring(++i,++i),r=i;else if(o===a)l(),a=null,u=-1;else{if(a)continue;r===u&&'"'===o||r===u&&"'"===o?(r=i+1,a=o):"."!==o||u?"["===o?(i>r&&l(),u=r=i+1):"]"===o&&(u||c("Access path missing open bracket: "+e),u>0&&l(),u=0,r=i+1):i>r?l():r=i+1}return u&&c("Access path missing closing bracket: "+e),a&&c("Access path missing closing quote: "+e),i>r&&(i++,l()),t},f=function(e,t,n){const i=l(e);return e=1===i.length?i[0]:e,r((n&&n.get||a)(i),[e],t||e)};const d=f("id"),h=r(e=>e,[],"identity"),p=r(()=>0,[],"zero"),g=r(()=>1,[],"one"),m=r(()=>!0,[],"true"),v=r(()=>!1,[],"false");function b(e,t,n){const r=[t].concat([].slice.call(n));console[e].apply(console,r)}const y=0,x=1,w=2,O=3,E=4;var k=function(e,t){let n=e||y;return{level(e){return arguments.length?(n=+e,this):n},error(){return n>=x&&b(t||"error","ERROR",arguments),this},warn(){return n>=w&&b(t||"warn","WARN",arguments),this},info(){return n>=O&&b(t||"log","INFO",arguments),this},debug(){return n>=E&&b(t||"log","DEBUG",arguments),this}}},_=Array.isArray,A=function(e){return e===Object(e)};const S=e=>"__proto__"!==e;function j(...e){return e.reduce((e,t)=>{for(const n in t)if("signals"===n)e.signals=D(e.signals,t.signals);else{const r="legend"===n?{layout:1}:"style"===n||null;C(e,n,t[n],r)}return e},{})}function C(e,t,n,r){if(!S(t))return;let i,o;if(A(n)&&!_(n))for(i in o=A(e[t])?e[t]:e[t]={},n)r&&(!0===r||r[i])?C(o,i,n[i]):S(i)&&(o[i]=n[i]);else e[t]=n}function D(e,t){if(null==e)return t;const n={},r=[];function i(e){n[e.name]||(n[e.name]=1,r.push(e))}return t.forEach(i),e.forEach(i),r}var F=function(e){return e[e.length-1]},M=function(e){return null==e||""===e?null:+e};const z=e=>t=>e*Math.exp(t),N=e=>t=>Math.log(e*t),T=e=>t=>Math.sign(t)*Math.log1p(Math.abs(t/e)),R=e=>t=>Math.sign(t)*Math.expm1(Math.abs(t))*e,B=e=>t=>t<0?-Math.pow(-t,e):Math.pow(t,e);function P(e,t,n,r){const i=n(e[0]),o=n(F(e)),a=(o-i)*t;return[r(i-a),r(o-a)]}function I(e,t){return P(e,t,M,h)}function L(e,t){var n=Math.sign(e[0]);return P(e,t,N(n),z(n))}function $(e,t,n){return P(e,t,B(n),B(1/n))}function U(e,t,n){return P(e,t,T(n),R(n))}function q(e,t,n,r,i){const o=r(e[0]),a=r(F(e)),u=null!=t?r(t):(o+a)/2;return[i(u+(o-u)*n),i(u+(a-u)*n)]}function W(e,t,n){return q(e,t,n,M,h)}function H(e,t,n){const r=Math.sign(e[0]);return q(e,t,n,N(r),z(r))}function G(e,t,n,r){return q(e,t,n,B(r),B(1/r))}function Y(e,t,n,r){return q(e,t,n,T(r),R(r))}function V(e){return 1+~~(new Date(e).getMonth()/3)}function X(e){return 1+~~(new Date(e).getUTCMonth()/3)}var J=function(e){return null!=e?_(e)?e:[e]:[]},Q=function(e,t,n){let r,i=e[0],o=e[1];return o<i&&(r=o,o=i,i=r),r=o-i,r>=n-t?[t,n]:[i=Math.min(Math.max(i,t),n-r),i+r]},K=function(e){return"function"===typeof e};const Z="descending";var ee=function(e,t,n){n=n||{},t=J(t)||[];const i=[],a=[],u={},s=n.comparator||ne;return J(e).forEach((e,r)=>{null!=e&&(i.push(t[r]===Z?-1:1),a.push(e=K(e)?e:f(e,null,n)),(o(e)||[]).forEach(e=>u[e]=1))}),0===a.length?null:r(s(a,i),Object.keys(u))};const te=(e,t)=>(e<t||null==e)&&null!=t?-1:(e>t||null==t)&&null!=e?1:(t=t instanceof Date?+t:t,(e=e instanceof Date?+e:e)!==e&&t===t?-1:t!==t&&e===e?1:0),ne=(e,t)=>1===e.length?re(e[0],t[0]):ie(e,t,e.length),re=(e,t)=>function(n,r){return te(e(n),e(r))*t},ie=(e,t,n)=>(t.push(0),function(r,i){let o,a=0,u=-1;while(0===a&&++u<n)o=e[u],a=te(o(r),o(i));return a*t[u]});var oe=function(e){return K(e)?e:()=>e},ae=function(e,t){let n;return r=>{n&&clearTimeout(n),n=setTimeout(()=>(t(r),n=null),e)}},ue=function(e){for(let t,n,r=1,i=arguments.length;r<i;++r)for(n in t=arguments[r],t)e[n]=t[n];return e},se=function(e,t){let n,r,i,o,a=0;if(e&&(n=e.length))if(null==t){for(r=e[a];a<n&&(null==r||r!==r);r=e[++a]);for(i=o=r;a<n;++a)r=e[a],null!=r&&(r<i&&(i=r),r>o&&(o=r))}else{for(r=t(e[a]);a<n&&(null==r||r!==r);r=t(e[++a]));for(i=o=r;a<n;++a)r=t(e[a]),null!=r&&(r<i&&(i=r),r>o&&(o=r))}return[i,o]},ce=function(e,t){const n=e.length;let r,i,o,a,u,s=-1;if(null==t){while(++s<n)if(i=e[s],null!=i&&i>=i){r=o=i;break}if(s===n)return[-1,-1];a=u=s;while(++s<n)i=e[s],null!=i&&(r>i&&(r=i,a=s),o<i&&(o=i,u=s))}else{while(++s<n)if(i=t(e[s],s,e),null!=i&&i>=i){r=o=i;break}if(s===n)return[-1,-1];a=u=s;while(++s<n)i=t(e[s],s,e),null!=i&&(r>i&&(r=i,a=s),o<i&&(o=i,u=s))}return[a,u]};const le=Object.prototype.hasOwnProperty;var fe=function(e,t){return le.call(e,t)};const de={};var he=function(e){let t,n={};function r(e){return fe(n,e)&&n[e]!==de}const i={size:0,empty:0,object:n,has:r,get(e){return r(e)?n[e]:void 0},set(e,t){return r(e)||(++i.size,n[e]===de&&--i.empty),n[e]=t,this},delete(e){return r(e)&&(--i.size,++i.empty,n[e]=de),this},clear(){i.size=i.empty=0,i.object=n={}},test(e){return arguments.length?(t=e,i):t},clean(){const e={};let r=0;for(const i in n){const o=n[i];o===de||t&&t(o)||(e[i]=o,++r)}i.size=r,i.empty=0,i.object=n=e}};return e&&Object.keys(e).forEach(t=>{i.set(t,e[t])}),i},pe=function(e,t,n,r,i,o){if(!n&&0!==n)return o;const a=+n;let u,s=e[0],c=F(e);c<s&&(u=s,s=c,c=u),u=Math.abs(t-s);const l=Math.abs(c-t);return u<l&&u<=a?r:l<=a?i:o},ge=function(e,t,n){const r=e.prototype=Object.create(t.prototype);return r.constructor=e,ue(r,n)},me=function(e,t,n,r){let i,o=t[0],a=t[t.length-1];return o>a&&(i=o,o=a,a=i),n=void 0===n||n,r=void 0===r||r,(n?o<=e:o<e)&&(r?e<=a:e<a)},ve=function(e){return"boolean"===typeof e},be=function(e){return"[object Date]"===Object.prototype.toString.call(e)},ye=function(e){return"number"===typeof e},xe=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},we=function(e){return"string"===typeof e},Oe=function(e,t,n){e&&(e=t?J(e).map(e=>e.replace(/\\(.)/g,"$1")):J(e));const i=e&&e.length,o=n&&n.get||a,u=e=>o(t?[e]:l(e));let s;if(i)if(1===i){const t=u(e[0]);s=function(e){return""+t(e)}}else{const t=e.map(u);s=function(e){let n=""+t[0](e),r=0;while(++r<i)n+="|"+t[r](e);return n}}else s=function(){return""};return r(s,e,"key")},Ee=function(e,t){const n=e[0],r=F(e),i=+t;return i?1===i?r:n+i*(r-n):n};const ke=1e4;var _e=function(e){let t,n,r;e=+e||ke;const i=()=>{t={},n={},r=0},o=(i,o)=>(++r>e&&(n=t,t={},r=1),t[i]=o);return i(),{clear:i,has:e=>fe(t,e)||fe(n,e),get:e=>fe(t,e)?t[e]:fe(n,e)?o(e,n[e]):void 0,set:(e,n)=>fe(t,e)?t[e]=n:o(e,n)}},Ae=function(e,t,n,r){const i=t.length,o=n.length;if(!o)return t;if(!i)return n;const a=r||new t.constructor(i+o);let u=0,s=0,c=0;for(;u<i&&s<o;++c)a[c]=e(t[u],n[s])>0?n[s++]:t[u++];for(;u<i;++u,++c)a[c]=t[u];for(;s<o;++s,++c)a[c]=n[s];return a},Se=function(e,t){let n="";while(--t>=0)n+=e;return n},je=function(e,t,n,r){const i=n||" ",o=e+"",a=t-o.length;return a<=0?o:"left"===r?Se(i,a)+o:"center"===r?Se(i,~~(a/2))+o+Se(i,Math.ceil(a/2)):o+Se(i,a)},Ce=function(e){return e&&F(e)-e[0]||0};function De(e){return _(e)?"["+e.map(De)+"]":A(e)||we(e)?JSON.stringify(e).replace("\u2028","\\u2028").replace("\u2029","\\u2029"):e}var Fe=function(e){return null==e||""===e?null:!(!e||"false"===e||"0"===e)&&!!e};const Me=e=>ye(e)||be(e)?e:Date.parse(e);var ze=function(e,t){return t=t||Me,null==e||""===e?null:t(e)},Ne=function(e){return null==e||""===e?null:e+""},Te=function(e){const t={},n=e.length;for(let r=0;r<n;++r)t[e[r]]=!0;return t},Re=function(e,t,n,r){const i=null!=r?r:"…",o=e+"",a=o.length,u=Math.max(0,t-i.length);return a<=t?o:"left"===n?i+o.slice(a-u):"center"===n?o.slice(0,Math.ceil(u/2))+i+o.slice(a-~~(u/2)):o.slice(0,u)+i},Be=function(e,t,n){if(e)if(t){const r=e.length;for(let i=0;i<r;++i){const r=t(e[i]);r&&n(r,i,e)}}else e.forEach(n)}},4:function(e,t){},5:function(e,t){},6582:function(e,t,n){"use strict";var r=/("(?:[^\\"]|\\.)*")|[:,]/g;e.exports=function(e,t){var n,i,o;return t=t||{},n=JSON.stringify([1],void 0,void 0===t.indent?2:t.indent).slice(2,-3),i=""===n?1/0:void 0===t.maxLength?80:t.maxLength,o=t.replacer,function e(t,a,u){var s,c,l,f,d,h,p,g,m,v,b,y;if(t&&"function"===typeof t.toJSON&&(t=t.toJSON()),b=JSON.stringify(t,o),void 0===b)return b;if(p=i-a.length-u,b.length<=p&&(m=b.replace(r,(function(e,t){return t||e+" "})),m.length<=p))return m;if(null!=o&&(t=JSON.parse(b),o=void 0),"object"===typeof t&&null!==t){if(g=a+n,l=[],c=0,Array.isArray(t))for(v="[",s="]",p=t.length;c<p;c++)l.push(e(t[c],g,c===p-1?0:1)||"null");else for(v="{",s="}",h=Object.keys(t),p=h.length;c<p;c++)f=h[c],d=JSON.stringify(f)+": ",y=e(t[f],g,d.length+(c===p-1?0:1)),void 0!==y&&l.push(d+y);if(l.length>0)return[v,n+l.join(",\n"+g),s].join("\n"+a)}return b}(e,"",0)}},"694b":function(e,t,n){"use strict";var r=Array.isArray,i=Object.keys,o=Object.prototype.hasOwnProperty;e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){var a,u,s,c=r(t),l=r(n);if(c&&l){if(u=t.length,u!=n.length)return!1;for(a=u;0!==a--;)if(!e(t[a],n[a]))return!1;return!0}if(c!=l)return!1;var f=t instanceof Date,d=n instanceof Date;if(f!=d)return!1;if(f&&d)return t.getTime()==n.getTime();var h=t instanceof RegExp,p=n instanceof RegExp;if(h!=p)return!1;if(h&&p)return t.toString()==n.toString();var g=i(t);if(u=g.length,u!==i(n).length)return!1;for(a=u;0!==a--;)if(!o.call(n,g[a]))return!1;for(a=u;0!==a--;)if(s=g[a],!e(t[s],n[s]))return!1;return!0}return t!==t&&n!==n}},"7ad3":function(e,t,n){"use strict";n.r(t),n.d(t,"vega",(function(){return EQ})),n.d(t,"vl",(function(){return kQ})),n.d(t,"guessMode",(function(){return MQ})),n.d(t,"default",(function(){return NQ}));var r={};n.r(r),n.d(r,"aggregate",(function(){return jr})),n.d(r,"bin",(function(){return Dr})),n.d(r,"collect",(function(){return zr})),n.d(r,"compare",(function(){return Tr})),n.d(r,"countpattern",(function(){return Br})),n.d(r,"cross",(function(){return Lr})),n.d(r,"density",(function(){return Jr})),n.d(r,"expression",(function(){return ti})),n.d(r,"extent",(function(){return ri})),n.d(r,"facet",(function(){return ui})),n.d(r,"field",(function(){return ci})),n.d(r,"filter",(function(){return fi})),n.d(r,"flatten",(function(){return pi})),n.d(r,"fold",(function(){return mi})),n.d(r,"formula",(function(){return bi})),n.d(r,"generate",(function(){return xi})),n.d(r,"impute",(function(){return _i})),n.d(r,"joinaggregate",(function(){return Di})),n.d(r,"key",(function(){return Mi})),n.d(r,"load",(function(){return Ni})),n.d(r,"lookup",(function(){return Ri})),n.d(r,"multiextent",(function(){return Pi})),n.d(r,"multivalues",(function(){return Li})),n.d(r,"params",(function(){return Ui})),n.d(r,"pivot",(function(){return qi})),n.d(r,"prefacet",(function(){return Vi})),n.d(r,"project",(function(){return Ji})),n.d(r,"proxy",(function(){return Zi})),n.d(r,"relay",(function(){return to})),n.d(r,"sample",(function(){return ro})),n.d(r,"sequence",(function(){return oo})),n.d(r,"sieve",(function(){return uo})),n.d(r,"subflow",(function(){return oi})),n.d(r,"tupleindex",(function(){return co})),n.d(r,"values",(function(){return fo})),n.d(r,"window",(function(){return Oo}));var i={};n.r(i),n.d(i,"bound",(function(){return af})),n.d(i,"identifier",(function(){return lf})),n.d(i,"mark",(function(){return hf})),n.d(i,"overlap",(function(){return mf})),n.d(i,"render",(function(){return _f})),n.d(i,"viewlayout",(function(){return Lf}));var o={};n.r(o),n.d(o,"axisticks",(function(){return Uh})),n.d(o,"datajoin",(function(){return Wh})),n.d(o,"encode",(function(){return Vh})),n.d(o,"legendentries",(function(){return fp})),n.d(o,"linkpath",(function(){return bp})),n.d(o,"pie",(function(){return zp})),n.d(o,"scale",(function(){return $p})),n.d(o,"sortitems",(function(){return Zp})),n.d(o,"stack",(function(){return og})),n.d(o,"validTicks",(function(){return Th}));var a={};n.r(a),n.d(a,"contour",(function(){return pg})),n.d(a,"geojson",(function(){return xg})),n.d(a,"geopath",(function(){return Ix})),n.d(a,"geopoint",(function(){return Ux})),n.d(a,"geoshape",(function(){return Wx})),n.d(a,"graticule",(function(){return Vx})),n.d(a,"projection",(function(){return Jx}));var u={};n.r(u),n.d(u,"force",(function(){return sw}));var s={};n.r(s),n.d(s,"nest",(function(){return yw})),n.d(s,"pack",(function(){return Cw})),n.d(s,"partition",(function(){return zw})),n.d(s,"stratify",(function(){return Rw})),n.d(s,"tree",(function(){return Uw})),n.d(s,"treelinks",(function(){return Ww})),n.d(s,"treemap",(function(){return tO}));var c={};n.r(c),n.d(c,"voronoi",(function(){return iO}));var l={};n.r(l),n.d(l,"wordcloud",(function(){return OO}));var f={};n.r(f),n.d(f,"crossfilter",(function(){return RO})),n.d(f,"resolvefilter",(function(){return PO}));var d={};n.r(d),n.d(d,"version",(function(){return LO["a"]})),n.d(d,"bandwidthNRD",(function(){return jn})),n.d(d,"bin",(function(){return Cn})),n.d(d,"bootstrapCI",(function(){return Mn})),n.d(d,"dotbin",(function(){return zn})),n.d(d,"quantiles",(function(){return kn})),n.d(d,"quartiles",(function(){return _n})),n.d(d,"random",(function(){return Dn})),n.d(d,"setRandom",(function(){return Fn})),n.d(d,"randomLCG",(function(){return Tn})),n.d(d,"randomInteger",(function(){return Rn})),n.d(d,"randomKDE",(function(){return Gn})),n.d(d,"randomLogNormal",(function(){return Qn})),n.d(d,"sampleLogNormal",(function(){return Yn})),n.d(d,"densityLogNormal",(function(){return Vn})),n.d(d,"cumulativeLogNormal",(function(){return Xn})),n.d(d,"quantileLogNormal",(function(){return Jn})),n.d(d,"randomMixture",(function(){return Kn})),n.d(d,"randomNormal",(function(){return Hn})),n.d(d,"sampleNormal",(function(){return Ln})),n.d(d,"densityNormal",(function(){return $n})),n.d(d,"cumulativeNormal",(function(){return Un})),n.d(d,"quantileNormal",(function(){return qn})),n.d(d,"randomUniform",(function(){return rr})),n.d(d,"sampleUniform",(function(){return Zn})),n.d(d,"densityUniform",(function(){return er})),n.d(d,"cumulativeUniform",(function(){return tr})),n.d(d,"quantileUniform",(function(){return nr})),n.d(d,"regressionLinear",(function(){return sr})),n.d(d,"regressionLog",(function(){return cr})),n.d(d,"regressionExp",(function(){return lr})),n.d(d,"regressionPow",(function(){return fr})),n.d(d,"regressionQuad",(function(){return dr})),n.d(d,"regressionPoly",(function(){return hr})),n.d(d,"regressionLoess",(function(){return yr})),n.d(d,"sampleCurve",(function(){return kr})),n.d(d,"accessor",(function(){return H["f"]})),n.d(d,"accessorName",(function(){return H["h"]})),n.d(d,"accessorFields",(function(){return H["g"]})),n.d(d,"id",(function(){return H["x"]})),n.d(d,"identity",(function(){return H["y"]})),n.d(d,"zero",(function(){return H["lb"]})),n.d(d,"one",(function(){return H["P"]})),n.d(d,"truthy",(function(){return H["hb"]})),n.d(d,"falsy",(function(){return H["s"]})),n.d(d,"logger",(function(){return H["L"]})),n.d(d,"None",(function(){return H["d"]})),n.d(d,"Error",(function(){return H["b"]})),n.d(d,"Warn",(function(){return H["e"]})),n.d(d,"Info",(function(){return H["c"]})),n.d(d,"Debug",(function(){return H["a"]})),n.d(d,"mergeConfig",(function(){return H["O"]})),n.d(d,"writeConfig",(function(){return H["kb"]})),n.d(d,"panLinear",(function(){return H["R"]})),n.d(d,"panLog",(function(){return H["S"]})),n.d(d,"panPow",(function(){return H["T"]})),n.d(d,"panSymlog",(function(){return H["U"]})),n.d(d,"zoomLinear",(function(){return H["mb"]})),n.d(d,"zoomLog",(function(){return H["nb"]})),n.d(d,"zoomPow",(function(){return H["ob"]})),n.d(d,"zoomSymlog",(function(){return H["pb"]})),n.d(d,"quarter",(function(){return H["W"]})),n.d(d,"utcquarter",(function(){return H["ib"]})),n.d(d,"array",(function(){return H["i"]})),n.d(d,"clampRange",(function(){return H["k"]})),n.d(d,"compare",(function(){return H["l"]})),n.d(d,"ascending",(function(){return H["j"]})),n.d(d,"constant",(function(){return H["m"]})),n.d(d,"debounce",(function(){return H["n"]})),n.d(d,"error",(function(){return H["o"]})),n.d(d,"extend",(function(){return H["p"]})),n.d(d,"extent",(function(){return H["q"]})),n.d(d,"extentIndex",(function(){return H["r"]})),n.d(d,"fastmap",(function(){return H["t"]})),n.d(d,"field",(function(){return H["u"]})),n.d(d,"flush",(function(){return H["v"]})),n.d(d,"hasOwnProperty",(function(){return H["w"]})),n.d(d,"inherits",(function(){return H["z"]})),n.d(d,"inrange",(function(){return H["A"]})),n.d(d,"isArray",(function(){return H["B"]})),n.d(d,"isBoolean",(function(){return H["C"]})),n.d(d,"isDate",(function(){return H["D"]})),n.d(d,"isFunction",(function(){return H["E"]})),n.d(d,"isNumber",(function(){return H["F"]})),n.d(d,"isObject",(function(){return H["G"]})),n.d(d,"isRegExp",(function(){return H["H"]})),n.d(d,"isString",(function(){return H["I"]})),n.d(d,"key",(function(){return H["J"]})),n.d(d,"lerp",(function(){return H["K"]})),n.d(d,"lruCache",(function(){return H["M"]})),n.d(d,"merge",(function(){return H["N"]})),n.d(d,"pad",(function(){return H["Q"]})),n.d(d,"peek",(function(){return H["V"]})),n.d(d,"repeat",(function(){return H["X"]})),n.d(d,"span",(function(){return H["Y"]})),n.d(d,"splitAccessPath",(function(){return H["Z"]})),n.d(d,"stringValue",(function(){return H["ab"]})),n.d(d,"toBoolean",(function(){return H["bb"]})),n.d(d,"toDate",(function(){return H["cb"]})),n.d(d,"toNumber",(function(){return H["db"]})),n.d(d,"toString",(function(){return H["fb"]})),n.d(d,"toSet",(function(){return H["eb"]})),n.d(d,"truncate",(function(){return H["gb"]})),n.d(d,"visitArray",(function(){return H["jb"]})),n.d(d,"loader",(function(){return ke})),n.d(d,"read",(function(){return at})),n.d(d,"inferType",(function(){return Te})),n.d(d,"inferTypes",(function(){return Re})),n.d(d,"typeParsers",(function(){return Me})),n.d(d,"format",(function(){return rt})),n.d(d,"formats",(function(){return it})),n.d(d,"Bounds",(function(){return ua})),n.d(d,"Gradient",(function(){return la})),n.d(d,"GroupItem",(function(){return da})),n.d(d,"ResourceLoader",(function(){return ga})),n.d(d,"Item",(function(){return fa})),n.d(d,"Scenegraph",(function(){return Rc})),n.d(d,"Handler",(function(){return Gc})),n.d(d,"Renderer",(function(){return Xc})),n.d(d,"CanvasHandler",(function(){return tl})),n.d(d,"CanvasRenderer",(function(){return cl})),n.d(d,"SVGHandler",(function(){return gl})),n.d(d,"SVGRenderer",(function(){return kl})),n.d(d,"SVGStringRenderer",(function(){return Il})),n.d(d,"RenderType",(function(){return Jl})),n.d(d,"renderModule",(function(){return Kl})),n.d(d,"Marks",(function(){return jc})),n.d(d,"boundClip",(function(){return ef})),n.d(d,"boundContext",(function(){return Vu})),n.d(d,"boundStroke",(function(){return Wu})),n.d(d,"boundItem",(function(){return Cc})),n.d(d,"boundMark",(function(){return Fc})),n.d(d,"pathCurves",(function(){return Ta})),n.d(d,"pathSymbols",(function(){return Qa})),n.d(d,"pathRectangle",(function(){return au})),n.d(d,"pathTrail",(function(){return su})),n.d(d,"pathParse",(function(){return Pa})),n.d(d,"pathRender",(function(){return Ga})),n.d(d,"point",(function(){return Wc})),n.d(d,"domCreate",(function(){return Ic})),n.d(d,"domFind",(function(){return Lc})),n.d(d,"domChild",(function(){return $c})),n.d(d,"domClear",(function(){return Uc})),n.d(d,"openTag",(function(){return bl})),n.d(d,"closeTag",(function(){return yl})),n.d(d,"font",(function(){return bc})),n.d(d,"fontFamily",(function(){return vc})),n.d(d,"fontSize",(function(){return hc})),n.d(d,"textMetrics",(function(){return sc})),n.d(d,"resetSVGClipId",(function(){return Es})),n.d(d,"sceneEqual",(function(){return nf})),n.d(d,"pathEqual",(function(){return rf})),n.d(d,"sceneToJSON",(function(){return zc})),n.d(d,"sceneFromJSON",(function(){return Nc})),n.d(d,"sceneZOrder",(function(){return rs})),n.d(d,"sceneVisit",(function(){return is})),n.d(d,"scenePickVisit",(function(){return os})),n.d(d,"Dataflow",(function(){return Xt})),n.d(d,"EventStream",(function(){return be})),n.d(d,"Parameters",(function(){return oe})),n.d(d,"Pulse",(function(){return jt})),n.d(d,"MultiPulse",(function(){return zt})),n.d(d,"Operator",(function(){return de})),n.d(d,"Transform",(function(){return Kt})),n.d(d,"changeset",(function(){return re})),n.d(d,"ingest",(function(){return K})),n.d(d,"isTuple",(function(){return X})),n.d(d,"definition",(function(){return tn})),n.d(d,"transform",(function(){return nn})),n.d(d,"transforms",(function(){return en})),n.d(d,"tupleid",(function(){return J})),n.d(d,"scale",(function(){return zd})),n.d(d,"scheme",(function(){return dh})),n.d(d,"schemeDiscretized",(function(){return hh})),n.d(d,"interpolate",(function(){return Ld})),n.d(d,"interpolateRange",(function(){return Bd})),n.d(d,"timeInterval",(function(){return Dh})),n.d(d,"utcInterval",(function(){return Fh})),n.d(d,"projection",(function(){return Rx})),n.d(d,"View",(function(){return cN})),n.d(d,"parse",(function(){return cz})),n.d(d,"expressionFunction",(function(){return oj})),n.d(d,"formatLocale",(function(){return Mh["a"]})),n.d(d,"timeFormatLocale",(function(){return ot["a"]})),n.d(d,"runtime",(function(){return Tz})),n.d(d,"runtimeContext",(function(){return Iz}));var h={};n.r(h),n.d(h,"deepEqual",(function(){return SN})),n.d(h,"duplicate",(function(){return jN})),n.d(h,"globalWholeWordRegExp",(function(){return CN})),n.d(h,"pick",(function(){return DN})),n.d(h,"omit",(function(){return FN})),n.d(h,"stringify",(function(){return MN})),n.d(h,"hash",(function(){return zN})),n.d(h,"contains",(function(){return NN})),n.d(h,"without",(function(){return TN})),n.d(h,"union",(function(){return RN})),n.d(h,"some",(function(){return BN})),n.d(h,"every",(function(){return PN})),n.d(h,"flatten",(function(){return IN})),n.d(h,"fill",(function(){return LN})),n.d(h,"mergeDeep",(function(){return $N})),n.d(h,"unique",(function(){return qN})),n.d(h,"isEqual",(function(){return WN})),n.d(h,"setEqual",(function(){return HN})),n.d(h,"hasIntersection",(function(){return GN})),n.d(h,"prefixGenerator",(function(){return YN})),n.d(h,"fieldIntersection",(function(){return VN})),n.d(h,"isNumeric",(function(){return XN})),n.d(h,"differArray",(function(){return JN})),n.d(h,"keys",(function(){return QN})),n.d(h,"vals",(function(){return KN})),n.d(h,"entries",(function(){return ZN})),n.d(h,"flagKeys",(function(){return eT})),n.d(h,"isBoolean",(function(){return tT})),n.d(h,"varName",(function(){return nT})),n.d(h,"logicalExpr",(function(){return rT})),n.d(h,"deleteNestedProperty",(function(){return iT})),n.d(h,"titlecase",(function(){return oT})),n.d(h,"accessPathWithDatum",(function(){return aT})),n.d(h,"flatAccessWithDatum",(function(){return uT})),n.d(h,"replacePathInField",(function(){return sT})),n.d(h,"removePathFromField",(function(){return cT})),n.d(h,"accessPathDepth",(function(){return lT})),n.d(h,"getFirstDefined",(function(){return fT})),n.d(h,"uniqueId",(function(){return hT})),n.d(h,"resetIdCounter",(function(){return pT}));var p={};n.r(p),n.d(p,"AGGREGATE_OPS",(function(){return mT})),n.d(p,"isAggregateOp",(function(){return vT})),n.d(p,"COUNTING_OPS",(function(){return bT})),n.d(p,"isCountingAggregateOp",(function(){return yT})),n.d(p,"isMinMaxOp",(function(){return xT})),n.d(p,"SUM_OPS",(function(){return wT})),n.d(p,"SHARED_DOMAIN_OPS",(function(){return OT})),n.d(p,"SHARED_DOMAIN_OP_INDEX",(function(){return ET}));var g={};n.r(g),n.d(g,"AXIS_PARTS",(function(){return kT})),n.d(g,"AXIS_PROPERTY_TYPE",(function(){return _T})),n.d(g,"isAxisProperty",(function(){return CT})),n.d(g,"VG_AXIS_PROPERTIES",(function(){return DT})),n.d(g,"AXIS_PROPERTIES",(function(){return FT}));var m={};n.r(m),n.d(m,"Channel",(function(){return MT})),n.d(m,"X",(function(){return zT})),n.d(m,"Y",(function(){return NT})),n.d(m,"X2",(function(){return TT})),n.d(m,"Y2",(function(){return RT})),n.d(m,"XERROR",(function(){return BT})),n.d(m,"YERROR",(function(){return PT})),n.d(m,"XERROR2",(function(){return IT})),n.d(m,"YERROR2",(function(){return LT})),n.d(m,"LATITUDE",(function(){return $T})),n.d(m,"LATITUDE2",(function(){return UT})),n.d(m,"LONGITUDE",(function(){return qT})),n.d(m,"LONGITUDE2",(function(){return WT})),n.d(m,"ROW",(function(){return HT})),n.d(m,"COLUMN",(function(){return GT})),n.d(m,"SHAPE",(function(){return YT})),n.d(m,"SIZE",(function(){return VT})),n.d(m,"COLOR",(function(){return XT})),n.d(m,"FILL",(function(){return JT})),n.d(m,"STROKE",(function(){return QT})),n.d(m,"TEXT",(function(){return KT})),n.d(m,"DETAIL",(function(){return ZT})),n.d(m,"KEY",(function(){return eR})),n.d(m,"ORDER",(function(){return tR})),n.d(m,"OPACITY",(function(){return nR})),n.d(m,"FILLOPACITY",(function(){return rR})),n.d(m,"STROKEOPACITY",(function(){return iR})),n.d(m,"STROKEWIDTH",(function(){return oR})),n.d(m,"TOOLTIP",(function(){return aR})),n.d(m,"HREF",(function(){return uR})),n.d(m,"GEOPOSITION_CHANNEL_INDEX",(function(){return sR})),n.d(m,"GEOPOSITION_CHANNELS",(function(){return cR})),n.d(m,"isColorChannel",(function(){return fR})),n.d(m,"CHANNELS",(function(){return pR})),n.d(m,"SINGLE_DEF_CHANNELS",(function(){return bR})),n.d(m,"isChannel",(function(){return yR})),n.d(m,"isSecondaryRangeChannel",(function(){return xR})),n.d(m,"getMainRangeChannel",(function(){return wR})),n.d(m,"UNIT_CHANNELS",(function(){return OR})),n.d(m,"NONPOSITION_CHANNELS",(function(){return RR})),n.d(m,"POSITION_SCALE_CHANNELS",(function(){return PR})),n.d(m,"NONPOSITION_SCALE_CHANNELS",(function(){return GR})),n.d(m,"isNonPositionScaleChannel",(function(){return YR})),n.d(m,"SCALE_CHANNELS",(function(){return XR})),n.d(m,"isScaleChannel",(function(){return JR})),n.d(m,"supportMark",(function(){return QR})),n.d(m,"rangeType",(function(){return ZR}));var v={};n.r(v),n.d(v,"binToString",(function(){return eB})),n.d(v,"isBinning",(function(){return tB})),n.d(v,"isBinned",(function(){return nB})),n.d(v,"isBinParams",(function(){return rB})),n.d(v,"autoMaxBins",(function(){return iB}));var b={};n.r(b),n.d(b,"Mark",(function(){return oB})),n.d(b,"AREA",(function(){return aB})),n.d(b,"BAR",(function(){return uB})),n.d(b,"LINE",(function(){return sB})),n.d(b,"POINT",(function(){return cB})),n.d(b,"TEXT",(function(){return lB})),n.d(b,"TICK",(function(){return fB})),n.d(b,"TRAIL",(function(){return dB})),n.d(b,"RECT",(function(){return hB})),n.d(b,"RULE",(function(){return pB})),n.d(b,"GEOSHAPE",(function(){return gB})),n.d(b,"CIRCLE",(function(){return mB})),n.d(b,"SQUARE",(function(){return vB})),n.d(b,"isMark",(function(){return yB})),n.d(b,"isPathMark",(function(){return xB})),n.d(b,"PRIMITIVE_MARKS",(function(){return wB})),n.d(b,"isMarkDef",(function(){return OB})),n.d(b,"isPrimitiveMark",(function(){return kB})),n.d(b,"STROKE_CONFIG",(function(){return _B})),n.d(b,"FILL_CONFIG",(function(){return AB})),n.d(b,"FILL_STROKE_CONFIG",(function(){return SB})),n.d(b,"VL_ONLY_MARK_CONFIG_PROPERTIES",(function(){return jB})),n.d(b,"VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX",(function(){return CB})),n.d(b,"defaultMarkConfig",(function(){return DB})),n.d(b,"defaultBarConfig",(function(){return FB})),n.d(b,"defaultTickConfig",(function(){return MB}));var y={};n.r(y),n.d(y,"isDateTime",(function(){return $B})),n.d(y,"MONTHS",(function(){return UB})),n.d(y,"SHORT_MONTHS",(function(){return qB})),n.d(y,"DAYS",(function(){return WB})),n.d(y,"SHORT_DAYS",(function(){return HB})),n.d(y,"dateTimeExpr",(function(){return XB}));var x={};n.r(x),n.d(x,"TimeUnit",(function(){return KB})),n.d(x,"TIMEUNIT_PARTS",(function(){return eP})),n.d(x,"isLocalSingleTimeUnit",(function(){return tP})),n.d(x,"isUtcSingleTimeUnit",(function(){return rP})),n.d(x,"isUTCTimeUnit",(function(){return uP})),n.d(x,"getLocalTimeUnit",(function(){return sP})),n.d(x,"TIMEUNITS",(function(){return lP})),n.d(x,"isTimeUnit",(function(){return fP})),n.d(x,"convert",(function(){return hP})),n.d(x,"getTimeUnitParts",(function(){return gP})),n.d(x,"containsTimeUnit",(function(){return mP})),n.d(x,"fieldExpr",(function(){return vP})),n.d(x,"getDateTimeComponents",(function(){return bP})),n.d(x,"formatExpression",(function(){return yP})),n.d(x,"normalizeTimeUnit",(function(){return xP}));var w={};n.r(w),n.d(w,"Type",(function(){return wP})),n.d(w,"TYPE_INDEX",(function(){return OP})),n.d(w,"isType",(function(){return EP})),n.d(w,"QUANTITATIVE",(function(){return kP})),n.d(w,"ORDINAL",(function(){return _P})),n.d(w,"TEMPORAL",(function(){return AP})),n.d(w,"NOMINAL",(function(){return SP})),n.d(w,"GEOJSON",(function(){return jP})),n.d(w,"getFullName",(function(){return CP}));var O={};n.r(O),n.d(O,"isConditionalSelection",(function(){return DP})),n.d(O,"isRepeatRef",(function(){return FP})),n.d(O,"toFieldDefBase",(function(){return MP})),n.d(O,"isSortableFieldDef",(function(){return zP})),n.d(O,"isConditionalDef",(function(){return NP})),n.d(O,"hasConditionalFieldDef",(function(){return TP})),n.d(O,"hasConditionalValueDef",(function(){return RP})),n.d(O,"isFieldDef",(function(){return BP})),n.d(O,"isTypedFieldDef",(function(){return PP})),n.d(O,"isStringFieldDef",(function(){return IP})),n.d(O,"isValueDef",(function(){return LP})),n.d(O,"isScaleFieldDef",(function(){return $P})),n.d(O,"isPositionFieldDef",(function(){return UP})),n.d(O,"isMarkPropFieldDef",(function(){return qP})),n.d(O,"isTextFieldDef",(function(){return WP})),n.d(O,"vgField",(function(){return GP})),n.d(O,"isDiscrete",(function(){return YP})),n.d(O,"isContinuous",(function(){return VP})),n.d(O,"isCount",(function(){return XP})),n.d(O,"verbalTitleFormatter",(function(){return JP})),n.d(O,"functionalTitleFormatter",(function(){return QP})),n.d(O,"defaultTitleFormatter",(function(){return KP})),n.d(O,"setTitleFormatter",(function(){return eI})),n.d(O,"resetTitleFormatter",(function(){return tI})),n.d(O,"title",(function(){return nI})),n.d(O,"getGuide",(function(){return rI})),n.d(O,"defaultTitle",(function(){return iI})),n.d(O,"format",(function(){return oI})),n.d(O,"defaultType",(function(){return aI})),n.d(O,"getFieldDef",(function(){return uI})),n.d(O,"getTypedFieldDef",(function(){return sI})),n.d(O,"normalize",(function(){return cI})),n.d(O,"normalizeFieldDef",(function(){return lI})),n.d(O,"normalizeBin",(function(){return fI})),n.d(O,"channelCompatibility",(function(){return hI})),n.d(O,"isNumberFieldDef",(function(){return pI})),n.d(O,"isTimeFieldDef",(function(){return gI})),n.d(O,"valueExpr",(function(){return mI})),n.d(O,"valueArray",(function(){return vI})),n.d(O,"binRequiresRange",(function(){return bI}));var E={};n.r(E),n.d(E,"channelHasField",(function(){return yI})),n.d(E,"isAggregate",(function(){return xI})),n.d(E,"extractTransformsFromEncoding",(function(){return wI})),n.d(E,"markChannelCompatible",(function(){return OI})),n.d(E,"normalizeEncoding",(function(){return EI})),n.d(E,"isRanged",(function(){return kI})),n.d(E,"fieldDefs",(function(){return _I})),n.d(E,"forEach",(function(){return AI})),n.d(E,"reduce",(function(){return SI}));var k={};n.r(k),n.d(k,"add",(function(){return oL})),n.d(k,"remove",(function(){return aL})),n.d(k,"getAllCompositeMarks",(function(){return uL})),n.d(k,"getCompositeMarkParts",(function(){return sL})),n.d(k,"normalize",(function(){return cL}));var _={};n.r(_),n.d(_,"defaultLegendConfig",(function(){return dL})),n.d(_,"LEGEND_PROPERTIES",(function(){return gL})),n.d(_,"VG_LEGEND_PROPERTIES",(function(){return mL}));var A={};n.r(A),n.d(A,"ScaleType",(function(){return vL})),n.d(A,"SCALE_TYPES",(function(){return yL})),n.d(A,"scaleCompatible",(function(){return xL})),n.d(A,"scaleTypePrecedence",(function(){return OL})),n.d(A,"CONTINUOUS_TO_CONTINUOUS_SCALES",(function(){return EL})),n.d(A,"CONTINUOUS_TO_DISCRETE_SCALES",(function(){return _L})),n.d(A,"CONTINUOUS_DOMAIN_SCALES",(function(){return SL})),n.d(A,"DISCRETE_DOMAIN_SCALES",(function(){return CL})),n.d(A,"TIME_SCALE_TYPES",(function(){return ML})),n.d(A,"hasDiscreteDomain",(function(){return zL})),n.d(A,"isBinScale",(function(){return NL})),n.d(A,"hasContinuousDomain",(function(){return TL})),n.d(A,"isContinuousToContinuous",(function(){return RL})),n.d(A,"isContinuousToDiscrete",(function(){return BL})),n.d(A,"defaultScaleConfig",(function(){return PL})),n.d(A,"isExtendedScheme",(function(){return IL})),n.d(A,"isSelectionDomain",(function(){return LL})),n.d(A,"SCALE_PROPERTIES",(function(){return UL})),n.d(A,"NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES",(function(){return XL})),n.d(A,"SCALE_TYPE_INDEX",(function(){return JL})),n.d(A,"scaleTypeSupportProperty",(function(){return QL})),n.d(A,"channelScalePropertyIncompatability",(function(){return KL})),n.d(A,"scaleTypeSupportDataType",(function(){return ZL})),n.d(A,"channelSupportScaleType",(function(){return e$})),n.d(A,"getSupportedScaleType",(function(){return t$}));var S={};n.r(S),n.d(S,"defaultViewConfig",(function(){return u$})),n.d(S,"isVgScheme",(function(){return s$})),n.d(S,"defaultConfig",(function(){return c$})),n.d(S,"initConfig",(function(){return l$})),n.d(S,"stripAndRedirectConfig",(function(){return p$}));var j={};n.r(j),n.d(j,"isUrlData",(function(){return m$})),n.d(j,"isInlineData",(function(){return v$})),n.d(j,"isNamedData",(function(){return b$})),n.d(j,"MAIN",(function(){return y$})),n.d(j,"RAW",(function(){return x$}));var C={};n.r(C),n.d(C,"HEADER_TITLE_PROPERTIES_MAP",(function(){return w$})),n.d(C,"HEADER_LABEL_PROPERTIES_MAP",(function(){return O$})),n.d(C,"HEADER_TITLE_PROPERTIES",(function(){return E$})),n.d(C,"HEADER_LABEL_PROPERTIES",(function(){return k$}));var D={};n.r(D),n.d(D,"isSortField",(function(){return _$})),n.d(D,"isSortArray",(function(){return A$}));var F={};n.r(F),n.d(F,"isStackOffset",(function(){return j$})),n.d(F,"STACKABLE_MARKS",(function(){return C$})),n.d(F,"STACK_BY_DEFAULT_MARKS",(function(){return D$})),n.d(F,"stack",(function(){return M$}));var M={};n.r(M),n.d(M,"normalize",(function(){return P$})),n.d(M,"isConcatSpec",(function(){return z$})),n.d(M,"isHConcatSpec",(function(){return T$})),n.d(M,"isVConcatSpec",(function(){return N$})),n.d(M,"isFacetSpec",(function(){return QB})),n.d(M,"isLayerSpec",(function(){return R$})),n.d(M,"isRepeatSpec",(function(){return B$})),n.d(M,"isUnitSpec",(function(){return eU})),n.d(M,"fieldDefs",(function(){return rU})),n.d(M,"isStacked",(function(){return iU})),n.d(M,"usedFields",(function(){return oU}));var z={};n.r(z),n.d(z,"isFilter",(function(){return EU})),n.d(z,"isImputeSequence",(function(){return kU})),n.d(z,"isLookup",(function(){return _U})),n.d(z,"isSample",(function(){return AU})),n.d(z,"isWindow",(function(){return SU})),n.d(z,"isFlatten",(function(){return jU})),n.d(z,"isCalculate",(function(){return CU})),n.d(z,"isBin",(function(){return DU})),n.d(z,"isImpute",(function(){return FU})),n.d(z,"isTimeUnit",(function(){return MU})),n.d(z,"isAggregate",(function(){return zU})),n.d(z,"isStack",(function(){return NU})),n.d(z,"isFold",(function(){return TU})),n.d(z,"normalizeTransform",(function(){return RU}));var N={};n.r(N),n.d(N,"DEFAULT_REQUIRED_CHANNEL_MAP",(function(){return BU})),n.d(N,"DEFAULT_SUPPORTED_CHANNEL_TYPE",(function(){return PU})),n.d(N,"getEncodingMappingError",(function(){return IU}));var T={};n.r(T),n.d(T,"symbols",(function(){return PH})),n.d(T,"gradient",(function(){return IH})),n.d(T,"labels",(function(){return LH}));var R={};n.r(R),n.d(R,"compile",(function(){return $X})),n.d(R,"extractTransforms",(function(){return WX})),n.d(R,"aggregate",(function(){return p})),n.d(R,"axis",(function(){return g})),n.d(R,"bin",(function(){return v})),n.d(R,"channel",(function(){return m})),n.d(R,"compositeMark",(function(){return k})),n.d(R,"config",(function(){return S})),n.d(R,"data",(function(){return j})),n.d(R,"datetime",(function(){return y})),n.d(R,"encoding",(function(){return E})),n.d(R,"fieldDef",(function(){return O})),n.d(R,"header",(function(){return C})),n.d(R,"legend",(function(){return _})),n.d(R,"mark",(function(){return b})),n.d(R,"scale",(function(){return A})),n.d(R,"sort",(function(){return D})),n.d(R,"spec",(function(){return M})),n.d(R,"stack",(function(){return F})),n.d(R,"timeUnit",(function(){return x})),n.d(R,"transform",(function(){return z})),n.d(R,"type",(function(){return w})),n.d(R,"util",(function(){return h})),n.d(R,"validate",(function(){return N})),n.d(R,"version",(function(){return JX}));var B={};n.r(B),n.d(B,"dark",(function(){return xJ})),n.d(B,"excel",(function(){return OJ})),n.d(B,"fivethirtyeight",(function(){return CJ})),n.d(B,"ggplot2",(function(){return FJ})),n.d(B,"googlecharts",(function(){return uQ})),n.d(B,"latimes",(function(){return UJ})),n.d(B,"quartz",(function(){return HJ})),n.d(B,"urbaninstitute",(function(){return rQ})),n.d(B,"version",(function(){return sQ})),n.d(B,"vox",(function(){return YJ}));function P(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function I(e,t,n,r){function i(e){return e instanceof n?e:new n((function(t){t(e)}))}return new(n||(n=Promise))((function(n,o){function a(e){try{s(r.next(e))}catch(t){o(t)}}function u(e){try{s(r["throw"](e))}catch(t){o(t)}}function s(e){e.done?n(e.value):i(e.value).then(a,u)}s((r=r.apply(e,t||[])).next())}))}var L=n("00a5"),$=n("0165"),U=n("6582"),q=n.n(U),W=n("8d61"),H=n("276f");function G(e){var t=e||H["y"],n=[],r={};return n.add=function(e){var i=t(e);return r[i]||(r[i]=1,n.push(e)),n},n.remove=function(e){var i,o=t(e);return r[o]&&(r[o]=0,(i=n.indexOf(e))>=0&&n.splice(i,1)),n},n}var Y=Symbol("vega_id"),V=1;function X(e){return!(!e||!J(e))}function J(e){return e[Y]}function Q(e,t){return e[Y]=t,e}function K(e){var t=e===Object(e)?e:{data:e};return J(t)?t:Q(t,V++)}function Z(e){return ee(e,K({}))}function ee(e,t){for(var n in e)t[n]=e[n];return t}function te(e,t){return Q(t,J(e))}function ne(e){return e&&e.constructor===re}function re(){var e=[],t=[],n=[],r=[],i=[],o=!1;return{constructor:re,insert:function(t){for(var n=Object(H["i"])(t),r=0,i=n.length;r<i;++r)e.push(n[r]);return this},remove:function(e){for(var n=Object(H["E"])(e)?r:t,i=Object(H["i"])(e),o=0,a=i.length;o<a;++o)n.push(i[o]);return this},modify:function(e,t,r){var o={field:t,value:Object(H["m"])(r)};return Object(H["E"])(e)?(o.filter=e,i.push(o)):(o.tuple=e,n.push(o)),this},encode:function(e,t){return Object(H["E"])(e)?i.push({filter:e,field:t}):n.push({tuple:e,field:t}),this},reflow:function(){return o=!0,this},pulse:function(a,u){var s,c,l,f,d,h,p={},g={};for(s=0,c=u.length;s<c;++s)p[J(u[s])]=1;for(s=0,c=t.length;s<c;++s)d=t[s],p[J(d)]=-1;for(s=0,c=r.length;s<c;++s)f=r[s],u.forEach((function(e){f(e)&&(p[J(e)]=-1)}));for(s=0,c=e.length;s<c;++s)d=e[s],h=J(d),p[h]?p[h]=1:a.add.push(K(e[s]));for(s=0,c=u.length;s<c;++s)d=u[s],p[J(d)]<0&&a.rem.push(d);function m(e,t,n){n?e[t]=n(e):a.encode=t,o||(g[J(e)]=e)}for(s=0,c=n.length;s<c;++s)l=n[s],d=l.tuple,f=l.field,h=p[J(d)],h>0&&(m(d,f,l.value),a.modifies(f));for(s=0,c=i.length;s<c;++s)l=i[s],f=l.filter,u.forEach((function(e){f(e)&&p[J(e)]>0&&m(e,l.field,l.value)})),a.modifies(l.field);if(o)a.mod=t.length||r.length?u.filter((function(e){return p[J(e)]>0})):u.slice();else for(h in g)a.mod.push(g[h]);return a}}}var ie="_:mod:_";function oe(){Object.defineProperty(this,ie,{writable:!0,value:{}})}var ae=oe.prototype;ae.set=function(e,t,n,r){var i=this,o=i[e],a=i[ie];return null!=t&&t>=0?(o[t]!==n||r)&&(o[t]=n,a[t+":"+e]=-1,a[e]=-1):(o!==n||r)&&(i[e]=n,a[e]=Object(H["B"])(n)?1+n.length:-1),i},ae.modified=function(e,t){var n,r=this[ie];if(!arguments.length){for(n in r)if(r[n])return!0;return!1}if(Object(H["B"])(e)){for(n=0;n<e.length;++n)if(r[e[n]])return!0;return!1}return null!=t&&t>=0?t+1<r[e]||!!r[t+":"+e]:!!r[e]},ae.clear=function(){return this[ie]={},this};var ue=0,se="pulse",ce=new oe,le=1,fe=2;function de(e,t,n,r){this.id=++ue,this.value=e,this.stamp=-1,this.rank=-1,this.qrank=-1,this.flags=0,t&&(this._update=t),n&&this.parameters(n,r)}var he=de.prototype;function pe(e){return function(t){var n=this.flags;return 0===arguments.length?!!(n&e):(this.flags=t?n|e:n&~e,this)}}he.targets=function(){return this._targets||(this._targets=G(H["x"]))},he.set=function(e){return this.value!==e?(this.value=e,1):0},he.skip=pe(le),he.modified=pe(fe),he.parameters=function(e,t,n){t=!1!==t;var r,i,o,a,u=this,s=u._argval=u._argval||new oe,c=u._argops=u._argops||[],l=[];function f(e,n,r){r instanceof de?(r!==u&&(t&&r.targets().add(u),l.push(r)),c.push({op:r,name:e,index:n})):s.set(e,n,r)}for(r in e)if(i=e[r],r===se)Object(H["i"])(i).forEach((function(e){e instanceof de?e!==u&&(e.targets().add(u),l.push(e)):Object(H["o"])("Pulse parameters must be operator instances.")})),u.source=i;else if(Object(H["B"])(i))for(s.set(r,-1,Array(o=i.length)),a=0;a<o;++a)f(r,a,i[a]);else f(r,-1,i);return this.marshall().clear(),n&&(c.initonly=!0),l},he.marshall=function(e){var t,n,r,i,o,a=this._argval||ce,u=this._argops;if(u){for(n=0,r=u.length;n<r;++n)t=u[n],i=t.op,o=i.modified()&&i.stamp===e,a.set(t.name,t.index,i.value,o);if(u.initonly){for(n=0;n<r;++n)t=u[n],t.op.targets().remove(this);this._argops=null,this._update=null}}return a},he.evaluate=function(e){var t=this._update;if(t){var n=this.marshall(e.stamp),r=t.call(this,n,e);if(n.clear(),r!==this.value)this.value=r;else if(!this.modified())return e.StopPropagation}},he.run=function(e){return e.stamp<=this.stamp?e.StopPropagation:(this.skip()?(this.skip(!1),t=0):t=this.evaluate(e),this.stamp=e.stamp,this.pulse=t||e);var t};var ge=function(e,t,n,r){var i,o=1;return e instanceof de?i=e:e&&e.prototype instanceof de?i=new e:Object(H["E"])(e)?i=new de(null,e):(o=0,i=new de(e,t)),this.rank(i),o&&(r=n,n=t),n&&this.connect(i,i.parameters(n,r)),this.touch(i),i},me=function(e,t){var n,r,i=e.rank;for(n=0,r=t.length;n<r;++n)if(i<t[n].rank)return void this.rerank(e)},ve=0;function be(e,t,n){this.id=++ve,this.value=null,n&&(this.receive=n),e&&(this._filter=e),t&&(this._apply=t)}function ye(e,t,n){return new be(e,t,n)}var xe=be.prototype;xe._filter=H["hb"],xe._apply=H["y"],xe.targets=function(){return this._targets||(this._targets=G(H["x"]))},xe.consume=function(e){return arguments.length?(this._consume=!!e,this):!!this._consume},xe.receive=function(e){if(this._filter(e)){for(var t=this.value=this._apply(e),n=this._targets,r=n?n.length:0,i=0;i<r;++i)n[i].receive(t);this._consume&&(e.preventDefault(),e.stopPropagation())}},xe.filter=function(e){var t=ye(e);return this.targets().add(t),t},xe.apply=function(e){var t=ye(null,e);return this.targets().add(t),t},xe.merge=function(){var e=ye();this.targets().add(e);for(var t=0,n=arguments.length;t<n;++t)arguments[t].targets().add(e);return e},xe.throttle=function(e){var t=-1;return this.filter((function(){var n=Date.now();return n-t>e?(t=n,1):0}))},xe.debounce=function(e){var t=ye();return this.targets().add(ye(null,null,Object(H["n"])(e,(function(e){var n=e.dataflow;t.receive(e),n&&n.run&&n.run()})))),t},xe.between=function(e,t){var n=!1;return e.targets().add(ye(null,null,(function(){n=!0}))),t.targets().add(ye(null,null,(function(){n=!1}))),this.filter((function(){return n}))};var we=function(e,t,n,r){var i,o=this,a=ye(n,r),u=function(e){e.dataflow=o;try{a.receive(e)}catch(t){o.error(t)}finally{o.run()}};i="string"===typeof e&&"undefined"!==typeof document?document.querySelectorAll(e):Object(H["i"])(e);for(var s=0,c=i.length;s<c;++s)i[s].addEventListener(t,u);return a},Oe=/^([A-Za-z]+:)?\/\//,Ee="file://",ke=function(e){return{options:e||{},sanitize:Ae,load:_e,file:je,http:Se}};function _e(e,t){var n=this;return n.sanitize(e,t).then((function(e){var r=e.href;return e.localFile?n.file(r):n.http(r,t)}))}function Ae(e,t){return t=Object(H["p"])({},this.options,t),new Promise((function(n,r){var i,o,a,u,s={href:null};null!=e&&"string"===typeof e?(o=Oe.test(e),(u=t.baseURL)&&!o&&(Fe(e,"/")||"/"===u[u.length-1]||(e="/"+e),e=u+e),a=(i=Fe(e,Ee))||"file"===t.mode||"http"!==t.mode&&!o&&De(),i?e=e.slice(Ee.length):Fe(e,"//")&&("file"===t.defaultProtocol?(e=e.slice(2),a=!0):e=(t.defaultProtocol||"http")+":"+e),Object.defineProperty(s,"localFile",{value:!!a}),s.href=e,t.target&&(s.target=t.target+""),n(s)):r("Sanitize failure, invalid URI: "+Object(H["ab"])(e))}))}function Se(e,t){return Ce(e,Object(H["p"])({},this.options.http,t)).then((function(e){if(!e.ok)throw e.status+""+e.statusText;return e.text()}))}function je(e){return new Promise((function(t,n){var r=De();r?r.readFile(e,(function(e,r){e?n(e):t(r)})):n("No file system access for "+e)}))}function Ce(e,t){var r="function"===typeof fetch?fetch:n(4);return r?r(e,t):Promise.reject("No fetch method available.")}function De(){var e=n(5);return e&&Object(H["E"])(e.readFile)?e:null}function Fe(e,t){return null!=e&&0===e.lastIndexOf(t,0)}var Me={boolean:H["bb"],integer:H["db"],number:H["db"],date:H["cb"],string:H["fb"],unknown:H["y"]},ze=[Pe,$e,Le,Ie],Ne=["boolean","integer","number","date"];function Te(e,t){if(!e||!e.length)return"unknown";var n,r,i,o=0,a=e.length,u=ze.length,s=ze.map((function(e,t){return t+1}));for(r=0,a=e.length;r<a;++r)for(n=t?e[r][t]:e[r],i=0;i<u;++i)if(s[i]&&Be(n)&&!ze[i](n)&&(s[i]=0,++o,o===ze.length))return"string";return o=s.reduce((function(e,t){return 0===e?t:e}),0)-1,Ne[o]}function Re(e,t){return t.reduce((function(t,n){return t[n]=Te(e,n),t}),{})}function Be(e){return null!=e&&e===e}function Pe(e){return"true"===e||"false"===e||!0===e||!1===e}function Ie(e){return!isNaN(Date.parse(e))}function Le(e){return!isNaN(+e)&&!(e instanceof Date)}function $e(e){return Le(e)&&(e=+e)===~~e}var Ue=n("3512");function qe(e){return function(t,n){var r={delimiter:e};return We(t,n?Object(H["p"])(n,r):r)}}function We(e,t){return t.header&&(e=t.header.map(H["ab"]).join(t.delimiter)+"\n"+e),Object(Ue["a"])(t.delimiter).parse(e+"")}var He=n("9b0d"),Ge=function(e){return e},Ye=function(e){if(null==e)return Ge;var t,n,r=e.scale[0],i=e.scale[1],o=e.translate[0],a=e.translate[1];return function(e,u){u||(t=n=0);var s=2,c=e.length,l=new Array(c);l[0]=(t+=e[0])*r+o,l[1]=(n+=e[1])*i+a;while(s<c)l[s]=e[s],++s;return l}},Ve=function(e,t){var n,r=e.length,i=r-t;while(i<--r)n=e[i],e[i++]=e[r],e[r]=n},Xe=function(e,t){return"string"===typeof t&&(t=e.objects[t]),"GeometryCollection"===t.type?{type:"FeatureCollection",features:t.geometries.map((function(t){return Je(e,t)}))}:Je(e,t)};function Je(e,t){var n=t.id,r=t.bbox,i=null==t.properties?{}:t.properties,o=Qe(e,t);return null==n&&null==r?{type:"Feature",properties:i,geometry:o}:null==r?{type:"Feature",id:n,properties:i,geometry:o}:{type:"Feature",id:n,bbox:r,properties:i,geometry:o}}function Qe(e,t){var n=Ye(e.transform),r=e.arcs;function i(e,t){t.length&&t.pop();for(var i=r[e<0?~e:e],o=0,a=i.length;o<a;++o)t.push(n(i[o],o));e<0&&Ve(t,a)}function o(e){return n(e)}function a(e){for(var t=[],n=0,r=e.length;n<r;++n)i(e[n],t);return t.length<2&&t.push(t[0]),t}function u(e){var t=a(e);while(t.length<4)t.push(t[0]);return t}function s(e){return e.map(u)}function c(e){var t,n=e.type;switch(n){case"GeometryCollection":return{type:n,geometries:e.geometries.map(c)};case"Point":t=o(e.coordinates);break;case"MultiPoint":t=e.coordinates.map(o);break;case"LineString":t=a(e.arcs);break;case"MultiLineString":t=e.arcs.map(a);break;case"Polygon":t=s(e.arcs);break;case"MultiPolygon":t=e.arcs.map(s);break;default:return null}return{type:n,coordinates:t}}return c(t)}var Ke=function(e,t){var n={},r={},i={},o=[],a=-1;function u(t){var n,r=e.arcs[t<0?~t:t],i=r[0];return e.transform?(n=[0,0],r.forEach((function(e){n[0]+=e[0],n[1]+=e[1]}))):n=r[r.length-1],t<0?[n,i]:[i,n]}function s(e,t){for(var r in e){var i=e[r];delete t[i.start],delete i.start,delete i.end,i.forEach((function(e){n[e<0?~e:e]=1})),o.push(i)}}return t.forEach((function(n,r){var i,o=e.arcs[n<0?~n:n];o.length<3&&!o[1][0]&&!o[1][1]&&(i=t[++a],t[a]=n,t[r]=i)})),t.forEach((function(e){var t,n,o=u(e),a=o[0],s=o[1];if(t=i[a])if(delete i[t.end],t.push(e),t.end=s,n=r[s]){delete r[n.start];var c=n===t?t:t.concat(n);r[c.start=t.start]=i[c.end=n.end]=c}else r[t.start]=i[t.end]=t;else if(t=r[s])if(delete r[t.start],t.unshift(e),t.start=a,n=i[a]){delete i[n.end];var l=n===t?t:n.concat(t);r[l.start=n.start]=i[l.end=t.end]=l}else r[t.start]=i[t.end]=t;else t=[e],r[t.start=a]=i[t.end=s]=t})),s(i,r),s(r,i),t.forEach((function(e){n[e<0?~e:e]||o.push([e])})),o},Ze=function(e){return Qe(e,et.apply(this,arguments))};function et(e,t,n){var r,i,o;if(arguments.length>1)r=tt(e,t,n);else for(i=0,r=new Array(o=e.arcs.length);i<o;++i)r[i]=i;return{type:"MultiLineString",arcs:Ke(e,r)}}function tt(e,t,n){var r,i=[],o=[];function a(e){var t=e<0?~e:e;(o[t]||(o[t]=[])).push({i:e,g:r})}function u(e){e.forEach(a)}function s(e){e.forEach(u)}function c(e){e.forEach(s)}function l(e){switch(r=e,e.type){case"GeometryCollection":e.geometries.forEach(l);break;case"LineString":u(e.arcs);break;case"MultiLineString":case"Polygon":s(e.arcs);break;case"MultiPolygon":c(e.arcs);break}}return l(t),o.forEach(null==n?function(e){i.push(e[0].i)}:function(e){n(e[0].g,e[e.length-1].g)&&i.push(e[0].i)}),i}var nt=function(e,t){var n,r,i;return e=Object(He["a"])(e,t),n=t&&(i=t.feature)?Xe:t&&(i=t.mesh)?Ze:Object(H["o"])("Missing TopoJSON feature or mesh parameter."),r=(r=e.objects[i])?n(e,r):Object(H["o"])("Invalid TopoJSON object: "+i),r&&r.features||[r]},rt={dsv:We,csv:qe(","),tsv:qe("\t"),json:He["a"],topojson:nt};function it(e,t){return arguments.length>1?(rt[e]=t,this):rt.hasOwnProperty(e)?rt[e]:null}var ot=n("4c23"),at=function(e,t,n){t=t||{};var r=it(t.type||"json");return r||Object(H["o"])("Unknown data format type: "+t.type),e=r(e,t),t.parse&&ut(e,t.parse,n),e.hasOwnProperty("columns")&&delete e.columns,e};function ut(e,t,n){if(e.length){n=n||ot["c"];var r,i,o,a,u,s,c,l=e.columns||Object.keys(e[0]);for("auto"===t&&(t=Re(e,l)),l=Object.keys(t),r=l.map((function(e){var r,i,o=t[e];if(o&&(0===o.indexOf("date:")||0===o.indexOf("utc:")))return r=o.split(/:(.+)?/,2),i=r[1],("'"===i[0]&&"'"===i[i.length-1]||'"'===i[0]&&'"'===i[i.length-1])&&(i=i.slice(1,-1)),"utc"===r[0]?Object(ot["e"])(i):n(i);if(!Me[o])throw Error("Illegal format pattern: "+e+":"+o);return Me[o]})),a=0,s=e.length,c=l.length;a<s;++a)for(i=e[a],u=0;u<c;++u)o=l[u],i[o]=r[u](i[o])}}function st(e,t,n){return this.pulse(e,this.changeset().insert(at(t,n)))}function ct(e){var t,n,r=new Promise((function(r,i){t=function(){r(e)},n=i}));return r.requests=0,r.done=function(){0===--r.requests&&e.runAfter((function(){e._pending=null;try{e.run(),e._pending?e._pending.then(t):t()}catch(r){n(r)}}))},e._pending=r}function lt(e,t,n){var r=this,i=0,o=r._pending||ct(r);return o.requests+=1,r.loader().load(t,{context:"dataflow"}).then((function(e){return at(e,n)}),(function(e){i=-1,r.error("Loading failed",t,e)})).catch((function(e){i=-2,r.error("Data ingestion failed",t,e)})).then((function(t){return r.pulse(e,r.changeset().remove(H["hb"]).insert(t||[])),o.done(),i}))}var ft={skip:!0},dt=function(e,t,n,r,i){var o=e instanceof de?pt:ht;return o(this,e,t,n,r,i),this};function ht(e,t,n,r,i,o){var a,u,s=Object(H["p"])({},o,ft);Object(H["E"])(n)||(n=Object(H["m"])(n)),void 0===r?a=function(t){e.touch(n(t))}:Object(H["E"])(r)?(u=new de(null,r,i,!1),a=function(t){var r,i=n(t);u.evaluate(t),ne(r=u.value)?e.pulse(i,r,o):e.update(i,r,s)}):a=function(t){e.update(n(t),r,s)},t.apply(a)}function pt(e,t,n,r,i,o){var a,u;void 0===r?u=n:(a=Object(H["E"])(r)?r:Object(H["m"])(r),r=n?function(e,t){var r=a(e,t);return n.skip()||(n.skip(r!==this.value).value=r),r}:a,u=new de(null,r,i,!1),u.modified(o&&o.force),u.rank=0,n&&(u.skip(!0),u.value=n.value,u.targets().add(n))),t.targets().add(u)}function gt(e){e.rank=++this._rank}function mt(e){var t,n,r,i=[e];while(i.length)if(this.rank(t=i.pop()),n=t._targets)for(r=n.length;--r>=0;)i.push(t=n[r]),t===e&&Object(H["o"])("Cycle detected in dataflow graph.")}var vt={},bt=1,yt=2,xt=4,wt=bt|yt,Ot=bt|xt,Et=bt|yt|xt,kt=8,_t=16,At=32,St=64;function jt(e,t,n){this.dataflow=e,this.stamp=null==t?-1:t,this.add=[],this.rem=[],this.mod=[],this.fields=null,this.encode=n||null}var Ct=jt.prototype;function Dt(e,t){return e?function(n,r){return e(n,r)&&t(n,r)}:t}function Ft(e,t){var n=[];return Object(H["jb"])(e,t,(function(e){n.push(e)})),n}function Mt(e,t){var n={};return e.visit(t,(function(e){n[J(e)]=1})),function(e){return n[J(e)]?null:e}}function zt(e,t,n,r){var i,o,a,u,s,c=this,l=0;for(this.dataflow=e,this.stamp=t,this.fields=null,this.encode=r||null,this.pulses=n,a=0,u=n.length;a<u;++a)if(i=n[a],i.stamp===t){if(i.fields)for(s in o=c.fields||(c.fields={}),i.fields)o[s]=1;i.changed(c.ADD)&&(l|=c.ADD),i.changed(c.REM)&&(l|=c.REM),i.changed(c.MOD)&&(l|=c.MOD)}this.changes=l}Ct.StopPropagation=vt,Ct.ADD=bt,Ct.REM=yt,Ct.MOD=xt,Ct.ADD_REM=wt,Ct.ADD_MOD=Ot,Ct.ALL=Et,Ct.REFLOW=kt,Ct.SOURCE=_t,Ct.NO_SOURCE=At,Ct.NO_FIELDS=St,Ct.fork=function(e){return new jt(this.dataflow).init(this,e)},Ct.clone=function(){var e=this.fork(Et);return e.add=e.add.slice(),e.rem=e.rem.slice(),e.mod=e.mod.slice(),e.source&&(e.source=e.source.slice()),e.materialize(Et|_t)},Ct.addAll=function(){var e=this;return this.source&&this.source.length!==this.add.length?(e=new jt(this.dataflow).init(this),e.add=e.source,e):e},Ct.init=function(e,t){var n=this;return n.stamp=e.stamp,n.encode=e.encode,!e.fields||t&St||(n.fields=e.fields),t&bt?(n.addF=e.addF,n.add=e.add):(n.addF=null,n.add=[]),t&yt?(n.remF=e.remF,n.rem=e.rem):(n.remF=null,n.rem=[]),t&xt?(n.modF=e.modF,n.mod=e.mod):(n.modF=null,n.mod=[]),t&At?(n.srcF=null,n.source=null):(n.srcF=e.srcF,n.source=e.source),n},Ct.runAfter=function(e){this.dataflow.runAfter(e)},Ct.changed=function(e){var t=e||Et;return t&bt&&this.add.length||t&yt&&this.rem.length||t&xt&&this.mod.length},Ct.reflow=function(e){if(e)return this.fork(Et).reflow();var t=this.add.length,n=this.source&&this.source.length;return n&&n!==t&&(this.mod=this.source,t&&this.filter(xt,Mt(this,bt))),this},Ct.modifies=function(e){var t=Object(H["i"])(e),n=this.fields||(this.fields={});return t.forEach((function(e){n[e]=!0})),this},Ct.modified=function(e){var t=this.fields;return!(!this.mod.length||!t)&&(arguments.length?Object(H["B"])(e)?e.some((function(e){return t[e]})):t[e]:!!t)},Ct.filter=function(e,t){var n=this;return e&bt&&(n.addF=Dt(n.addF,t)),e&yt&&(n.remF=Dt(n.remF,t)),e&xt&&(n.modF=Dt(n.modF,t)),e&_t&&(n.srcF=Dt(n.srcF,t)),n},Ct.materialize=function(e){e=e||Et;var t=this;return e&bt&&t.addF&&(t.add=Ft(t.add,t.addF),t.addF=null),e&yt&&t.remF&&(t.rem=Ft(t.rem,t.remF),t.remF=null),e&xt&&t.modF&&(t.mod=Ft(t.mod,t.modF),t.modF=null),e&_t&&t.srcF&&(t.source=t.source.filter(t.srcF),t.srcF=null),t},Ct.visit=function(e,t){var n,r,i=this,o=t;return e&_t?(Object(H["jb"])(i.source,i.srcF,o),i):(e&bt&&Object(H["jb"])(i.add,i.addF,o),e&yt&&Object(H["jb"])(i.rem,i.remF,o),e&xt&&Object(H["jb"])(i.mod,i.modF,o),e&kt&&(n=i.source)&&(r=i.add.length+i.mod.length,r===n.length||(r?Object(H["jb"])(n,Mt(i,Ot),o):Object(H["jb"])(n,i.srcF,o))),i)};var Nt=Object(H["z"])(zt,jt);function Tt(e){var t,n,r,i,o=this,a=0,u=o.logLevel();if(o._pending)return o.info("Awaiting requests, delaying dataflow run."),0;if(o._pulse)return o.error("Dataflow invoked recursively. Use the runAfter method to queue invocation."),0;if(!o._touched.length)return o.info("Dataflow invoked, but nothing to do."),0;o._pulse=new jt(o,++o._clock,e),u>=H["c"]&&(r=Date.now(),o.debug("-- START PROPAGATION ("+o._clock+") -----")),o._touched.forEach((function(e){o._enqueue(e,!0)})),o._touched=G(H["x"]);try{while(o._heap.size()>0)t=o._heap.pop(),t.rank===t.qrank?(n=t.run(o._getPulse(t,e)),u>=H["a"]&&o.debug(t.id,n===vt?"STOP":n,t),n!==vt&&(o._pulse=n,t._targets&&t._targets.forEach((function(e){o._enqueue(e)}))),++a):o._enqueue(t,!0)}catch(c){i=c}if(o._pulses={},o._pulse=null,u>=H["c"]&&(r=Date.now()-r,o.info("> Pulse "+o._clock+": "+a+" operators; "+r+"ms")),i&&(o._postrun=[],o.error(i)),o._onrun)try{o._onrun(o,a,i)}catch(c){o.error(c)}if(o._postrun.length){var s=o._postrun;o._postrun=[],s.sort((function(e,t){return t.priority-e.priority})).forEach((function(e){Rt(o,e.callback)}))}return this}function Rt(e,t){try{t(e)}catch(n){e.error(n)}}function Bt(){return this._pending||this.run()&&this._pending||Promise.resolve(this)}function Pt(e,t,n){this._pulse||t?this._postrun.push({priority:n||0,callback:e}):Rt(this,e)}function It(e,t){var n=!this._pulses[e.id];n&&(this._pulses[e.id]=this._pulse),(n||t)&&(e.qrank=e.rank,this._heap.push(e))}function Lt(e,t){var n,r=e.source,i=this._clock;return r&&Object(H["B"])(r)?(n=r.map((function(e){return e.pulse})),new zt(this,i,n,t)):(n=this._pulses[e.id],r&&(r=r.pulse,r&&r!==vt?r.stamp===i&&n.target!==e?n=r:n.source=r.source:n.source=[]),n)}Nt.fork=function(e){var t=new jt(this.dataflow).init(this,e&this.NO_FIELDS);return void 0!==e&&(e&t.ADD&&this.visit(t.ADD,(function(e){return t.add.push(e)})),e&t.REM&&this.visit(t.REM,(function(e){return t.rem.push(e)})),e&t.MOD&&this.visit(t.MOD,(function(e){return t.mod.push(e)}))),t},Nt.changed=function(e){return this.changes&e},Nt.modified=function(e){var t=this,n=t.fields;return n&&t.changes&t.MOD?Object(H["B"])(e)?e.some((function(e){return n[e]})):n[e]:0},Nt.filter=function(){Object(H["o"])("MultiPulse does not support filtering.")},Nt.materialize=function(){Object(H["o"])("MultiPulse does not support materialization.")},Nt.visit=function(e,t){var n=this,r=n.pulses,i=r.length,o=0;if(e&n.SOURCE)for(;o<i;++o)r[o].visit(e,t);else for(;o<i;++o)r[o].stamp===n.stamp&&r[o].visit(e,t);return n};var $t={skip:!1,force:!1};function Ut(e,t){var n=t||$t;return this._pulse?this._enqueue(e):this._touched.add(e),n.skip&&e.skip(!0),this}function qt(e,t,n){var r=n||$t;return(e.set(t)||r.force)&&this.touch(e,r),this}function Wt(e,t,n){this.touch(e,n||$t);var r=new jt(this,this._clock+(this._pulse?0:1)),i=e.pulse&&e.pulse.source||[];return r.target=e,this._pulses[e.id]=t.pulse(r,i),this}function Ht(e){this.cmp=e,this.nodes=[]}var Gt=Ht.prototype;function Yt(e,t,n,r){var i,o,a;i=e[n];while(n>t){if(a=n-1>>1,o=e[a],!(r(i,o)<0))break;e[n]=o,n=a}return e[n]=i}function Vt(e,t,n){var r,i=t,o=e.length,a=e[t],u=2*t+1;while(u<o)r=u+1,r<o&&n(e[u],e[r])>=0&&(u=r),e[t]=e[u],t=u,u=2*t+1;return e[t]=a,Yt(e,i,t,n)}function Xt(){this._log=Object(H["L"])(),this.logLevel(H["b"]),this._clock=0,this._rank=0;try{this._loader=ke()}catch(e){}this._touched=G(H["x"]),this._pulses={},this._pulse=null,this._heap=new Ht((function(e,t){return e.qrank-t.qrank})),this._postrun=[]}Gt.size=function(){return this.nodes.length},Gt.clear=function(){return this.nodes=[],this},Gt.peek=function(){return this.nodes[0]},Gt.push=function(e){var t=this.nodes;return t.push(e),Yt(t,0,t.length-1,this.cmp)},Gt.pop=function(){var e,t=this.nodes,n=t.pop();return t.length?(e=t[0],t[0]=n,Vt(t,0,this.cmp)):e=n,e},Gt.replace=function(e){var t=this.nodes,n=t[0];return t[0]=e,Vt(t,0,this.cmp),n},Gt.pushpop=function(e){var t=this.nodes,n=t[0];return t.length&&this.cmp(n,e)<0&&(t[0]=e,e=n,Vt(t,0,this.cmp)),e};var Jt=Xt.prototype;function Qt(e){return function(){return this._log[e].apply(this,arguments)}}function Kt(e,t){de.call(this,e,null,t)}Jt.stamp=function(){return this._clock},Jt.loader=function(e){return arguments.length?(this._loader=e,this):this._loader},Jt.cleanThreshold=1e4,Jt.add=ge,Jt.connect=me,Jt.rank=gt,Jt.rerank=mt,Jt.pulse=Wt,Jt.touch=Ut,Jt.update=qt,Jt.changeset=re,Jt.ingest=st,Jt.request=lt,Jt.events=we,Jt.on=dt,Jt.run=Tt,Jt.runAsync=Bt,Jt.runAfter=Pt,Jt._enqueue=It,Jt._getPulse=Lt,Jt.error=Qt("error"),Jt.warn=Qt("warn"),Jt.info=Qt("info"),Jt.debug=Qt("debug"),Jt.logLevel=Qt("level");var Zt=Object(H["z"])(Kt,de);Zt.run=function(e){return e.stamp<=this.stamp?e.StopPropagation:(this.skip()?this.skip(!1):t=this.evaluate(e),t=t||e,t!==e.StopPropagation&&(this.pulse=t),this.stamp=e.stamp,t);var t},Zt.evaluate=function(e){var t=this.marshall(e.stamp),n=this.transform(t,e);return t.clear(),n},Zt.transform=function(){};var en={};function tn(e){var t=nn(e);return t&&t.Definition||null}function nn(e){return e=e&&e.toLowerCase(),en.hasOwnProperty(e)?en[e]:null}function rn(e){return function(t){for(var n=e.length,r=1,i=String(e[0](t));r<n;++r)i+="|"+e[r](t);return i}}function on(e){return e&&e.length?1===e.length?e[0]:rn(e):function(){return""}}function an(e,t,n){return n||e+(t?"_"+t:"")}var un={values:ln({name:"values",init:"cell.store = true;",set:"cell.data.values()",idx:-1}),count:ln({name:"count",set:"cell.num"}),__count__:ln({name:"count",set:"this.missing + this.valid"}),missing:ln({name:"missing",set:"this.missing"}),valid:ln({name:"valid",set:"this.valid"}),sum:ln({name:"sum",init:"this.sum = 0;",add:"this.sum += +v;",rem:"this.sum -= v;",set:"this.sum"}),mean:ln({name:"mean",init:"this.mean = 0;",add:"var d = v - this.mean; this.mean += d / this.valid;",rem:"var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;",set:"this.valid ? this.mean : undefined"}),average:ln({name:"average",set:"this.valid ? this.mean : undefined",req:["mean"],idx:1}),variance:ln({name:"variance",init:"this.dev = 0;",add:"this.dev += d * (v - this.mean);",rem:"this.dev -= d * (v - this.mean);",set:"this.valid > 1 ? this.dev / (this.valid-1) : undefined",req:["mean"],idx:1}),variancep:ln({name:"variancep",set:"this.valid > 1 ? this.dev / this.valid : undefined",req:["variance"],idx:2}),stdev:ln({name:"stdev",set:"this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined",req:["variance"],idx:2}),stdevp:ln({name:"stdevp",set:"this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined",req:["variance"],idx:2}),stderr:ln({name:"stderr",set:"this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined",req:["variance"],idx:2}),distinct:ln({name:"distinct",set:"cell.data.distinct(this.get)",req:["values"],idx:3}),ci0:ln({name:"ci0",set:"cell.data.ci0(this.get)",req:["values"],idx:3}),ci1:ln({name:"ci1",set:"cell.data.ci1(this.get)",req:["values"],idx:3}),median:ln({name:"median",set:"cell.data.q2(this.get)",req:["values"],idx:3}),q1:ln({name:"q1",set:"cell.data.q1(this.get)",req:["values"],idx:3}),q3:ln({name:"q3",set:"cell.data.q3(this.get)",req:["values"],idx:3}),argmin:ln({name:"argmin",init:"this.argmin = undefined;",add:"if (v < this.min) this.argmin = t;",rem:"if (v <= this.min) this.argmin = undefined;",set:"this.argmin || cell.data.argmin(this.get)",req:["min"],str:["values"],idx:3}),argmax:ln({name:"argmax",init:"this.argmax = undefined;",add:"if (v > this.max) this.argmax = t;",rem:"if (v >= this.max) this.argmax = undefined;",set:"this.argmax || cell.data.argmax(this.get)",req:["max"],str:["values"],idx:3}),min:ln({name:"min",init:"this.min = undefined;",add:"if (v < this.min || this.min === undefined) this.min = v;",rem:"if (v <= this.min) this.min = NaN;",set:"this.min = (isNaN(this.min) ? cell.data.min(this.get) : this.min)",str:["values"],idx:4}),max:ln({name:"max",init:"this.max = undefined;",add:"if (v > this.max || this.max === undefined) this.max = v;",rem:"if (v >= this.max) this.max = NaN;",set:"this.max = (isNaN(this.max) ? cell.data.max(this.get) : this.max)",str:["values"],idx:4})},sn=Object.keys(un);function cn(e,t){return un[e](t)}function ln(e){return function(t){var n=Object(H["p"])({init:"",add:"",rem:"",idx:0},e);return n.out=t||e.name,n}}function fn(e,t){return e.idx-t.idx}function dn(e,t){function n(e,r){function i(t){e[t]||n(e,e[t]=un[t]())}return r.req&&r.req.forEach(i),t&&r.str&&r.str.forEach(i),e}var r,i=e.reduce(n,e.reduce((function(e,t){return e[t.name]=t,e}),{})),o=[];for(r in i)o.push(i[r]);return o.sort(fn)}function hn(e,t){var n=t||H["y"],r=dn(e,!0),i="var cell = this.cell; this.valid = 0; this.missing = 0;",o="this.cell = cell; this.init();",a="if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;",u="if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;",s="var cell = this.cell;";return r.forEach((function(e){i+=e.init,a+=e.add,u+=e.rem})),e.slice().sort(fn).forEach((function(e){s+="t['"+e.out+"']="+e.set+";"})),s+="return t;",o=Function("cell",o),o.prototype.init=Function(i),o.prototype.add=Function("v","t",a),o.prototype.rem=Function("v","t",u),o.prototype.set=Function("t",s),o.prototype.get=n,o.fields=e.map((function(e){return e.out})),o}var pn=function*(e,t){if(null==t)for(let n of e)null!=n&&""!==n&&(n=+n)>=n&&(yield n);else{let n=-1;for(let r of e)r=t(r,++n,e),null!=r&&""!==r&&(r=+r)>=r&&(yield r)}},gn=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN};function mn(e,t){let n;if(void 0===t)for(const r of e)null!=r&&(n<r||void 0===n&&r>=r)&&(n=r);else{let r=-1;for(let i of e)null!=(i=t(i,++r,e))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function vn(e,t){let n;if(void 0===t)for(const r of e)null!=r&&(n>r||void 0===n&&r>=r)&&(n=r);else{let r=-1;for(let i of e)null!=(i=t(i,++r,e))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function bn(e,t,n=0,r=e.length-1,i=gn){while(r>n){if(r-n>600){const o=r-n+1,a=t-n+1,u=Math.log(o),s=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*s*(o-s)/o)*(a-o/2<0?-1:1),l=Math.max(n,Math.floor(t-a*s/o+c)),f=Math.min(r,Math.floor(t+(o-a)*s/o+c));bn(e,t,l,f,i)}const o=e[t];let a=n,u=r;yn(e,n,t),i(e[r],o)>0&&yn(e,n,r);while(a<u){yn(e,a,u),++a,--u;while(i(e[a],o)<0)++a;while(i(e[u],o)>0)--u}0===i(e[n],o)?yn(e,n,u):(++u,yn(e,u,r)),u<=t&&(n=u+1),t<=u&&(r=u-1)}return e}function yn(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}var xn=function(e){return null===e?NaN:+e};function*wn(e,t){if(void 0===t)for(let n of e)null!=n&&(n=+n)>=n&&(yield n);else{let n=-1;for(let r of e)null!=(r=t(r,++n,e))&&(r=+r)>=r&&(yield r)}}function On(e,t,n){if(e=Float64Array.from(wn(e,n)),r=e.length){if((t=+t)<=0||r<2)return vn(e);if(t>=1)return mn(e);var r,i=(r-1)*t,o=Math.floor(i),a=mn(bn(e,o).subarray(0,o+1)),u=vn(e.subarray(o+1));return a+(u-a)*(i-o)}}function En(e,t,n=xn){if(r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,i=(r-1)*t,o=Math.floor(i),a=+n(e[o],o,e),u=+n(e[o+1],o+1,e);return a+(u-a)*(i-o)}}var kn=function(e,t,n){const r=Float64Array.from(pn(e,n));return r.sort(gn),t.map(e=>En(r,e))},_n=function(e,t){return kn(e,[.25,.5,.75],t)};function An(e,t){let n,r=0,i=0,o=0;if(void 0===t)for(let a of e)null!=a&&(a=+a)>=a&&(n=a-i,i+=n/++r,o+=n*(a-i));else{let a=-1;for(let u of e)null!=(u=t(u,++a,e))&&(u=+u)>=u&&(n=u-i,i+=n/++r,o+=n*(u-i))}if(r>1)return o/(r-1)}function Sn(e,t){const n=An(e,t);return n?Math.sqrt(n):n}var jn=function(e,t){const n=e.length,r=Sn(e,t),i=_n(e,t),o=(i[2]-i[0])/1.34,a=Math.min(r,o)||r||Math.abs(i[0])||1;return 1.06*a*Math.pow(n,-.2)},Cn=function(e){const t=e.maxbins||20,n=e.base||10,r=Math.log(n),i=e.divide||[5,2];let o,a,u,s,c,l,f=e.extent[0],d=e.extent[1];const h=e.span||d-f||Math.abs(f)||1;if(e.step)o=e.step;else if(e.steps){for(s=h/t,c=0,l=e.steps.length;c<l&&e.steps[c]<s;++c);o=e.steps[Math.max(0,c-1)]}else{a=Math.ceil(Math.log(t)/r),u=e.minstep||0,o=Math.max(u,Math.pow(n,Math.round(Math.log(h)/r)-a));while(Math.ceil(h/o)>t)o*=n;for(c=0,l=i.length;c<l;++c)s=o/i[c],s>=u&&h/s<=t&&(o=s)}s=Math.log(o);const p=s>=0?0:1+~~(-s/r),g=Math.pow(n,-p-1);return(e.nice||void 0===e.nice)&&(s=Math.floor(f/o+g)*o,f=f<s?s-o:s,d=Math.ceil(d/o)*o),{start:f,stop:d===f?f+o:d,step:o}},Dn=Math.random;function Fn(e){Dn=e}var Mn=function(e,t,n,r){if(!e.length)return[void 0,void 0];const i=Float64Array.from(pn(e,r)),o=i.length,a=t;let u,s,c,l;for(c=0,l=Array(a);c<a;++c){for(u=0,s=0;s<o;++s)u+=i[~~(Dn()*o)];l[c]=u/o}return l.sort(gn),[On(l,n/2),On(l,1-n/2)]},zn=function(e,t,n,r){r=r||(e=>e);const i=e.length,o=new Float64Array(i);let a,u=0,s=1,c=r(e[0]),l=c,f=c+t;for(;s<i;++s){if(a=r(e[s]),a>=f){for(l=(c+l)/2;u<s;++u)o[u]=l;f=a+t,c=a}l=a}for(l=(c+l)/2;u<s;++u)o[u]=l;return n?Nn(o,t+t/4):o};function Nn(e,t){const n=e.length;let r,i,o=0,a=1;while(e[o]===e[a])++a;while(a<n){r=a+1;while(e[a]===e[r])++r;if(e[a]-e[a-1]<t){i=a+(o+r-a-a>>1);while(i<a)e[i++]=e[a];while(i>a)e[i--]=e[o]}o=a,a=r}return e}var Tn=function(e){return function(){return e=(1103515245*e+12345)%2147483647,e/2147483647}},Rn=function(e,t){let n,r,i;null==t&&(t=e,e=0);const o={min(e){return arguments.length?(n=e||0,i=r-n,o):n},max(e){return arguments.length?(r=e||0,i=r-n,o):r},sample(){return n+Math.floor(i*Dn())},pdf(e){return e===Math.floor(e)&&e>=n&&e<r?1/i:0},cdf(e){const t=Math.floor(e);return t<n?0:t>=r?1:(t-n+1)/i},icdf(e){return e>=0&&e<=1?n-1+Math.floor(e*i):NaN}};return o.min(e).max(t)};const Bn=Math.sqrt(2*Math.PI),Pn=Math.SQRT2;let In=NaN;function Ln(e,t){e=e||0,t=null==t?1:t;let n,r,i=0,o=0;if(In===In)i=In,In=NaN;else{do{i=2*Dn()-1,o=2*Dn()-1,n=i*i+o*o}while(0===n||n>1);r=Math.sqrt(-2*Math.log(n)/n),i*=r,In=o*r}return e+i*t}function $n(e,t,n){n=null==n?1:n;const r=(e-(t||0))/n;return Math.exp(-.5*r*r)/(n*Bn)}function Un(e,t,n){t=t||0,n=null==n?1:n;const r=(e-t)/n,i=Math.abs(r);let o;if(i>37)o=0;else{const e=Math.exp(-i*i/2);let t;i<7.07106781186547?(t=.0352624965998911*i+.700383064443688,t=t*i+6.37396220353165,t=t*i+33.912866078383,t=t*i+112.079291497871,t=t*i+221.213596169931,t=t*i+220.206867912376,o=e*t,t=.0883883476483184*i+1.75566716318264,t=t*i+16.064177579207,t=t*i+86.7807322029461,t=t*i+296.564248779674,t=t*i+637.333633378831,t=t*i+793.826512519948,t=t*i+440.413735824752,o/=t):(t=i+.65,t=i+4/t,t=i+3/t,t=i+2/t,t=i+1/t,o=e/t/2.506628274631)}return r>0?1-o:o}function qn(e,t,n){return e<0||e>1?NaN:(t||0)+(null==n?1:n)*Pn*Wn(2*e-1)}function Wn(e){let t,n=-Math.log((1-e)*(1+e));return n<6.25?(n-=3.125,t=-364441206401782e-35,t=t*n-16850591381820166e-35,t=128584807152564e-32+t*n,t=11157877678025181e-33+t*n,t=t*n-1333171662854621e-31,t=20972767875968562e-33+t*n,t=6637638134358324e-30+t*n,t=t*n-4054566272975207e-29,t=t*n-8151934197605472e-29,t=26335093153082323e-28+t*n,t=t*n-12975133253453532e-27,t=t*n-5415412054294628e-26,t=1.0512122733215323e-9+t*n,t=t*n-4.112633980346984e-9,t=t*n-2.9070369957882005e-8,t=4.2347877827932404e-7+t*n,t=t*n-13654692000834679e-22,t=t*n-13882523362786469e-21,t=.00018673420803405714+t*n,t=t*n-.000740702534166267,t=t*n-.006033670871430149,t=.24015818242558962+t*n,t=1.6536545626831027+t*n):n<16?(n=Math.sqrt(n)-3.25,t=2.2137376921775787e-9,t=9.075656193888539e-8+t*n,t=t*n-2.7517406297064545e-7,t=1.8239629214389228e-8+t*n,t=15027403968909828e-22+t*n,t=t*n-4013867526981546e-21,t=29234449089955446e-22+t*n,t=12475304481671779e-21+t*n,t=t*n-47318229009055734e-21,t=6828485145957318e-20+t*n,t=24031110387097894e-21+t*n,t=t*n-.0003550375203628475,t=.0009532893797373805+t*n,t=t*n-.0016882755560235047,t=.002491442096107851+t*n,t=t*n-.003751208507569241,t=.005370914553590064+t*n,t=1.0052589676941592+t*n,t=3.0838856104922208+t*n):Number.isFinite(n)?(n=Math.sqrt(n)-5,t=-27109920616438573e-27,t=t*n-2.555641816996525e-10,t=1.5076572693500548e-9+t*n,t=t*n-3.789465440126737e-9,t=7.61570120807834e-9+t*n,t=t*n-1.496002662714924e-8,t=2.914795345090108e-8+t*n,t=t*n-6.771199775845234e-8,t=2.2900482228026655e-7+t*n,t=t*n-9.9298272942317e-7,t=4526062597223154e-21+t*n,t=t*n-1968177810553167e-20,t=7599527703001776e-20+t*n,t=t*n-.00021503011930044477,t=t*n-.00013871931833623122,t=1.0103004648645344+t*n,t=4.849906401408584+t*n):t=1/0,t*e}var Hn=function(e,t){let n,r;const i={mean(e){return arguments.length?(n=e||0,i):n},stdev(e){return arguments.length?(r=null==e?1:e,i):r},sample:()=>Ln(n,r),pdf:e=>$n(e,n,r),cdf:e=>Un(e,n,r),icdf:e=>qn(e,n,r)};return i.mean(e).stdev(t)},Gn=function(e,t){const n=Hn();let r=0;const i={data(n){return arguments.length?(e=n,r=n?n.length:0,i.bandwidth(t)):e},bandwidth(n){return arguments.length?(t=n,!t&&e&&(t=jn(e)),i):t},sample(){return e[~~(Dn()*r)]+t*n.sample()},pdf(i){let o=0,a=0;for(;a<r;++a)o+=n.pdf((i-e[a])/t);return o/t/r},cdf(i){let o=0,a=0;for(;a<r;++a)o+=n.cdf((i-e[a])/t);return o/r},icdf(){throw Error("KDE icdf not supported.")}};return i.data(e)};function Yn(e,t){return e=e||0,t=null==t?1:t,Math.exp(e+Ln()*t)}function Vn(e,t,n){if(e<=0)return 0;t=t||0,n=null==n?1:n;const r=(Math.log(e)-t)/n;return Math.exp(-.5*r*r)/(n*Bn*e)}function Xn(e,t,n){return Un(Math.log(e),t,n)}function Jn(e,t,n){return Math.exp(qn(e,t,n))}var Qn=function(e,t){let n,r;const i={mean(e){return arguments.length?(n=e||0,i):n},stdev(e){return arguments.length?(r=null==e?1:e,i):r},sample:()=>Yn(n,r),pdf:e=>Vn(e,n,r),cdf:e=>Xn(e,n,r),icdf:e=>Jn(e,n,r)};return i.mean(e).stdev(t)},Kn=function(e,t){let n,r=0;function i(e){const t=[];let n,i=0;for(n=0;n<r;++n)i+=t[n]=null==e[n]?1:+e[n];for(n=0;n<r;++n)t[n]/=i;return t}const o={weights(e){return arguments.length?(n=i(t=e||[]),o):t},distributions(n){return arguments.length?(n?(r=n.length,e=n):(r=0,e=[]),o.weights(t)):e},sample(){const t=Dn();let i=e[r-1],o=n[0],a=0;for(;a<r-1;o+=n[++a])if(t<o){i=e[a];break}return i.sample()},pdf(t){let i=0,o=0;for(;o<r;++o)i+=n[o]*e[o].pdf(t);return i},cdf(t){let i=0,o=0;for(;o<r;++o)i+=n[o]*e[o].cdf(t);return i},icdf(){throw Error("Mixture icdf not supported.")}};return o.distributions(e).weights(t)};function Zn(e,t){return null==t&&(t=null==e?1:e,e=0),e+(t-e)*Dn()}function er(e,t,n){return null==n&&(n=null==t?1:t,t=0),e>=t&&e<=n?1/(n-t):0}function tr(e,t,n){return null==n&&(n=null==t?1:t,t=0),e<t?0:e>n?1:(e-t)/(n-t)}function nr(e,t,n){return null==n&&(n=null==t?1:t,t=0),e>=0&&e<=1?t+e*(n-t):NaN}var rr=function(e,t){let n,r;const i={min(e){return arguments.length?(n=e||0,i):n},max(e){return arguments.length?(r=null==e?1:e,i):r},sample:()=>Zn(n,r),pdf:e=>er(e,n,r),cdf:e=>tr(e,n,r),icdf:e=>nr(e,n,r)};return null==t&&(t=null==e?1:e,e=0),i.min(e).max(t)},ir=function(e,t,n,r){const i=r-e*e,o=Math.abs(i)<1e-24?0:(n-e*t)/i,a=t-o*e;return[a,o]};function or(e,t,n,r){e=e.filter(e=>{let r=t(e),i=n(e);return null!=r&&(r=+r)>=r&&null!=i&&(i=+i)>=i}),r&&e.sort((e,n)=>t(e)-t(n));const i=e.length,o=new Float64Array(i),a=new Float64Array(i);let u,s,c,l=0,f=0,d=0;for(c of e)o[l]=u=+t(c),a[l]=s=+n(c),++l,f+=(u-f)/l,d+=(s-d)/l;for(l=0;l<i;++l)o[l]-=f,a[l]-=d;return[o,a,f,d]}function ar(e,t,n,r){let i,o,a=-1;for(const u of e)i=t(u),o=n(u),null!=i&&(i=+i)>=i&&null!=o&&(o=+o)>=o&&r(i,o,++a)}var ur=function(e,t,n,r,i){let o=0,a=0;return ar(e,t,n,(e,t)=>{const n=t-i(e),u=t-r;o+=n*n,a+=u*u}),1-o/a},sr=function(e,t,n){let r=0,i=0,o=0,a=0,u=0;ar(e,t,n,(e,t)=>{++u,r+=(e-r)/u,i+=(t-i)/u,o+=(e*t-o)/u,a+=(e*e-a)/u});const s=ir(r,i,o,a),c=e=>s[0]+s[1]*e;return{coef:s,predict:c,rSquared:ur(e,t,n,i,c)}},cr=function(e,t,n){let r=0,i=0,o=0,a=0,u=0;ar(e,t,n,(e,t)=>{++u,e=Math.log(e),r+=(e-r)/u,i+=(t-i)/u,o+=(e*t-o)/u,a+=(e*e-a)/u});const s=ir(r,i,o,a),c=e=>s[0]+s[1]*Math.log(e);return{coef:s,predict:c,rSquared:ur(e,t,n,i,c)}},lr=function(e,t,n){const[r,i,o,a]=or(e,t,n);let u,s,c,l=0,f=0,d=0,h=0,p=0;ar(e,t,n,(e,t)=>{u=r[p++],s=Math.log(t),c=u*t,l+=(t*s-l)/p,f+=(c-f)/p,d+=(c*s-d)/p,h+=(u*c-h)/p});const[g,m]=ir(f/a,l/a,d/a,h/a),v=e=>Math.exp(g+m*(e-o));return{coef:[Math.exp(g-m*o),m],predict:v,rSquared:ur(e,t,n,a,v)}},fr=function(e,t,n){let r=0,i=0,o=0,a=0,u=0,s=0;ar(e,t,n,(e,t)=>{const n=Math.log(e),c=Math.log(t);++s,r+=(n-r)/s,i+=(c-i)/s,o+=(n*c-o)/s,a+=(n*n-a)/s,u+=(t-u)/s});const c=ir(r,i,o,a),l=e=>c[0]*Math.pow(e,c[1]);return c[0]=Math.exp(c[0]),{coef:c,predict:l,rSquared:ur(e,t,n,u,l)}},dr=function(e,t,n){const[r,i,o,a]=or(e,t,n),u=r.length;let s,c,l,f,d=0,h=0,p=0,g=0,m=0;for(s=0;s<u;)c=r[s],l=i[s++],f=c*c,d+=(f-d)/s,h+=(f*c-h)/s,p+=(f*f-p)/s,g+=(c*l-g)/s,m+=(f*l-m)/s;const v=p-d*d,b=d*v-h*h,y=(m*d-g*h)/b,x=(g*v-m*h)/b,w=-y*d,O=e=>(e-=o,y*e*e+x*e+w+a);return{coef:[w-x*o+y*o*o+a,x-2*y*o,y],predict:O,rSquared:ur(e,t,n,a,O)}},hr=function(e,t,n,r){if(1===r)return sr(e,t,n);if(2===r)return dr(e,t,n);const[i,o,a,u]=or(e,t,n),s=i.length,c=[],l=[],f=r+1;let d,h,p,g,m;for(d=0;d<f;++d){for(p=0,g=0;p<s;++p)g+=Math.pow(i[p],d)*o[p];for(c.push(g),m=new Float64Array(f),h=0;h<f;++h){for(p=0,g=0;p<s;++p)g+=Math.pow(i[p],d+h);m[h]=g}l.push(m)}l.push(c);const v=gr(l),b=e=>{e-=a;let t=u+v[0]+v[1]*e+v[2]*e*e;for(d=3;d<f;++d)t+=v[d]*Math.pow(e,d);return t};return{coef:pr(f,v,-a,u),predict:b,rSquared:ur(e,t,n,u,b)}};function pr(e,t,n,r){const i=Array(e);let o,a,u,s;for(o=0;o<e;++o)i[o]=0;for(o=e-1;o>=0;--o)for(u=t[o],s=1,i[o]+=u,a=1;a<=o;++a)s*=(o+1-a)/a,i[o-a]+=u*Math.pow(n,a)*s;return i[0]+=r,i}function gr(e){const t=e.length-1,n=[];let r,i,o,a,u;for(r=0;r<t;++r){for(a=r,i=r+1;i<t;++i)Math.abs(e[r][i])>Math.abs(e[r][a])&&(a=i);for(o=r;o<t+1;++o)u=e[o][r],e[o][r]=e[o][a],e[o][a]=u;for(i=r+1;i<t;++i)for(o=t;o>=r;o--)e[o][i]-=e[o][r]*e[r][i]/e[r][r]}for(i=t-1;i>=0;--i){for(u=0,o=i+1;o<t;++o)u+=e[o][i]*n[o];n[i]=(e[t][i]-u)/e[i][i]}return n}var mr=function(e,t){return On(e,.5,t)};const vr=2,br=1e-12;var yr=function(e,t,n,r){const[i,o,a,u]=or(e,t,n,!0),s=i.length,c=Math.max(2,~~(r*s)),l=new Float64Array(s),f=new Float64Array(s),d=new Float64Array(s).fill(1);for(let h=-1;++h<=vr;){const e=[0,c-1];for(let n=0;n<s;++n){const t=i[n],r=e[0],a=e[1],u=t-i[r]>i[a]-t?r:a;let s=0,c=0,h=0,p=0,g=0;const m=1/Math.abs(i[u]-t||1);for(let e=r;e<=a;++e){const n=i[e],r=o[e],a=xr(Math.abs(t-n)*m)*d[e],u=n*a;s+=a,c+=u,h+=r*a,p+=r*u,g+=n*u}const[v,b]=ir(c/s,h/s,p/s,g/s);l[n]=v+b*t,f[n]=Math.abs(o[n]-l[n]),wr(i,n+1,e)}if(h===vr)break;const t=mr(f);if(Math.abs(t)<br)break;for(let n,r,i=0;i<s;++i)n=f[i]/(6*t),d[i]=n>=1?br:(r=1-n*n)*r}return Or(i,l,a,u)};function xr(e){return(e=1-e*e*e)*e*e}function wr(e,t,n){const r=e[t];let i=n[0],o=n[1]+1;if(!(o>=e.length))while(t>i&&e[o]-r<=r-e[i])n[0]=++i,n[1]=o,++o}function Or(e,t,n,r){const i=e.length,o=[];let a,u=0,s=0,c=[];for(;u<i;++u)a=e[u]+n,c[0]===a?c[1]+=(t[u]-c[1])/++s:(s=0,c[1]+=r,c=[a,t[u]],o.push(c));return c[1]+=r,o}const Er=.1*Math.PI/180;var kr=function(e,t,n,r){n=n||25,r=Math.max(n,r||200);const i=t=>[t,e(t)],o=t[0],a=t[1],u=a-o,s=u/r,c=[i(o)],l=[];if(n===r){for(let e=1;e<r;++e)c.push(i(o+e/n*u));return c.push(i(a)),c}l.push(i(a));for(let h=n;--h>0;)l.push(i(o+h/n*u));let f=c[0],d=l[l.length-1];while(d){const e=i((f[0]+d[0])/2);e[0]-f[0]>=s&&_r(f,e,d)>Er?l.push(e):(f=d,c.push(d),l.pop()),d=l[l.length-1]}return c};function _r(e,t,n){const r=Math.atan2(n[1]-e[1],n[0]-e[0]),i=Math.atan2(t[1]-e[1],t[0]-e[0]);return Math.abs(r-i)}function Ar(e){this._key=e?Object(H["u"])(e):J,this.reset()}var Sr=Ar.prototype;function jr(e){Kt.call(this,null,e),this._adds=[],this._mods=[],this._alen=0,this._mlen=0,this._drop=!0,this._cross=!1,this._dims=[],this._dnames=[],this._measures=[],this._countOnly=!1,this._counts=null,this._prev=null,this._inputs=null,this._outputs=null}Sr.reset=function(){this._add=[],this._rem=[],this._ext=null,this._get=null,this._q=null},Sr.add=function(e){this._add.push(e)},Sr.rem=function(e){this._rem.push(e)},Sr.values=function(){if(this._get=null,0===this._rem.length)return this._add;var e,t,n,r=this._add,i=this._rem,o=this._key,a=r.length,u=i.length,s=Array(a-u),c={};for(e=0;e<u;++e)c[o(i[e])]=1;for(e=0,t=0;e<a;++e)c[o(n=r[e])]?c[o(n)]=0:s[t++]=n;return this._rem=[],this._add=s},Sr.distinct=function(e){var t,n=this.values(),r=n.length,i={},o=0;while(--r>=0)t=e(n[r])+"",i.hasOwnProperty(t)||(i[t]=1,++o);return o},Sr.extent=function(e){if(this._get!==e||!this._ext){var t=this.values(),n=Object(H["r"])(t,e);this._ext=[t[n[0]],t[n[1]]],this._get=e}return this._ext},Sr.argmin=function(e){return this.extent(e)[0]||{}},Sr.argmax=function(e){return this.extent(e)[1]||{}},Sr.min=function(e){var t=this.extent(e)[0];return null!=t?e(t):void 0},Sr.max=function(e){var t=this.extent(e)[1];return null!=t?e(t):void 0},Sr.quartile=function(e){return this._get===e&&this._q||(this._q=_n(this.values(),e),this._get=e),this._q},Sr.q1=function(e){return this.quartile(e)[0]},Sr.q2=function(e){return this.quartile(e)[1]},Sr.q3=function(e){return this.quartile(e)[2]},Sr.ci=function(e){return this._get===e&&this._ci||(this._ci=Mn(this.values(),1e3,.05,e),this._get=e),this._ci},Sr.ci0=function(e){return this.ci(e)[0]},Sr.ci1=function(e){return this.ci(e)[1]},jr.Definition={type:"Aggregate",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:sn},{name:"fields",type:"field",null:!0,array:!0},{name:"as",type:"string",null:!0,array:!0},{name:"drop",type:"boolean",default:!0},{name:"cross",type:"boolean",default:!1},{name:"key",type:"field"}]};var Cr=Object(H["z"])(jr,Kt);function Dr(e){Kt.call(this,null,e)}Cr.transform=function(e,t){var n,r=this,i=t.fork(t.NO_SOURCE|t.NO_FIELDS);return this.stamp=i.stamp,this.value&&((n=e.modified())||t.modified(this._inputs))?(this._prev=this.value,this.value=n?this.init(e):{},t.visit(t.SOURCE,(function(e){r.add(e)}))):(this.value=this.value||this.init(e),t.visit(t.REM,(function(e){r.rem(e)})),t.visit(t.ADD,(function(e){r.add(e)}))),i.modifies(this._outputs),r._drop=!1!==e.drop,e.cross&&r._dims.length>1&&(r._drop=!1,this.cross()),r.changes(i)},Cr.cross=function(){var e=this,t=e.value,n=e._dnames,r=n.map((function(){return{}})),i=n.length;function o(e){var t,o,a,u;for(t in e)for(a=e[t].tuple,o=0;o<i;++o)r[o][u=a[n[o]]]=u}function a(o,u,s){var c,l,f=n[s],d=r[s++];for(c in d)u[f]=d[c],l=o?o+"|"+c:c,s<i?a(l,u,s):t[l]||e.cell(l,u)}o(e._prev),o(t),a("",{},0)},Cr.init=function(e){var t=this._inputs=[],n=this._outputs=[],r={};function i(e){for(var n,i=Object(H["i"])(Object(H["g"])(e)),o=0,a=i.length;o<a;++o)r[n=i[o]]||(r[n]=1,t.push(n))}this._dims=Object(H["i"])(e.groupby),this._dnames=this._dims.map((function(e){var t=Object(H["h"])(e);return i(e),n.push(t),t})),this.cellkey=e.key?e.key:on(this._dims),this._countOnly=!0,this._counts=[],this._measures=[];var o,a,u,s,c,l,f=e.fields||[null],d=e.ops||["count"],h=e.as||[],p=f.length,g={};for(p!==d.length&&Object(H["o"])("Unmatched number of fields and aggregate ops."),l=0;l<p;++l)o=f[l],a=d[l],null==o&&"count"!==a&&Object(H["o"])("Null aggregate field specified."),s=Object(H["h"])(o),c=an(a,s,h[l]),n.push(c),"count"!==a?(u=g[s],u||(i(o),u=g[s]=[],u.field=o,this._measures.push(u)),"count"!==a&&(this._countOnly=!1),u.push(cn(a,c))):this._counts.push(c);return this._measures=this._measures.map((function(e){return hn(e,e.field)})),{}},Cr.cellkey=on(),Cr.cell=function(e,t){var n=this.value[e];return n?0===n.num&&this._drop&&n.stamp<this.stamp?(n.stamp=this.stamp,this._adds[this._alen++]=n):n.stamp<this.stamp&&(n.stamp=this.stamp,this._mods[this._mlen++]=n):(n=this.value[e]=this.newcell(e,t),this._adds[this._alen++]=n),n},Cr.newcell=function(e,t){var n={key:e,num:0,agg:null,tuple:this.newtuple(t,this._prev&&this._prev[e]),stamp:this.stamp,store:!1};if(!this._countOnly){var r,i=this._measures,o=i.length;for(n.agg=Array(o),r=0;r<o;++r)n.agg[r]=new i[r](n)}return n.store&&(n.data=new Ar),n},Cr.newtuple=function(e,t){var n,r,i=this._dnames,o=this._dims,a={};for(n=0,r=o.length;n<r;++n)a[i[n]]=o[n](e);return t?te(t.tuple,a):K(a)},Cr.add=function(e){var t,n,r,i=this.cellkey(e),o=this.cell(i,e);if(o.num+=1,!this._countOnly)for(o.store&&o.data.add(e),t=o.agg,n=0,r=t.length;n<r;++n)t[n].add(t[n].get(e),e)},Cr.rem=function(e){var t,n,r,i=this.cellkey(e),o=this.cell(i,e);if(o.num-=1,!this._countOnly)for(o.store&&o.data.rem(e),t=o.agg,n=0,r=t.length;n<r;++n)t[n].rem(t[n].get(e),e)},Cr.celltuple=function(e){var t,n,r,i=e.tuple,o=this._counts;for(e.store&&e.data.values(),n=0,r=o.length;n<r;++n)i[o[n]]=e.num;if(!this._countOnly)for(t=e.agg,n=0,r=t.length;n<r;++n)t[n].set(i);return i},Cr.changes=function(e){var t,n,r,i,o=this._adds,a=this._mods,u=this._prev,s=this._drop,c=e.add,l=e.rem,f=e.mod;if(u)for(n in u)t=u[n],s&&!t.num||l.push(t.tuple);for(r=0,i=this._alen;r<i;++r)c.push(this.celltuple(o[r])),o[r]=null;for(r=0,i=this._mlen;r<i;++r)t=a[r],(0===t.num&&s?l:f).push(this.celltuple(t)),a[r]=null;return this._alen=this._mlen=0,this._prev=null,e},Dr.Definition={type:"Bin",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"anchor",type:"number"},{name:"maxbins",type:"number",default:20},{name:"base",type:"number",default:10},{name:"divide",type:"number",array:!0,default:[5,2]},{name:"extent",type:"number",array:!0,length:2,required:!0},{name:"step",type:"number"},{name:"steps",type:"number",array:!0},{name:"minstep",type:"number",default:0},{name:"nice",type:"boolean",default:!0},{name:"name",type:"string"},{name:"as",type:"string",array:!0,length:2,default:["bin0","bin1"]}]};var Fr=Object(H["z"])(Dr,Kt);Fr.transform=function(e,t){var n,r=this._bins(e),i=r.start,o=r.step,a=e.as||["bin0","bin1"],u=a[0],s=a[1];return e.modified()?(t=t.reflow(!0),n=t.SOURCE):n=t.modified(Object(H["g"])(e.field))?t.ADD_MOD:t.ADD,t.visit(n,(function(e){var t=r(e);e[u]=t,e[s]=null==t?null:i+o*(1+(t-i)/o)})),t.modifies(a)},Fr._bins=function(e){if(this.value&&!e.modified())return this.value;var t,n,r=e.field,i=Cn(e),o=i.start,a=i.stop,u=i.step;null!=(t=e.anchor)&&(n=t-(o+u*Math.floor((t-o)/u)),o+=n,a+=n);var s=function(e){var t=r(e);return null==t?null:(t=Math.max(o,Math.min(+t,a-u)),o+u*Math.floor((t-o)/u))};return s.start=o,s.stop=a,s.step=u,this.value=Object(H["f"])(s,Object(H["g"])(r),e.name||"bin_"+Object(H["h"])(r))};var Mr=function(e,t,n){var r=e,i=t||[],o=n||[],a={},u=0;return{add:function(e){o.push(e)},remove:function(e){a[r(e)]=++u},size:function(){return i.length},data:function(e,t){return u&&(i=i.filter((function(e){return!a[r(e)]})),a={},u=0),t&&e&&i.sort(e),o.length&&(i=e?Object(H["N"])(e,i,o.sort(e)):i.concat(o),o=[]),i}}};function zr(e){Kt.call(this,[],e)}zr.Definition={type:"Collect",metadata:{source:!0},params:[{name:"sort",type:"compare"}]};var Nr=Object(H["z"])(zr,Kt);function Tr(e){de.call(this,null,Rr,e)}function Rr(e){return this.value&&!e.modified()?this.value:Object(H["l"])(e.fields,e.orders)}function Br(e){Kt.call(this,null,e)}function Pr(e,t,n){switch(t){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break}return e.match(n)}Nr.transform=function(e,t){var n=t.fork(t.ALL),r=Mr(J,this.value,n.materialize(n.ADD).add),i=e.sort,o=t.changed()||i&&(e.modified("sort")||t.modified(i.fields));return n.visit(n.REM,r.remove),this.modified(o),this.value=n.source=r.data(i,o),t.source&&t.source.root&&(this.value.root=t.source.root),n},Object(H["z"])(Tr,de),Br.Definition={type:"CountPattern",metadata:{generates:!0,changes:!0},params:[{name:"field",type:"field",required:!0},{name:"case",type:"enum",values:["upper","lower","mixed"],default:"mixed"},{name:"pattern",type:"string",default:'[\\w"]+'},{name:"stopwords",type:"string",default:""},{name:"as",type:"string",array:!0,length:2,default:["text","count"]}]};var Ir=Object(H["z"])(Br,Kt);function Lr(e){Kt.call(this,null,e)}Ir.transform=function(e,t){function n(t){return function(n){for(var r,i=Pr(u(n),e.case,o)||[],s=0,c=i.length;s<c;++s)a.test(r=i[s])||t(r)}}var r=this._parameterCheck(e,t),i=this._counts,o=this._match,a=this._stop,u=e.field,s=e.as||["text","count"],c=n((function(e){i[e]=1+(i[e]||0)})),l=n((function(e){i[e]-=1}));return r?t.visit(t.SOURCE,c):(t.visit(t.ADD,c),t.visit(t.REM,l)),this._finish(t,s)},Ir._parameterCheck=function(e,t){var n=!1;return!e.modified("stopwords")&&this._stop||(this._stop=new RegExp("^"+(e.stopwords||"")+"$","i"),n=!0),!e.modified("pattern")&&this._match||(this._match=new RegExp(e.pattern||"[\\w']+","g"),n=!0),(e.modified("field")||t.modified(e.field.fields))&&(n=!0),n&&(this._counts={}),n},Ir._finish=function(e,t){var n,r,i,o=this._counts,a=this._tuples||(this._tuples={}),u=t[0],s=t[1],c=e.fork(e.NO_SOURCE|e.NO_FIELDS);for(n in o)r=a[n],i=o[n]||0,!r&&i?(a[n]=r=K({}),r[u]=n,r[s]=i,c.add.push(r)):0===i?(r&&c.rem.push(r),o[n]=null,a[n]=null):r[s]!==i&&(r[s]=i,c.mod.push(r));return c.modifies(t)},Lr.Definition={type:"Cross",metadata:{generates:!0},params:[{name:"filter",type:"expr"},{name:"as",type:"string",array:!0,length:2,default:["a","b"]}]};var $r=Object(H["z"])(Lr,Kt);function Ur(e,t,n,r){for(var i,o,a=[],u={},s=e.length,c=0;c<s;++c)for(u[t]=o=e[c],i=0;i<s;++i)u[n]=e[i],r(u)&&(a.push(K(u)),u={},u[t]=o);return a}$r.transform=function(e,t){var n=t.fork(t.NO_SOURCE),r=this.value,i=e.as||["a","b"],o=i[0],a=i[1],u=!r||t.changed(t.ADD_REM)||e.modified("as")||e.modified("filter");return u?(r&&(n.rem=r),r=t.materialize(t.SOURCE).source,n.add=this.value=Ur(r,o,a,e.filter||H["hb"])):n.mod=r,n.source=this.value,n.modifies(i)};var qr={kde:Gn,mixture:Kn,normal:Hn,uniform:rr},Wr="distributions",Hr="function",Gr="field";function Yr(e,t){var n=e[Hr];qr.hasOwnProperty(n)||Object(H["o"])("Unknown distribution function: "+n);var r=qr[n]();for(var i in e)i===Gr?r.data((e.from||t()).map(e[i])):i===Wr?r[i](e[i].map((function(e){return Yr(e,t)}))):typeof r[i]===Hr&&r[i](e[i]);return r}var Vr=function(e,t){let n,r;if(void 0===t)for(const i of e)null!=i&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)));else{let i=-1;for(let o of e)null!=(o=t(o,++i,e))&&(void 0===n?o>=o&&(n=r=o):(n>o&&(n=o),r<o&&(r=o)))}return[n,r]},Xr=function(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;var r=-1,i=0|Math.max(0,Math.ceil((t-e)/n)),o=new Array(i);while(++r<i)o[r]=e+r*n;return o};function Jr(e){Kt.call(this,null,e)}var Qr=[{key:{function:"normal"},params:[{name:"mean",type:"number",default:0},{name:"stdev",type:"number",default:1}]},{key:{function:"uniform"},params:[{name:"min",type:"number",default:0},{name:"max",type:"number",default:1}]},{key:{function:"kde"},params:[{name:"field",type:"field",required:!0},{name:"from",type:"data"},{name:"bandwidth",type:"number",default:0}]}],Kr={key:{function:"mixture"},params:[{name:"distributions",type:"param",array:!0,params:Qr},{name:"weights",type:"number",array:!0}]};Jr.Definition={type:"Density",metadata:{generates:!0},params:[{name:"extent",type:"number",array:!0,length:2},{name:"steps",type:"number",default:100},{name:"method",type:"string",default:"pdf",values:["pdf","cdf"]},{name:"distribution",type:"param",params:Qr.concat(Kr)},{name:"as",type:"string",array:!0,default:["value","density"]}]};var Zr=Object(H["z"])(Jr,Kt);function ei(e){return function(){return e.materialize(e.SOURCE).source}}function ti(e){de.call(this,null,ni,e),this.modified(!0)}function ni(e){var t=e.expr;return this.value&&!e.modified("expr")?this.value:Object(H["f"])((function(n){return t(n,e)}),Object(H["g"])(t),Object(H["h"])(t))}function ri(e){Kt.call(this,[void 0,void 0],e)}Zr.transform=function(e,t){var n=t.fork(t.NO_SOURCE|t.NO_FIELDS);if(!this.value||t.changed()||e.modified()){var r=Yr(e.distribution,ei(t)),i=e.method||"pdf";"pdf"!==i&&"cdf"!==i&&Object(H["o"])("Invalid density method: "+i),e.extent||r.data||Object(H["o"])("Missing density extent parameter."),i=r[i];var o=e.as||["value","density"],a=e.extent||Vr(r.data()),u=(a[1]-a[0])/(e.steps||100),s=Xr(a[0],a[1]+u/2,u).map((function(e){var t={};return t[o[0]]=e,t[o[1]]=i(e),K(t)}));this.value&&(n.rem=this.value),this.value=n.add=n.source=s}return n},Object(H["z"])(ti,de),ri.Definition={type:"Extent",metadata:{},params:[{name:"field",type:"field",required:!0}]};var ii=Object(H["z"])(ri,Kt);function oi(e,t){de.call(this,e),this.parent=t}ii.transform=function(e,t){var n,r=this.value,i=e.field,o=r[0],a=r[1];n=t.changed()||t.modified(i.fields)||e.modified("field"),(n||null==o)&&(o=1/0,a=-1/0),t.visit(n?t.SOURCE:t.ADD,(function(e){var t=i(e);null!=t&&(t=+t,t<o&&(o=t),t>a&&(a=t))})),isFinite(o)&&isFinite(a)||(o=a=void 0),this.value=[o,a]};var ai=Object(H["z"])(oi,de);function ui(e){Kt.call(this,{},e),this._keys=Object(H["t"])();var t=this._targets=[];t.active=0,t.forEach=function(e){for(var n=0,r=t.active;n<r;++n)e(t[n],n,t)}}ai.connect=function(e){return this.targets().add(e),e.source=this},ai.add=function(e){this.value.add.push(e)},ai.rem=function(e){this.value.rem.push(e)},ai.mod=function(e){this.value.mod.push(e)},ai.init=function(e){this.value.init(e,e.NO_SOURCE)},ai.evaluate=function(){return this.value};var si=Object(H["z"])(ui,Kt);function ci(e){de.call(this,null,li,e)}function li(e){return this.value&&!e.modified()?this.value:Object(H["B"])(e.name)?Object(H["i"])(e.name).map((function(e){return Object(H["u"])(e)})):Object(H["u"])(e.name,e.as)}function fi(e){Kt.call(this,Object(H["t"])(),e)}si.activate=function(e){this._targets[this._targets.active++]=e},si.subflow=function(e,t,n,r){var i,o,a=this.value,u=a.hasOwnProperty(e)&&a[e];return u?u.value.stamp<n.stamp&&(u.init(n),this.activate(u)):(o=r||(o=this._group[e])&&o.tuple,i=n.dataflow,u=i.add(new oi(n.fork(n.NO_SOURCE),this)).connect(t(i,e,o)),a[e]=u,this.activate(u)),u},si.transform=function(e,t){var n=t.dataflow,r=this,i=e.key,o=e.subflow,a=this._keys,u=e.modified("key");function s(e){return r.subflow(e,o,t)}return this._group=e.group||{},this._targets.active=0,t.visit(t.REM,(function(e){var t=J(e),n=a.get(t);void 0!==n&&(a.delete(t),s(n).rem(e))})),t.visit(t.ADD,(function(e){var t=i(e);a.set(J(e),t),s(t).add(e)})),u||t.modified(i.fields)?t.visit(t.MOD,(function(e){var t=J(e),n=a.get(t),r=i(e);n===r?s(r).mod(e):(a.set(t,r),s(n).rem(e),s(r).add(e))})):t.changed(t.MOD)&&t.visit(t.MOD,(function(e){s(a.get(J(e))).mod(e)})),u&&t.visit(t.REFLOW,(function(e){var t=J(e),n=a.get(t),r=i(e);n!==r&&(a.set(t,r),s(n).rem(e),s(r).add(e))})),a.empty>n.cleanThreshold&&n.runAfter(a.clean),t},Object(H["z"])(ci,de),fi.Definition={type:"Filter",metadata:{changes:!0},params:[{name:"expr",type:"expr",required:!0}]};var di=Object(H["z"])(fi,Kt);function hi(e,t){return e?e.map((function(e,n){return t[n]||Object(H["h"])(e)})):null}function pi(e){Kt.call(this,[],e)}di.transform=function(e,t){var n=t.dataflow,r=this.value,i=t.fork(),o=i.add,a=i.rem,u=i.mod,s=e.expr,c=!0;function l(t){var n=J(t),i=s(t,e),l=r.get(n);i&&l?(r.delete(n),o.push(t)):i||l?c&&i&&!l&&u.push(t):(r.set(n,1),a.push(t))}return t.visit(t.REM,(function(e){var t=J(e);r.has(t)?r.delete(t):a.push(e)})),t.visit(t.ADD,(function(t){s(t,e)?o.push(t):r.set(J(t),1)})),t.visit(t.MOD,l),e.modified()&&(c=!1,t.visit(t.REFLOW,l)),r.empty>n.cleanThreshold&&n.runAfter(r.clean),i},pi.Definition={type:"Flatten",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0}]};var gi=Object(H["z"])(pi,Kt);function mi(e){Kt.call(this,[],e)}gi.transform=function(e,t){var n=t.fork(t.NO_SOURCE),r=e.fields,i=hi(r,e.as||[]),o=i.length;return n.rem=this.value,t.visit(t.SOURCE,(function(e){for(var t,a,u,s=r.map((function(t){return t(e)})),c=s.reduce((function(e,t){return Math.max(e,t.length)}),0),l=0;l<c;++l){for(a=Z(e),t=0;t<o;++t)a[i[t]]=null==(u=s[t][l])?null:u;n.add.push(a)}})),this.value=n.source=n.add,n.modifies(i)},mi.Definition={type:"Fold",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0,length:2,default:["key","value"]}]};var vi=Object(H["z"])(mi,Kt);function bi(e){Kt.call(this,null,e)}vi.transform=function(e,t){var n=t.fork(t.NO_SOURCE),r=e.fields,i=r.map(H["h"]),o=e.as||["key","value"],a=o[0],u=o[1],s=r.length;return n.rem=this.value,t.visit(t.SOURCE,(function(e){for(var t,o=0;o<s;++o)t=Z(e),t[a]=i[o],t[u]=r[o](e),n.add.push(t)})),this.value=n.source=n.add,n.modifies(o)},bi.Definition={type:"Formula",metadata:{modifies:!0},params:[{name:"expr",type:"expr",required:!0},{name:"as",type:"string",required:!0},{name:"initonly",type:"boolean"}]};var yi=Object(H["z"])(bi,Kt);function xi(e){Kt.call(this,[],e)}yi.transform=function(e,t){var n=e.expr,r=e.as,i=e.modified(),o=e.initonly?t.ADD:i?t.SOURCE:t.modified(n.fields)?t.ADD_MOD:t.ADD;function a(t){t[r]=n(t,e)}return i&&(t=t.materialize().reflow(!0)),e.initonly||t.modifies(r),t.visit(o,a)};var wi=Object(H["z"])(xi,Kt);function Oi(e,t){let n=0,r=0;if(void 0===t)for(let i of e)null!=i&&(i=+i)>=i&&(++n,r+=i);else{let i=-1;for(let o of e)null!=(o=t(o,++i,e))&&(o=+o)>=o&&(++n,r+=o)}if(n)return r/n}wi.transform=function(e,t){var n,r,i,o=this.value,a=t.fork(t.ALL),u=e.size-o.length,s=e.generator;if(u>0){for(n=[];--u>=0;)n.push(i=K(s(e))),o.push(i);a.add=a.add.length?a.materialize(a.ADD).add.concat(n):n}else r=o.slice(0,-u),a.rem=a.rem.length?a.materialize(a.REM).rem.concat(r):r,o=o.slice(-u);return a.source=this.value=o,a};var Ei={value:"value",median:mr,mean:Oi,min:vn,max:mn},ki=[];function _i(e){Kt.call(this,[],e)}_i.Definition={type:"Impute",metadata:{changes:!0},params:[{name:"field",type:"field",required:!0},{name:"key",type:"field",required:!0},{name:"keyvals",array:!0},{name:"groupby",type:"field",array:!0},{name:"method",type:"enum",default:"value",values:["value","mean","median","max","min"]},{name:"value",default:0}]};var Ai=Object(H["z"])(_i,Kt);function Si(e){var t,n=e.method||Ei.value;if(null!=Ei[n])return n===Ei.value?(t=void 0!==e.value?e.value:0,function(){return t}):Ei[n];Object(H["o"])("Unrecognized imputation method: "+n)}function ji(e){var t=e.field;return function(e){return e?t(e):NaN}}function Ci(e,t,n,r){var i,o,a,u,s,c,l,f,d=function(e){return e(f)},h=[],p=r?r.slice():[],g={},m={};for(p.forEach((function(e,t){g[e]=t+1})),u=0,l=e.length;u<l;++u)f=e[u],c=n(f),s=g[c]||(g[c]=p.push(c)),o=(i=t?t.map(d):ki)+"",(a=m[o])||(a=m[o]=[],h.push(a),a.values=i),a[s-1]=f;return h.domain=p,h}function Di(e){jr.call(this,e)}Ai.transform=function(e,t){var n,r,i,o,a,u,s,c,l,f,d=t.fork(t.ALL),h=Si(e),p=ji(e),g=Object(H["h"])(e.field),m=Object(H["h"])(e.key),v=(e.groupby||[]).map(H["h"]),b=Ci(t.source,e.groupby,e.key,e.keyvals),y=[],x=this.value,w=b.domain.length;for(a=0,c=b.length;a<c;++a)for(n=b[a],i=n.values,r=NaN,s=0;s<w;++s)if(null==n[s]){for(o=b.domain[s],f={_impute:!0},u=0,l=i.length;u<l;++u)f[v[u]]=i[u];f[m]=o,f[g]=isNaN(r)?r=h(n,p):r,y.push(K(f))}return y.length&&(d.add=d.materialize(d.ADD).add.concat(y)),x.length&&(d.rem=d.materialize(d.REM).rem.concat(x)),this.value=y,d},Di.Definition={type:"JoinAggregate",metadata:{modifies:!0},params:[{name:"groupby",type:"field",array:!0},{name:"fields",type:"field",null:!0,array:!0},{name:"ops",type:"enum",array:!0,values:sn},{name:"as",type:"string",null:!0,array:!0},{name:"key",type:"field"}]};var Fi=Object(H["z"])(Di,jr);function Mi(e){de.call(this,null,zi,e)}function zi(e){return this.value&&!e.modified()?this.value:Object(H["J"])(e.fields,e.flat)}function Ni(e){Kt.call(this,null,e)}Fi.transform=function(e,t){var n,r=this,i=e.modified();return r.value&&(i||t.modified(r._inputs))?(n=r.value=i?r.init(e):{},t.visit(t.SOURCE,(function(e){r.add(e)}))):(n=r.value=r.value||this.init(e),t.visit(t.REM,(function(e){r.rem(e)})),t.visit(t.ADD,(function(e){r.add(e)}))),r.changes(),t.visit(t.SOURCE,(function(e){Object(H["p"])(e,n[r.cellkey(e)].tuple)})),t.reflow(i).modifies(this._outputs)},Fi.changes=function(){var e,t,n=this._adds,r=this._mods;for(e=0,t=this._alen;e<t;++e)this.celltuple(n[e]),n[e]=null;for(e=0,t=this._mlen;e<t;++e)this.celltuple(r[e]),r[e]=null;this._alen=this._mlen=0},Object(H["z"])(Mi,de);var Ti=Object(H["z"])(Ni,Kt);function Ri(e){Kt.call(this,{},e)}Ti.transform=function(e,t){t.dataflow.request(this.target,e.url,e.format)},Ri.Definition={type:"Lookup",metadata:{modifies:!0},params:[{name:"index",type:"index",params:[{name:"from",type:"data",required:!0},{name:"key",type:"field",required:!0}]},{name:"values",type:"field",array:!0},{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0},{name:"default",default:null}]};var Bi=Object(H["z"])(Ri,Kt);function Pi(e){de.call(this,null,Ii,e)}function Ii(e){if(this.value&&!e.modified())return this.value;var t,n,r,i=1/0,o=-1/0,a=e.extents;for(t=0,n=a.length;t<n;++t)r=a[t],r[0]<i&&(i=r[0]),r[1]>o&&(o=r[1]);return[i,o]}function Li(e){de.call(this,null,$i,e)}function $i(e){return this.value&&!e.modified()?this.value:e.values.reduce((function(e,t){return e.concat(t)}),[])}function Ui(e){Kt.call(this,null,e)}function qi(e){jr.call(this,e)}Bi.transform=function(e,t){var n,r,i,o=t,a=e.as,u=e.fields,s=e.index,c=e.values,l=null==e.default?null:e.default,f=e.modified(),d=f?t.SOURCE:t.ADD,h=u.length;return c?(r=c.length,h>1&&!a&&Object(H["o"])('Multi-field lookup requires explicit "as" parameter.'),a&&a.length!==h*r&&Object(H["o"])('The "as" parameter has too few output field names.'),a=a||c.map(H["h"]),n=function(e){for(var t,n,i=0,o=0;i<h;++i)if(n=s.get(u[i](e)),null==n)for(t=0;t<r;++t,++o)e[a[o]]=l;else for(t=0;t<r;++t,++o)e[a[o]]=c[t](n)}):(a||Object(H["o"])("Missing output field names."),n=function(e){for(var t,n=0;n<h;++n)t=s.get(u[n](e)),e[a[n]]=null==t?l:t}),f?o=t.reflow(!0):(i=u.some((function(e){return t.modified(e.fields)})),d|=i?t.MOD:0),t.visit(d,n),o.modifies(a)},Object(H["z"])(Pi,de),Object(H["z"])(Li,de),Object(H["z"])(Ui,Kt),Ui.prototype.transform=function(e,t){return this.modified(e.modified()),this.value=e,t.fork(t.NO_SOURCE|t.NO_FIELDS)},qi.Definition={type:"Pivot",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"value",type:"field",required:!0},{name:"op",type:"enum",values:sn,default:"sum"},{name:"limit",type:"number",default:0},{name:"key",type:"field"}]};var Wi=Object(H["z"])(qi,jr);function Hi(e,t){var n=e.field,r=e.value,i=("count"===e.op?"__count__":e.op)||"sum",o=Object(H["g"])(n).concat(Object(H["g"])(r)),a=Yi(n,e.limit||0,t);return{key:e.key,groupby:e.groupby,ops:a.map((function(){return i})),fields:a.map((function(e){return Gi(e,n,r,o)})),as:a.map((function(e){return e+""})),modified:e.modified.bind(e)}}function Gi(e,t,n,r){return Object(H["f"])((function(r){return t(r)===e?n(r):NaN}),r,e+"")}function Yi(e,t,n){var r={},i=[];return n.visit(n.SOURCE,(function(t){var n=e(t);r[n]||(r[n]=1,i.push(n))})),i.sort((function(e,t){return(e<t||null==e)&&null!=t?-1:(e>t||null==t)&&null!=e?1:(t=t instanceof Date?+t:t,(e=e instanceof Date?+e:e)!==e&&t===t?-1:t!==t&&e===e?1:0)})),t?i.slice(0,t):i}function Vi(e){ui.call(this,e)}Wi._transform=Wi.transform,Wi.transform=function(e,t){return this._transform(Hi(e,t),t)};var Xi=Object(H["z"])(Vi,ui);function Ji(e){Kt.call(this,null,e)}Xi.transform=function(e,t){var n=this,r=e.subflow,i=e.field;return(e.modified("field")||i&&t.modified(Object(H["g"])(i)))&&Object(H["o"])("PreFacet does not support field modification."),this._targets.active=0,t.visit(t.MOD,(function(e){var o=n.subflow(J(e),r,t,e);i?i(e).forEach((function(e){o.mod(e)})):o.mod(e)})),t.visit(t.ADD,(function(e){var o=n.subflow(J(e),r,t,e);i?i(e).forEach((function(e){o.add(K(e))})):o.add(e)})),t.visit(t.REM,(function(e){var o=n.subflow(J(e),r,t,e);i?i(e).forEach((function(e){o.rem(e)})):o.rem(e)})),t},Ji.Definition={type:"Project",metadata:{generates:!0,changes:!0},params:[{name:"fields",type:"field",array:!0},{name:"as",type:"string",null:!0,array:!0}]};var Qi=Object(H["z"])(Ji,Kt);function Ki(e,t,n,r){for(var i=0,o=n.length;i<o;++i)t[r[i]]=n[i](e);return t}function Zi(e){Kt.call(this,null,e)}Qi.transform=function(e,t){var n,r,i=e.fields,o=hi(e.fields,e.as||[]),a=i?function(e,t){return Ki(e,t,i,o)}:ee;return this.value?r=this.value:(t=t.addAll(),r=this.value={}),n=t.fork(t.NO_SOURCE),t.visit(t.REM,(function(e){var t=J(e);n.rem.push(r[t]),r[t]=null})),t.visit(t.ADD,(function(e){var t=a(e,K({}));r[J(e)]=t,n.add.push(t)})),t.visit(t.MOD,(function(e){n.mod.push(a(e,r[J(e)]))})),n};var eo=Object(H["z"])(Zi,Kt);function to(e){Kt.call(this,null,e)}eo.transform=function(e,t){return this.value=e.value,e.modified("value")?t.fork(t.NO_SOURCE|t.NO_FIELDS):t.StopPropagation};var no=Object(H["z"])(to,Kt);function ro(e){Kt.call(this,[],e),this.count=0}no.transform=function(e,t){var n,r;return this.value?r=this.value:(n=t=t.addAll(),r=this.value={}),e.derive&&(n=t.fork(t.NO_SOURCE),t.visit(t.REM,(function(e){var t=J(e);n.rem.push(r[t]),r[t]=null})),t.visit(t.ADD,(function(e){var t=Z(e);r[J(e)]=t,n.add.push(t)})),t.visit(t.MOD,(function(e){n.mod.push(ee(e,r[J(e)]))}))),n},ro.Definition={type:"Sample",metadata:{},params:[{name:"size",type:"number",default:1e3}]};var io=Object(H["z"])(ro,Kt);function oo(e){Kt.call(this,null,e)}io.transform=function(e,t){var n=t.fork(t.NO_SOURCE),r=e.modified("size"),i=e.size,o=this.value,a=this.count,u=0,s=o.reduce((function(e,t){return e[J(t)]=1,e}),{});function c(e){var t,r;o.length<i?o.push(e):(r=~~((a+1)*Dn()),r<o.length&&r>=u&&(t=o[r],s[J(t)]&&n.rem.push(t),o[r]=e)),++a}if(t.rem.length&&(t.visit(t.REM,(function(e){var t=J(e);s[t]&&(s[t]=-1,n.rem.push(e)),--a})),o=o.filter((function(e){return-1!==s[J(e)]}))),(t.rem.length||r)&&o.length<i&&t.source&&(u=a=o.length,t.visit(t.SOURCE,(function(e){s[J(e)]||c(e)})),u=-1),r&&o.length>i){for(var l=0,f=o.length-i;l<f;++l)s[J(o[l])]=-1,n.rem.push(o[l]);o=o.slice(f)}return t.mod.length&&t.visit(t.MOD,(function(e){s[J(e)]&&n.mod.push(e)})),t.add.length&&t.visit(t.ADD,c),(t.add.length||u<0)&&(n.add=o.filter((function(e){return!s[J(e)]}))),this.count=a,this.value=n.source=o,n},oo.Definition={type:"Sequence",metadata:{changes:!0},params:[{name:"start",type:"number",required:!0},{name:"stop",type:"number",required:!0},{name:"step",type:"number",default:1},{name:"as",type:"string",default:"data"}]};var ao=Object(H["z"])(oo,Kt);function uo(e){Kt.call(this,null,e),this.modified(!0)}ao.transform=function(e,t){if(!this.value||e.modified()){var n=t.materialize().fork(t.MOD),r=e.as||"data";return n.rem=this.value?t.rem.concat(this.value):t.rem,this.value=Xr(e.start,e.stop,e.step||1).map((function(e){var t={};return t[r]=e,K(t)})),n.add=t.add.concat(this.value),n}};var so=Object(H["z"])(uo,Kt);function co(e){Kt.call(this,Object(H["t"])(),e)}so.transform=function(e,t){return this.value=t.source,t.changed()?t.fork(t.NO_SOURCE|t.NO_FIELDS):t.StopPropagation};var lo=Object(H["z"])(co,Kt);function fo(e){Kt.call(this,null,e)}lo.transform=function(e,t){var n=t.dataflow,r=e.field,i=this.value,o=!0;function a(e){i.set(r(e),e)}return e.modified("field")||t.modified(r.fields)?(i.clear(),t.visit(t.SOURCE,a)):t.changed()?(t.visit(t.REM,(function(e){i.delete(r(e))})),t.visit(t.ADD,a)):o=!1,this.modified(o),i.empty>n.cleanThreshold&&n.runAfter(i.clean),t.fork()};var ho=Object(H["z"])(fo,Kt);function po(e,t,n,r){var i=go[e](t,n);return{init:i.init||H["lb"],update:function(e,t){t[r]=i.next(e)}}}ho.transform=function(e,t){var n=!this.value||e.modified("field")||e.modified("sort")||t.changed()||e.sort&&t.modified(e.sort.fields);n&&(this.value=(e.sort?t.source.slice().sort(e.sort):t.source).map(e.field))};var go={row_number:function(){return{next:function(e){return e.index+1}}},rank:function(){var e;return{init:function(){e=1},next:function(t){var n=t.index,r=t.data;return n&&t.compare(r[n-1],r[n])?e=n+1:e}}},dense_rank:function(){var e;return{init:function(){e=1},next:function(t){var n=t.index,r=t.data;return n&&t.compare(r[n-1],r[n])?++e:e}}},percent_rank:function(){var e=go.rank(),t=e.next;return{init:e.init,next:function(e){return(t(e)-1)/(e.data.length-1)}}},cume_dist:function(){var e;return{init:function(){e=0},next:function(t){var n=t.index,r=t.data,i=t.compare;if(e<n){while(n+1<r.length&&!i(r[n],r[n+1]))++n;e=n}return(1+e)/r.length}}},ntile:function(e,t){t=+t,t>0||Object(H["o"])("ntile num must be greater than zero.");var n=go.cume_dist(),r=n.next;return{init:n.init,next:function(e){return Math.ceil(t*r(e))}}},lag:function(e,t){return t=+t||1,{next:function(n){var r=n.index-t;return r>=0?e(n.data[r]):null}}},lead:function(e,t){return t=+t||1,{next:function(n){var r=n.index+t,i=n.data;return r<i.length?e(i[r]):null}}},first_value:function(e){return{next:function(t){return e(t.data[t.i0])}}},last_value:function(e){return{next:function(t){return e(t.data[t.i1-1])}}},nth_value:function(e,t){return t=+t,t>0||Object(H["o"])("nth_value nth must be greater than zero."),{next:function(n){var r=n.i0+(t-1);return r<n.i1?e(n.data[r]):null}}}},mo=Object.keys(go);function vo(e){var t=this,n=Object(H["i"])(e.ops),r=Object(H["i"])(e.fields),i=Object(H["i"])(e.params),o=Object(H["i"])(e.as),a=t.outputs=[],u=t.windows=[],s={},c={},l=!0,f=[],d=[];function h(e){Object(H["i"])(Object(H["g"])(e)).forEach((function(e){s[e]=1}))}h(e.sort),n.forEach((function(e,t){var n=r[t],s=Object(H["h"])(n),p=an(e,s,o[t]);if(h(n),a.push(p),go.hasOwnProperty(e))u.push(po(e,r[t],i[t],p));else{if(null==n&&"count"!==e&&Object(H["o"])("Null aggregate field specified."),"count"===e)return void f.push(p);l=!1;var g=c[s];g||(g=c[s]=[],g.field=n,d.push(g)),g.push(cn(e,p))}})),(f.length||d.length)&&(t.cell=yo(d,f,l)),t.inputs=Object.keys(s)}var bo=vo.prototype;function yo(e,t,n){e=e.map((function(e){return hn(e,e.field)}));var r={num:0,agg:null,store:!1,count:t};if(!n)for(var i=e.length,o=r.agg=Array(i),a=0;a<i;++a)o[a]=new e[a](r);if(r.store)var u=r.data=new Ar;return r.add=function(e){if(r.num+=1,!n){u&&u.add(e);for(var t=0;t<i;++t)o[t].add(o[t].get(e),e)}},r.rem=function(e){if(r.num-=1,!n){u&&u.rem(e);for(var t=0;t<i;++t)o[t].rem(o[t].get(e),e)}},r.set=function(e){var i,a;for(u&&u.values(),i=0,a=t.length;i<a;++i)e[t[i]]=r.num;if(!n)for(i=0,a=o.length;i<a;++i)o[i].set(e)},r.init=function(){r.num=0,u&&u.reset();for(var e=0;e<i;++e)o[e].init()},r}bo.init=function(){this.windows.forEach((function(e){e.init()})),this.cell&&this.cell.init()},bo.update=function(e,t){var n,r=this,i=r.cell,o=r.windows,a=e.data,u=o&&o.length;if(i){for(n=e.p0;n<e.i0;++n)i.rem(a[n]);for(n=e.p1;n<e.i1;++n)i.add(a[n]);i.set(t)}for(n=0;n<u;++n)o[n].update(e,t)};var xo=function(e){let t=e,n=e;function r(e,t,r,i){null==r&&(r=0),null==i&&(i=e.length);while(r<i){const o=r+i>>>1;n(e[o],t)<0?r=o+1:i=o}return r}function i(e,t,r,i){null==r&&(r=0),null==i&&(i=e.length);while(r<i){const o=r+i>>>1;n(e[o],t)>0?i=o:r=o+1}return r}function o(e,n,i,o){null==i&&(i=0),null==o&&(o=e.length);const a=r(e,n,i,o-1);return a>i&&t(e[a-1],n)>-t(e[a],n)?a-1:a}return 1===e.length&&(t=(t,n)=>e(t)-n,n=wo(e)),{left:r,center:o,right:i}};function wo(e){return(t,n)=>gn(e(t),n)}function Oo(e){Kt.call(this,{},e),this._mlen=0,this._mods=[]}Oo.Definition={type:"Window",metadata:{modifies:!0},params:[{name:"sort",type:"compare"},{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:mo.concat(sn)},{name:"params",type:"number",null:!0,array:!0},{name:"fields",type:"field",null:!0,array:!0},{name:"as",type:"string",null:!0,array:!0},{name:"frame",type:"number",null:!0,array:!0,length:2,default:[null,0]},{name:"ignorePeers",type:"boolean",default:!1}]};var Eo=Object(H["z"])(Oo,Kt);function ko(e,t,n){var r=n.sort,i=r&&!n.ignorePeers,o=n.frame||[null,0],a=e.data(r),u=a.length,s=0,c=i?xo(r):null,l={i0:0,i1:0,p0:0,p1:0,index:0,data:a,compare:r||Object(H["m"])(-1)};for(t.init();s<u;++s)_o(l,o,s,u),i&&Ao(l,c),t.update(l,a[s])}function _o(e,t,n,r){e.p0=e.i0,e.p1=e.i1,e.i0=null==t[0]?0:Math.max(0,n-Math.abs(t[0])),e.i1=null==t[1]?r:Math.min(r,n+Math.abs(t[1])+1),e.index=n}function Ao(e,t){var n=e.i0,r=e.i1-1,i=e.compare,o=e.data,a=o.length-1;n>0&&!i(o[n],o[n-1])&&(e.i0=t.left(o,o[n])),r<a&&!i(o[r],o[r+1])&&(e.i1=t.right(o,o[r]))}Eo.transform=function(e,t){var n,r,i=this,o=i.state,a=e.modified();this.stamp=t.stamp,o&&!a||(o=i.state=new vo(e));var u=on(e.groupby);function s(e){return i.group(u(e))}for(a||t.modified(o.inputs)?(i.value={},t.visit(t.SOURCE,(function(e){s(e).add(e)}))):(t.visit(t.REM,(function(e){s(e).remove(e)})),t.visit(t.ADD,(function(e){s(e).add(e)}))),n=0,r=i._mlen;n<r;++n)ko(i._mods[n],o,e);return i._mlen=0,i._mods=[],t.reflow(a).modifies(o.outputs)},Eo.group=function(e){var t=this,n=t.value[e];return n||(n=t.value[e]=Mr(J),n.stamp=-1),n.stamp<t.stamp&&(n.stamp=t.stamp,t._mods[t._mlen++]=n),n};var So="top",jo="left",Co="right",Do="bottom",Fo="top-left",Mo="top-right",zo="bottom-left",No="bottom-right",To="start",Ro="end",Bo="group",Po="axis",Io="title",Lo="frame",$o="scope",Uo="legend",qo="row-header",Wo="row-footer",Ho="row-title",Go="column-header",Yo="column-footer",Vo="column-title",Xo="padding",Jo="symbol",Qo="fit",Ko="fit-x",Zo="fit-y",ea="pad",ta="none",na="all",ra="each",ia="flush",oa="column",aa="row";function ua(e){this.clear(),e&&this.union(e)}var sa=ua.prototype;sa.clone=function(){return new ua(this)},sa.clear=function(){return this.x1=+Number.MAX_VALUE,this.y1=+Number.MAX_VALUE,this.x2=-Number.MAX_VALUE,this.y2=-Number.MAX_VALUE,this},sa.empty=function(){return this.x1===+Number.MAX_VALUE&&this.y1===+Number.MAX_VALUE&&this.x2===-Number.MAX_VALUE&&this.y2===-Number.MAX_VALUE},sa.set=function(e,t,n,r){return n<e?(this.x2=e,this.x1=n):(this.x1=e,this.x2=n),r<t?(this.y2=t,this.y1=r):(this.y1=t,this.y2=r),this},sa.add=function(e,t){return e<this.x1&&(this.x1=e),t<this.y1&&(this.y1=t),e>this.x2&&(this.x2=e),t>this.y2&&(this.y2=t),this},sa.expand=function(e){return this.x1-=e,this.y1-=e,this.x2+=e,this.y2+=e,this},sa.round=function(){return this.x1=Math.floor(this.x1),this.y1=Math.floor(this.y1),this.x2=Math.ceil(this.x2),this.y2=Math.ceil(this.y2),this},sa.translate=function(e,t){return this.x1+=e,this.x2+=e,this.y1+=t,this.y2+=t,this},sa.rotate=function(e,t,n){var r=Math.cos(e),i=Math.sin(e),o=t-t*r+n*i,a=n-t*i-n*r,u=this.x1,s=this.x2,c=this.y1,l=this.y2;return this.clear().add(r*u-i*c+o,i*u+r*c+a).add(r*u-i*l+o,i*u+r*l+a).add(r*s-i*c+o,i*s+r*c+a).add(r*s-i*l+o,i*s+r*l+a)},sa.union=function(e){return e.x1<this.x1&&(this.x1=e.x1),e.y1<this.y1&&(this.y1=e.y1),e.x2>this.x2&&(this.x2=e.x2),e.y2>this.y2&&(this.y2=e.y2),this},sa.intersect=function(e){return e.x1>this.x1&&(this.x1=e.x1),e.y1>this.y1&&(this.y1=e.y1),e.x2<this.x2&&(this.x2=e.x2),e.y2<this.y2&&(this.y2=e.y2),this},sa.encloses=function(e){return e&&this.x1<=e.x1&&this.x2>=e.x2&&this.y1<=e.y1&&this.y2>=e.y2},sa.alignsWith=function(e){return e&&(this.x1==e.x1||this.x2==e.x2||this.y1==e.y1||this.y2==e.y2)},sa.intersects=function(e){return e&&!(this.x2<e.x1||this.x1>e.x2||this.y2<e.y1||this.y1>e.y2)},sa.contains=function(e,t){return!(e<this.x1||e>this.x2||t<this.y1||t>this.y2)},sa.width=function(){return this.x2-this.x1},sa.height=function(){return this.y2-this.y1};var ca=0,la=function(e,t){var n,r=[];return n={id:"gradient_"+ca++,x1:e?e[0]:0,y1:e?e[1]:0,x2:t?t[0]:1,y2:t?t[1]:0,stops:r,stop:function(e,t){return r.push({offset:e,color:t}),n}}};function fa(e){this.mark=e,this.bounds=this.bounds||new ua}function da(e){fa.call(this,e),this.items=this.items||[]}function ha(e,t){if("undefined"!==typeof document&&document.createElement){const n=document.createElement("canvas");if(n&&n.getContext)return n.width=e,n.height=t,n}return null}Object(H["z"])(da,fa);const pa=()=>"undefined"!==typeof Image?Image:null;function ga(e){this._pending=0,this._loader=e||ke()}var ma=ga.prototype;function va(e){e._pending+=1}function ba(e){e._pending-=1}ma.pending=function(){return this._pending},ma.sanitizeURL=function(e){var t=this;return va(t),t._loader.sanitize(e,{context:"href"}).then((function(e){return ba(t),e})).catch((function(){return ba(t),null}))},ma.loadImage=function(e){var t=this,n=pa();return va(t),t._loader.sanitize(e,{context:"image"}).then((function(e){var r=e.href;if(!r||!n)throw{url:r};var i=new n;return i.onload=function(){ba(t),i.loaded=!0},i.onerror=function(){ba(t),i.loaded=!1},i.src=r,i})).catch((function(e){return ba(t),{loaded:!1,width:0,height:0,src:e&&e.url||""}}))},ma.ready=function(){var e=this;return new Promise((function(t){function n(r){e.pending()?setTimeout((function(){n(!0)}),10):t(r)}n(!1)}))};var ya=n("8c80"),xa=n("9ae6"),wa=n("d675"),Oa=n("77848"),Ea=n("7792"),ka=n("b0ad"),_a=n("3b4d"),Aa=n("29c8"),Sa=n("5644"),ja=n("438d"),Ca=n("4830"),Da=n("cc3e"),Fa=n("a4bd"),Ma=n("a84d"),za=n("7bd6"),Na={basis:{curve:ya["b"]},"basis-closed":{curve:xa["a"]},"basis-open":{curve:wa["a"]},bundle:{curve:Oa["a"],tension:"beta",value:.85},cardinal:{curve:Ea["b"],tension:"tension",value:0},"cardinal-open":{curve:ka["b"],tension:"tension",value:0},"cardinal-closed":{curve:_a["b"],tension:"tension",value:0},"catmull-rom":{curve:Aa["a"],tension:"alpha",value:.5},"catmull-rom-closed":{curve:Sa["a"],tension:"alpha",value:.5},"catmull-rom-open":{curve:ja["a"],tension:"alpha",value:.5},linear:{curve:Ca["a"]},"linear-closed":{curve:Da["a"]},monotone:{horizontal:Fa["b"],vertical:Fa["a"]},natural:{curve:Ma["a"]},step:{curve:za["a"]},"step-after":{curve:za["b"]},"step-before":{curve:za["c"]}};function Ta(e,t,n){var r=Na.hasOwnProperty(e)&&Na[e],i=null;return r&&(i=r.curve||r[t||"vertical"],r.tension&&null!=n&&(i=i[r.tension](n))),i}var Ra={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},Ba=[/([MLHVCSQTAZmlhvcsqtaz])/g,/###/,/(\d)([-+])/g,/\s|,|###/],Pa=function(e){var t,n,r,i,o,a,u,s,c,l,f,d=[];for(t=e.slice().replace(Ba[0],"###$1").split(Ba[1]).slice(1),s=0,l=t.length;s<l;++s){for(n=t[s],r=n.slice(1).trim().replace(Ba[2],"$1###$2").split(Ba[3]),a=n.charAt(0),i=[a],c=0,f=r.length;c<f;++c)(o=+r[c])===o&&i.push(o);if(u=Ra[a.toLowerCase()],i.length-1>u)for(c=1,f=i.length;c<f;c+=u)d.push([a].concat(i.slice(c,c+u)));else d.push(i)}return d},Ia={},La={},$a=[].join;function Ua(e,t,n,r,i,o,a,u,s){var c=$a.call(arguments);if(Ia[c])return Ia[c];var l=a*(Math.PI/180),f=Math.sin(l),d=Math.cos(l);n=Math.abs(n),r=Math.abs(r);var h=d*(u-e)*.5+f*(s-t)*.5,p=d*(s-t)*.5-f*(u-e)*.5,g=h*h/(n*n)+p*p/(r*r);g>1&&(g=Math.sqrt(g),n*=g,r*=g);var m=d/n,v=f/n,b=-f/r,y=d/r,x=m*u+v*s,w=b*u+y*s,O=m*e+v*t,E=b*e+y*t,k=(O-x)*(O-x)+(E-w)*(E-w),_=1/k-.25;_<0&&(_=0);var A=Math.sqrt(_);o==i&&(A=-A);var S=.5*(x+O)-A*(E-w),j=.5*(w+E)+A*(O-x),C=Math.atan2(w-j,x-S),D=Math.atan2(E-j,O-S),F=D-C;F<0&&1===o?F+=2*Math.PI:F>0&&0===o&&(F-=2*Math.PI);for(var M=Math.ceil(Math.abs(F/(.5*Math.PI+.001))),z=[],N=0;N<M;++N){var T=C+N*F/M,R=C+(N+1)*F/M;z[N]=[S,j,T,R,n,r,f,d]}return Ia[c]=z}function qa(e){var t=$a.call(e);if(La[t])return La[t];var n=e[0],r=e[1],i=e[2],o=e[3],a=e[4],u=e[5],s=e[6],c=e[7],l=c*a,f=-s*u,d=s*a,h=c*u,p=Math.cos(i),g=Math.sin(i),m=Math.cos(o),v=Math.sin(o),b=.5*(o-i),y=Math.sin(.5*b),x=8/3*y*y/Math.sin(b),w=n+p-x*g,O=r+g+x*p,E=n+m,k=r+v,_=E+x*v,A=k-x*m;return La[t]=[l*w+f*O,d*w+h*O,l*_+f*A,d*_+h*A,l*E+f*k,d*E+h*k]}var Wa=["l",0,0,0,0,0,0,0];function Ha(e,t){var n=Wa[0]=e[0];if("a"===n||"A"===n)Wa[1]=t*e[1],Wa[2]=t*e[2],Wa[3]=e[3],Wa[4]=e[4],Wa[5]=e[5],Wa[6]=t*e[6],Wa[7]=t*e[7];else for(var r=1,i=e.length;r<i;++r)Wa[r]=t*e[r];return Wa}var Ga=function(e,t,n,r,i){var o,a,u,s,c,l=null,f=0,d=0,h=0,p=0;null==n&&(n=0),null==r&&(r=0),null==i&&(i=1),e.beginPath&&e.beginPath();for(var g=0,m=t.length;g<m;++g){switch(o=t[g],1!==i&&(o=Ha(o,i)),o[0]){case"l":f+=o[1],d+=o[2],e.lineTo(f+n,d+r);break;case"L":f=o[1],d=o[2],e.lineTo(f+n,d+r);break;case"h":f+=o[1],e.lineTo(f+n,d+r);break;case"H":f=o[1],e.lineTo(f+n,d+r);break;case"v":d+=o[1],e.lineTo(f+n,d+r);break;case"V":d=o[1],e.lineTo(f+n,d+r);break;case"m":f+=o[1],d+=o[2],e.moveTo(f+n,d+r);break;case"M":f=o[1],d=o[2],e.moveTo(f+n,d+r);break;case"c":a=f+o[5],u=d+o[6],h=f+o[3],p=d+o[4],e.bezierCurveTo(f+o[1]+n,d+o[2]+r,h+n,p+r,a+n,u+r),f=a,d=u;break;case"C":f=o[5],d=o[6],h=o[3],p=o[4],e.bezierCurveTo(o[1]+n,o[2]+r,h+n,p+r,f+n,d+r);break;case"s":a=f+o[3],u=d+o[4],h=2*f-h,p=2*d-p,e.bezierCurveTo(h+n,p+r,f+o[1]+n,d+o[2]+r,a+n,u+r),h=f+o[1],p=d+o[2],f=a,d=u;break;case"S":a=o[3],u=o[4],h=2*f-h,p=2*d-p,e.bezierCurveTo(h+n,p+r,o[1]+n,o[2]+r,a+n,u+r),f=a,d=u,h=o[1],p=o[2];break;case"q":a=f+o[3],u=d+o[4],h=f+o[1],p=d+o[2],e.quadraticCurveTo(h+n,p+r,a+n,u+r),f=a,d=u;break;case"Q":a=o[3],u=o[4],e.quadraticCurveTo(o[1]+n,o[2]+r,a+n,u+r),f=a,d=u,h=o[1],p=o[2];break;case"t":a=f+o[1],u=d+o[2],null===l[0].match(/[QqTt]/)?(h=f,p=d):"t"===l[0]?(h=2*f-s,p=2*d-c):"q"===l[0]&&(h=2*f-h,p=2*d-p),s=h,c=p,e.quadraticCurveTo(h+n,p+r,a+n,u+r),f=a,d=u,h=f+o[1],p=d+o[2];break;case"T":a=o[1],u=o[2],h=2*f-h,p=2*d-p,e.quadraticCurveTo(h+n,p+r,a+n,u+r),f=a,d=u;break;case"a":Ya(e,f+n,d+r,[o[1],o[2],o[3],o[4],o[5],o[6]+f+n,o[7]+d+r]),f+=o[6],d+=o[7];break;case"A":Ya(e,f+n,d+r,[o[1],o[2],o[3],o[4],o[5],o[6]+n,o[7]+r]),f=o[6],d=o[7];break;case"z":case"Z":e.closePath();break}l=o}};function Ya(e,t,n,r){for(var i=Ua(r[5],r[6],r[0],r[1],r[3],r[4],r[2],t,n),o=0;o<i.length;++o){var a=qa(i[o]);e.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5])}}var Va=2*Math.PI,Xa=Math.sqrt(3)/2,Ja={circle:{draw:function(e,t){var n=Math.sqrt(t)/2;e.moveTo(n,0),e.arc(0,0,n,0,Va)}},cross:{draw:function(e,t){var n=Math.sqrt(t)/2,r=n/2.5;e.moveTo(-n,-r),e.lineTo(-n,r),e.lineTo(-r,r),e.lineTo(-r,n),e.lineTo(r,n),e.lineTo(r,r),e.lineTo(n,r),e.lineTo(n,-r),e.lineTo(r,-r),e.lineTo(r,-n),e.lineTo(-r,-n),e.lineTo(-r,-r),e.closePath()}},diamond:{draw:function(e,t){var n=Math.sqrt(t)/2;e.moveTo(-n,0),e.lineTo(0,-n),e.lineTo(n,0),e.lineTo(0,n),e.closePath()}},square:{draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}},"triangle-up":{draw:function(e,t){var n=Math.sqrt(t)/2,r=Xa*n;e.moveTo(0,-r),e.lineTo(-n,r),e.lineTo(n,r),e.closePath()}},"triangle-down":{draw:function(e,t){var n=Math.sqrt(t)/2,r=Xa*n;e.moveTo(0,r),e.lineTo(-n,-r),e.lineTo(n,-r),e.closePath()}},"triangle-right":{draw:function(e,t){var n=Math.sqrt(t)/2,r=Xa*n;e.moveTo(r,0),e.lineTo(-r,-n),e.lineTo(-r,n),e.closePath()}},"triangle-left":{draw:function(e,t){var n=Math.sqrt(t)/2,r=Xa*n;e.moveTo(-r,0),e.lineTo(r,-n),e.lineTo(r,n),e.closePath()}}};function Qa(e){return Ja.hasOwnProperty(e)?Ja[e]:Za(e)}var Ka={};function Za(e){if(!Ka.hasOwnProperty(e)){var t=Pa(e);Ka[e]={draw:function(e,n){Ga(e,t,0,0,Math.sqrt(n)/2)}}}return Ka[e]}var eu=n("eadc");function tu(e){return e.x}function nu(e){return e.y}function ru(e){return e.width}function iu(e){return e.height}function ou(e){return function(){return e}}var au=function(){var e=tu,t=nu,n=ru,r=iu,i=ou(0),o=null;function a(a,u,s){var c,l=null!=u?u:+e.call(this,a),f=null!=s?s:+t.call(this,a),d=+n.call(this,a),h=+r.call(this,a),p=+i.call(this,a);if(o||(o=c=Object(eu["a"])()),p<=0)o.rect(l,f,d,h);else{var g=l+d,m=f+h;o.moveTo(l+p,f),o.lineTo(g-p,f),o.quadraticCurveTo(g,f,g,f+p),o.lineTo(g,m-p),o.quadraticCurveTo(g,m,g-p,m),o.lineTo(l+p,m),o.quadraticCurveTo(l,m,l,m-p),o.lineTo(l,f+p),o.quadraticCurveTo(l,f,l+p,f),o.closePath()}if(c)return o=null,c+""||null}return a.x=function(t){return arguments.length?(e="function"===typeof t?t:ou(+t),a):e},a.y=function(e){return arguments.length?(t="function"===typeof e?e:ou(+e),a):t},a.width=function(e){return arguments.length?(n="function"===typeof e?e:ou(+e),a):n},a.height=function(e){return arguments.length?(r="function"===typeof e?e:ou(+e),a):r},a.cornerRadius=function(e){return arguments.length?(i="function"===typeof e?e:ou(+e),a):i},a.context=function(e){return arguments.length?(o=null==e?null:e,a):o},a},uu=Math.PI,su=function(){var e,t,n,r,i,o,a,u,s=null;function c(e,t,n){var r=n/2;if(i){var c=a-t,l=e-o;if(c||l){var f=Math.sqrt(c*c+l*l),d=(c/=f)*u,h=(l/=f)*u,p=Math.atan2(l,c);s.moveTo(o-d,a-h),s.lineTo(e-c*r,t-l*r),s.arc(e,t,r,p-uu,p),s.lineTo(o+d,a+h),s.arc(o,a,u,p,p+uu)}else s.arc(e,t,r,0,2*uu);s.closePath()}else i=1;o=e,a=t,u=r}function l(o){var a,u,l,f=o.length,d=!1;for(null==s&&(s=l=Object(eu["a"])()),a=0;a<=f;++a)!(a<f&&r(u=o[a],a,o))===d&&(d=!d)&&(i=0),d&&c(+e(u,a,o),+t(u,a,o),+n(u,a,o));if(l)return s=null,l+""||null}return l.x=function(t){return arguments.length?(e=t,l):e},l.y=function(e){return arguments.length?(t=e,l):t},l.size=function(e){return arguments.length?(n=e,l):n},l.defined=function(e){return arguments.length?(r=e,l):r},l.context=function(e){return arguments.length?(s=null==e?null:e,l):s},l},cu=n("650c"),lu=n("e38c"),fu=n("fae8"),du=n("9150");function hu(e){return e.x||0}function pu(e){return e.y||0}function gu(e){return e.width||0}function mu(e){return e.size||1}function vu(e){return e.height||0}function bu(e){return(e.x||0)+(e.width||0)}function yu(e){return(e.y||0)+(e.height||0)}function xu(e){return e.startAngle||0}function wu(e){return e.endAngle||0}function Ou(e){return e.padAngle||0}function Eu(e){return e.innerRadius||0}function ku(e){return e.outerRadius||0}function _u(e){return e.cornerRadius||0}function Au(e){return!(!1===e.defined)}function Su(e){return null==e.size?64:e.size}function ju(e){return Qa(e.shape||"circle")}var Cu=Object(cu["a"])().startAngle(xu).endAngle(wu).padAngle(Ou).innerRadius(Eu).outerRadius(ku).cornerRadius(_u),Du=Object(lu["a"])().x(hu).y1(pu).y0(yu).defined(Au),Fu=Object(lu["a"])().y(pu).x1(hu).x0(bu).defined(Au),Mu=Object(fu["a"])().x(hu).y(pu).defined(Au),zu=au().x(hu).y(pu).width(gu).height(vu).cornerRadius(_u),Nu=Object(du["a"])().type(ju).size(Su),Tu=su().x(hu).y(pu).defined(Au).size(mu);function Ru(e,t){return Cu.context(e)(t)}function Bu(e,t){var n=t[0],r=n.interpolate||"linear";return("horizontal"===n.orient?Fu:Du).curve(Ta(r,n.orient,n.tension)).context(e)(t)}function Pu(e,t){var n=t[0],r=n.interpolate||"linear";return Mu.curve(Ta(r,n.orient,n.tension)).context(e)(t)}function Iu(e,t,n,r){return zu.context(e)(t,n,r)}function Lu(e,t){return(t.mark.shape||t.shape).context(e)(t)}function $u(e,t){return Nu.context(e)(t)}function Uu(e,t){return Tu.context(e)(t)}var qu,Wu=function(e,t){return t.stroke&&0!==t.opacity&&0!==t.strokeOpacity&&e.expand(null!=t.strokeWidth?+t.strokeWidth:1),e},Hu=2*Math.PI,Gu=Hu/4,Yu=Hu-1e-8;function Vu(e){return qu=e,Vu}function Xu(){}function Ju(e,t){qu.add(e,t)}Vu.beginPath=Xu,Vu.closePath=Xu,Vu.moveTo=Ju,Vu.lineTo=Ju,Vu.rect=function(e,t,n,r){Ju(e,t),Ju(e+n,t+r)},Vu.quadraticCurveTo=function(e,t,n,r){Ju(e,t),Ju(n,r)},Vu.bezierCurveTo=function(e,t,n,r,i,o){Ju(e,t),Ju(n,r),Ju(i,o)},Vu.arc=function(e,t,n,r,i,o){if(Math.abs(i-r)>Yu)return Ju(e-n,t-n),void Ju(e+n,t+n);var a,u,s,c,l=1/0,f=-1/0,d=1/0,h=-1/0;function p(e){s=n*Math.cos(e),c=n*Math.sin(e),s<l&&(l=s),s>f&&(f=s),c<d&&(d=c),c>h&&(h=c)}if(p(r),p(i),i!==r)if(r%=Hu,r<0&&(r+=Hu),i%=Hu,i<0&&(i+=Hu),i<r&&(o=!o,a=r,r=i,i=a),o)for(i-=Hu,a=r-r%Gu,u=0;u<4&&a>i;++u,a-=Gu)p(a);else for(a=r-r%Gu+Gu,u=0;u<4&&a<i;++u,a+=Gu)p(a);Ju(e+l,t+d),Ju(e+f,t+h)};var Qu=function(e,t,n){for(var r=n.width(),i=n.height(),o=n.x1+t.x1*r,a=n.y1+t.y1*i,u=n.x1+t.x2*r,s=n.y1+t.y2*i,c=t.stops,l=0,f=c.length,d=e.createLinearGradient(o,a,u,s);l<f;++l)d.addColorStop(c[l].offset,c[l].color);return d},Ku=function(e,t,n){return n.id?Qu(e,n,t.bounds):n},Zu=function(e,t,n){return n*=null==t.fillOpacity?1:t.fillOpacity,n>0&&(e.globalAlpha=n,e.fillStyle=Ku(e,t,t.fill),!0)},es=[],ts=function(e,t,n){var r=null!=(r=t.strokeWidth)?r:1;return!(r<=0)&&(n*=null==t.strokeOpacity?1:t.strokeOpacity,n>0&&(e.globalAlpha=n,e.strokeStyle=Ku(e,t,t.stroke),e.lineWidth=r,e.lineCap=t.strokeCap||"butt",e.lineJoin=t.strokeJoin||"miter",e.miterLimit=t.strokeMiterLimit||10,e.setLineDash&&(e.setLineDash(t.strokeDash||es),e.lineDashOffset=t.strokeDashOffset||0),!0))};function ns(e,t){return e.zindex-t.zindex||e.index-t.index}function rs(e){if(!e.zdirty)return e.zitems;var t,n,r,i=e.items,o=[];for(n=0,r=i.length;n<r;++n)t=i[n],t.index=n,t.zindex&&o.push(t);return e.zdirty=!1,e.zitems=o.sort(ns)}function is(e,t){var n,r,i=e.items;if(i&&i.length){var o=rs(e);if(o&&o.length){for(n=0,r=i.length;n<r;++n)i[n].zindex||t(i[n]);i=o}for(n=0,r=i.length;n<r;++n)t(i[n])}}function os(e,t){var n,r,i=e.items;if(!i||!i.length)return null;var o=rs(e);for(o&&o.length&&(i=o),r=i.length;--r>=0;)if(n=t(i[r]))return n;if(i===o)for(i=e.items,r=i.length;--r>=0;)if(!i[r].zindex&&(n=t(i[r])))return n;return null}function as(e){return function(t,n,r){is(n,(function(n){r&&!r.intersects(n.bounds)||ss(e,t,n,n)}))}}function us(e){return function(t,n,r){!n.items.length||r&&!r.intersects(n.bounds)||ss(e,t,n.items[0],n.items)}}function ss(e,t,n,r){var i=null==n.opacity?1:n.opacity;0!==i&&(e(t,r)||(n.fill&&Zu(t,n,i)&&t.fill(),n.stroke&&ts(t,n,i)&&t.stroke()))}var cs=function(){return!0};function ls(e){return e||(e=cs),function(t,n,r,i,o,a){return r*=t.pixelRatio,i*=t.pixelRatio,os(n,(function(n){var u=n.bounds;if((!u||u.contains(o,a))&&u)return e(t,n,r,i,o,a)?n:void 0}))}}function fs(e,t){return function(n,r,i,o){var a,u,s=Array.isArray(r)?r[0]:r,c=null==t?s.fill:t,l=s.stroke&&n.isPointInStroke;return l&&(a=s.strokeWidth,u=s.strokeCap,n.lineWidth=null!=a?a:1,n.lineCap=null!=u?u:"butt"),!e(n,r)&&(c&&n.isPointInPath(i,o)||l&&n.isPointInStroke(i,o))}}function ds(e){return ls(fs(e))}var hs=function(e,t){return"translate("+e+","+t+")"},ps=function(e){return hs(e.x||0,e.y||0)},gs=function(e,t){function n(e,n){e("transform",ps(n)),e("d",t(null,n))}function r(e,n){return t(Vu(e),n),Wu(e,n).translate(n.x||0,n.y||0)}function i(e,n){var r=n.x||0,i=n.y||0;e.translate(r,i),e.beginPath(),t(e,n),e.translate(-r,-i)}return{type:e,tag:"path",nested:!1,attr:n,bound:r,draw:as(i),pick:ds(i)}},ms=gs("arc",Ru);function vs(e,t){var n,r,i="horizontal"===e[0].orient?t[1]:t[0],o="horizontal"===e[0].orient?"y":"x",a=e.length,u=1/0;while(--a>=0)!1!==e[a].defined&&(r=Math.abs(e[a][o]-i),r<u&&(u=r,n=e[a]));return n}function bs(e,t){var n,r,i,o=Math.pow(e[0].strokeWidth||1,2),a=e.length;while(--a>=0)if(!1!==e[a].defined&&(n=e[a].x-t[0],r=e[a].y-t[1],i=n*n+r*r,i<o))return e[a];return null}function ys(e,t){var n,r,i,o=e.length;while(--o>=0)if(!1!==e[o].defined&&(n=e[o].x-t[0],r=e[o].y-t[1],i=n*n+r*r,n=e[o].size||1,i<n*n))return e[o];return null}var xs=function(e,t,n){function r(e,n){var r=n.mark.items;r.length&&e("d",t(null,r))}function i(e,n){var r=n.items;return 0===r.length?e:(t(Vu(e),r),Wu(e,r[0]))}function o(e,n){e.beginPath(),t(e,n)}var a=fs(o);function u(e,t,n,r,i,o){var u=t.items,s=t.bounds;return!u||!u.length||s&&!s.contains(i,o)?null:(n*=e.pixelRatio,r*=e.pixelRatio,a(e,u,n,r)?u[0]:null)}return{type:e,tag:"path",nested:!0,attr:r,bound:i,draw:us(o),pick:u,tip:n}},ws=xs("area",Bu,vs),Os=1;function Es(){Os=1}var ks=function(e,t,n){var r=t.clip,i=e._defs,o=t.clip_id||(t.clip_id="clip"+Os++),a=i.clipping[o]||(i.clipping[o]={id:o});return Object(H["E"])(r)?a.path=r(null):(a.width=n.width||0,a.height=n.height||0),"url(#"+o+")"},_s=.5;function As(e,t){e("transform",ps(t))}function Ss(e,t){var n=t.stroke?_s:0;e("class","background"),e("d",Iu(null,t,n,n))}function js(e,t,n){var r=t.clip?ks(n,t,t):null;e("clip-path",r)}function Cs(e,t){if(!t.clip&&t.items)for(var n=t.items,r=0,i=n.length;r<i;++r)e.union(n[r].bounds);return(t.clip||t.width||t.height)&&!t.noBound&&e.add(0,0).add(t.width||0,t.height||0),Wu(e,t),e.translate(t.x||0,t.y||0)}function Ds(e,t){var n=t.stroke?_s:0;e.beginPath(),Iu(e,t,n,n)}var Fs=fs(Ds);function Ms(e,t,n){var r=this;is(t,(function(t){var i,o=t.x||0,a=t.y||0,u=t.width||0,s=t.height||0;e.save(),e.translate(o,a),(t.stroke||t.fill)&&(i=null==t.opacity?1:t.opacity,i>0&&(Ds(e,t),t.fill&&Zu(e,t,i)&&e.fill(),t.stroke&&ts(e,t,i)&&e.stroke())),t.clip&&(e.beginPath(),e.rect(0,0,u,s),e.clip()),n&&n.translate(-o,-a),is(t,(function(t){r.draw(e,t,n)})),n&&n.translate(o,a),e.restore()}))}function zs(e,t,n,r,i,o){if(t.bounds&&!t.bounds.contains(i,o)||!t.items)return null;var a=this,u=n*e.pixelRatio,s=r*e.pixelRatio;return os(t,(function(c){var l,f,d,h;if(h=c.bounds,!h||h.contains(i,o))return f=c.x||0,d=c.y||0,e.save(),e.translate(f,d),f=i-f,d=o-d,l=os(c,(function(e){return Ns(e,f,d)?a.pick(e,n,r,f,d):null})),!l&&!1!==t.interactive&&(c.fill||c.stroke)&&Fs(e,c,u,s)&&(l=c),e.restore(),l||null}))}function Ns(e,t,n){return(!1!==e.interactive||"group"===e.marktype)&&e.bounds&&e.bounds.contains(t,n)}var Ts={type:"group",tag:"g",nested:!1,attr:As,bound:Cs,draw:Ms,pick:zs,background:Ss,foreground:js};function Rs(e,t){var n=e.image;return n&&n.url===e.url||(n={loaded:!1,width:0,height:0},t.loadImage(e.url).then((function(t){e.image=t,e.image.url=e.url}))),n}function Bs(e,t){return"center"===e?t/2:"right"===e?t:0}function Ps(e,t){return"middle"===e?t/2:"bottom"===e?t:0}function Is(e,t,n){var r=Rs(t,n),i=t.x||0,o=t.y||0,a=(null!=t.width?t.width:r.width)||0,u=(null!=t.height?t.height:r.height)||0,s=!1===t.aspect?"none":"xMidYMid";i-=Bs(t.align,a),o-=Ps(t.baseline,u),e("href",r.src||"","http://www.w3.org/1999/xlink","xlink:href"),e("transform",hs(i,o)),e("width",a),e("height",u),e("preserveAspectRatio",s)}function Ls(e,t){var n=t.image,r=t.x||0,i=t.y||0,o=(null!=t.width?t.width:n&&n.width)||0,a=(null!=t.height?t.height:n&&n.height)||0;return r-=Bs(t.align,o),i-=Ps(t.baseline,a),e.set(r,i,r+o,i+a)}function $s(e,t,n){var r=this;is(t,(function(t){if(!n||n.intersects(t.bounds)){var i,o,a,u,s=Rs(t,r),c=t.x||0,l=t.y||0,f=(null!=t.width?t.width:s.width)||0,d=(null!=t.height?t.height:s.height)||0;c-=Bs(t.align,f),l-=Ps(t.baseline,d),!1!==t.aspect&&(o=s.width/s.height,a=t.width/t.height,o===o&&a===a&&o!==a&&(a<o?(u=f/o,l+=(d-u)/2,d=u):(u=d*o,c+=(f-u)/2,f=u))),s.loaded&&(e.globalAlpha=null!=(i=t.opacity)?i:1,e.drawImage(s,c,l,f,d))}}))}var Us={type:"image",tag:"image",nested:!1,attr:Is,bound:Ls,draw:$s,pick:ls(),get:Rs,xOffset:Bs,yOffset:Ps},qs=xs("line",Pu,bs);function Ws(e,t){e("transform",ps(t)),e("d",t.path)}function Hs(e,t){var n=t.path;if(null==n)return!0;var r=t.pathCache;r&&r.path===n||((t.pathCache=r=Pa(n)).path=n),Ga(e,r,t.x,t.y)}function Gs(e,t){return Hs(Vu(e),t)?e.set(0,0,0,0):Wu(e,t)}var Ys={type:"path",tag:"path",nested:!1,attr:Ws,bound:Gs,draw:as(Hs),pick:ds(Hs)};function Vs(e,t){e("d",Iu(null,t))}function Xs(e,t){var n,r;return Wu(e.set(n=t.x||0,r=t.y||0,n+t.width||0,r+t.height||0),t)}function Js(e,t){e.beginPath(),Iu(e,t)}var Qs={type:"rect",tag:"path",nested:!1,attr:Vs,bound:Xs,draw:as(Js),pick:ds(Js)};function Ks(e,t){e("transform",ps(t)),e("x2",null!=t.x2?t.x2-(t.x||0):0),e("y2",null!=t.y2?t.y2-(t.y||0):0)}function Zs(e,t){var n,r;return Wu(e.set(n=t.x||0,r=t.y||0,null!=t.x2?t.x2:n,null!=t.y2?t.y2:r),t)}function ec(e,t,n){var r,i,o,a;return!(!t.stroke||!ts(e,t,n))&&(r=t.x||0,i=t.y||0,o=null!=t.x2?t.x2:r,a=null!=t.y2?t.y2:i,e.beginPath(),e.moveTo(r,i),e.lineTo(o,a),!0)}function tc(e,t,n){is(t,(function(t){if(!n||n.intersects(t.bounds)){var r=null==t.opacity?1:t.opacity;r&&ec(e,t,r)&&e.stroke()}}))}function nc(e,t,n,r){return!!e.isPointInStroke&&(ec(e,t,1)&&e.isPointInStroke(n,r))}var rc,ic,oc={type:"rule",tag:"line",nested:!1,attr:Ks,bound:Zs,draw:tc,pick:ls(nc)},ac=gs("shape",Lu),uc=gs("symbol",$u),sc={height:hc,measureWidth:fc,estimateWidth:cc,width:cc,canvas:pc};function cc(e){return ic=hc(e),lc(gc(e))}function lc(e){return~~(.8*e.length*ic)}function fc(e){return rc.font=bc(e),dc(gc(e))}function dc(e){return rc.measureText(e).width}function hc(e){return null!=e.fontSize?e.fontSize:11}function pc(e){rc=e&&(rc=ha(1,1))?rc.getContext("2d"):null,sc.width=rc?fc:cc}function gc(e){var t=e.text;return null==t?"":e.limit>0?mc(e):t+""}function mc(e){var t,n=+e.limit,r=e.text+"";if(rc?(rc.font=bc(e),t=dc):(ic=hc(e),t=lc),t(r)<n)return r;var i,o=e.ellipsis||"…",a="rtl"===e.dir,u=0,s=r.length;if(n-=t(o),a){while(u<s)i=u+s>>>1,t(r.slice(i))>n?u=i+1:s=i;return o+r.slice(u)}while(u<s)i=1+(u+s>>>1),t(r.slice(0,i))<n?u=i:s=i-1;return r.slice(0,u)+o}function vc(e,t){var n=e.font;return(t&&n?String(n).replace(/"/g,"'"):n)||"sans-serif"}function bc(e,t){return(e.fontStyle?e.fontStyle+" ":"")+(e.fontVariant?e.fontVariant+" ":"")+(e.fontWeight?e.fontWeight+" ":"")+hc(e)+"px "+vc(e,t)}function yc(e){var t=e.baseline,n=hc(e);return Math.round("top"===t?.79*n:"middle"===t?.3*n:"bottom"===t?-.21*n:0)}pc(!0);var xc={left:"start",center:"middle",right:"end"},wc=new ua;function Oc(e,t){var n,r=t.dx||0,i=(t.dy||0)+yc(t),o=t.x||0,a=t.y||0,u=t.angle||0,s=t.radius||0;s&&(n=(t.theta||0)-Math.PI/2,o+=s*Math.cos(n),a+=s*Math.sin(n)),e("text-anchor",xc[t.align]||"start"),u?(n=hs(o,a)+" rotate("+u+")",(r||i)&&(n+=" "+hs(r,i))):n=hs(o+r,a+i),e("transform",n)}function Ec(e,t,n){var r,i,o=sc.height(t),a=t.align,u=t.radius||0,s=t.x||0,c=t.y||0,l=t.dx||0,f=(t.dy||0)+yc(t)-Math.round(.8*o);return u&&(i=(t.theta||0)-Math.PI/2,s+=u*Math.cos(i),c+=u*Math.sin(i)),r=sc.width(t),"center"===a?l-=r/2:"right"===a&&(l-=r),e.set(l+=s,f+=c,l+r,f+o),t.angle&&!n&&e.rotate(t.angle*Math.PI/180,s,c),e.expand(n||!r?0:1)}function kc(e,t,n){is(t,(function(t){var r,i,o,a,u,s;n&&!n.intersects(t.bounds)||(s=gc(t))&&(r=null==t.opacity?1:t.opacity,0!==r&&(e.font=bc(t),e.textAlign=t.align||"left",i=t.x||0,o=t.y||0,(a=t.radius)&&(u=(t.theta||0)-Math.PI/2,i+=a*Math.cos(u),o+=a*Math.sin(u)),t.angle&&(e.save(),e.translate(i,o),e.rotate(t.angle*Math.PI/180),i=o=0),i+=t.dx||0,o+=(t.dy||0)+yc(t),t.fill&&Zu(e,t,r)&&e.fillText(s,i,o),t.stroke&&ts(e,t,r)&&e.strokeText(s,i,o),t.angle&&e.restore()))}))}function _c(e,t,n,r,i,o){if(t.fontSize<=0)return!1;if(!t.angle)return!0;var a=Ec(wc,t,!0),u=-t.angle*Math.PI/180,s=Math.cos(u),c=Math.sin(u),l=t.x,f=t.y,d=s*i-c*o+(l-l*s+f*c),h=c*i+s*o+(f-l*c-f*s);return a.contains(d,h)}var Ac={type:"text",tag:"text",nested:!1,attr:Oc,bound:Ec,draw:kc,pick:ls(_c)},Sc=xs("trail",Uu,ys),jc={arc:ms,area:ws,group:Ts,image:Us,line:qs,path:Ys,rect:Qs,rule:oc,shape:ac,symbol:uc,text:Ac,trail:Sc},Cc=function(e,t,n){var r=jc[e.mark.marktype],i=t||r.bound;return r.nested&&(e=e.mark),i(e.bounds||(e.bounds=new ua),e,n)},Dc={mark:null},Fc=function(e,t,n){var r,i,o,a,u=jc[e.marktype],s=u.bound,c=e.items,l=c&&c.length;if(u.nested)return l?o=c[0]:(Dc.mark=e,o=Dc),a=Cc(o,s,n),t=t&&t.union(a)||a,t;if(t=t||e.bounds&&e.bounds.clear()||new ua,l)for(r=0,i=c.length;r<i;++r)t.union(Cc(c[r],s,n));return e.bounds=t},Mc=["marktype","name","role","interactive","clip","items","zindex","x","y","width","height","align","baseline","fill","fillOpacity","opacity","stroke","strokeOpacity","strokeWidth","strokeCap","strokeDash","strokeDashOffset","startAngle","endAngle","innerRadius","outerRadius","cornerRadius","padAngle","interpolate","tension","orient","defined","url","path","x2","y2","size","shape","text","angle","theta","radius","dx","dy","font","fontSize","fontWeight","fontStyle","fontVariant"];function zc(e,t){return JSON.stringify(e,Mc,t)}function Nc(e){var t="string"===typeof e?JSON.parse(e):e;return Tc(t)}function Tc(e){var t,n,r,i=e.marktype,o=e.items;if(o)for(n=0,r=o.length;n<r;++n)t=i?"mark":"group",o[n][t]=e,o[n].zindex&&(o[n][t].zdirty=!0),"group"===(i||t)&&Tc(o[n]);return i&&Fc(e),e}function Rc(e){arguments.length?this.root=Nc(e):(this.root=Pc({marktype:"group",name:"root",role:"frame"}),this.root.items=[new da(this.root)])}var Bc=Rc.prototype;function Pc(e,t){return{bounds:new ua,clip:!!e.clip,group:t,interactive:!1!==e.interactive,items:[],marktype:e.marktype,name:e.name||void 0,role:e.role||void 0,zindex:e.zindex||0}}function Ic(e,t,n){return!e&&"undefined"!==typeof document&&document.createElement&&(e=document),e?n?e.createElementNS(n,t):e.createElement(t):null}function Lc(e,t){t=t.toLowerCase();for(var n=e.childNodes,r=0,i=n.length;r<i;++r)if(n[r].tagName.toLowerCase()===t)return n[r]}function $c(e,t,n,r){var i,o=e.childNodes[t];return o&&o.tagName.toLowerCase()===n.toLowerCase()||(i=o||null,o=Ic(e.ownerDocument,n,r),e.insertBefore(o,i)),o}function Uc(e,t){var n=e.childNodes,r=n.length;while(r>t)e.removeChild(n[--r]);return e}function qc(e){return"mark-"+e.marktype+(e.role?" role-"+e.role:"")+(e.name?" "+e.name:"")}Bc.toJSON=function(e){return zc(this.root,e||0)},Bc.mark=function(e,t,n){t=t||this.root.items[0];var r=Pc(e,t);return t.items[n]=r,r.zindex&&(r.group.zdirty=!0),r};var Wc=function(e,t){var n=t.getBoundingClientRect();return[e.clientX-n.left-(t.clientLeft||0),e.clientY-n.top-(t.clientTop||0)]},Hc=function(e,t,n,r){var i,o,a=e&&e.mark;if(a&&(i=jc[a.marktype]).tip){o=Wc(t,n),o[0]-=r[0],o[1]-=r[1];while(e=e.mark.group)o[0]-=e.x||0,o[1]-=e.y||0;e=i.tip(a.items,o)}return e};function Gc(e,t){this._active=null,this._handlers={},this._loader=e||ke(),this._tooltip=t||Yc}function Yc(e,t,n,r){e.element().setAttribute("title",r||"")}var Vc=Gc.prototype;function Xc(e){this._el=null,this._bgcolor=null,this._loader=new ga(e)}Vc.initialize=function(e,t,n){return this._el=e,this._obj=n||null,this.origin(t)},Vc.element=function(){return this._el},Vc.canvas=function(){return this._el&&this._el.firstChild},Vc.origin=function(e){return arguments.length?(this._origin=e||[0,0],this):this._origin.slice()},Vc.scene=function(e){return arguments.length?(this._scene=e,this):this._scene},Vc.on=function(){},Vc.off=function(){},Vc._handlerIndex=function(e,t,n){for(var r=e?e.length:0;--r>=0;)if(e[r].type===t&&(!n||e[r].handler===n))return r;return-1},Vc.handlers=function(e){var t,n=this._handlers,r=[];if(e)r.push.apply(r,n[this.eventName(e)]);else for(t in n)r.push.apply(r,n[t]);return r},Vc.eventName=function(e){var t=e.indexOf(".");return t<0?e:e.slice(0,t)},Vc.handleHref=function(e,t,n){this._loader.sanitize(n,{context:"href"}).then((function(t){var n=new MouseEvent(e.type,e),r=Ic(null,"a");for(var i in t)r.setAttribute(i,t[i]);r.dispatchEvent(n)})).catch((function(){}))},Vc.handleTooltip=function(e,t,n){if(t&&null!=t.tooltip){t=Hc(t,e,this.canvas(),this._origin);var r=n&&t&&t.tooltip||null;this._tooltip.call(this._obj,this,e,t,r)}},Vc.getItemBoundingClientRect=function(e){if(t=this.canvas()){var t,n=t.getBoundingClientRect(),r=this._origin,i=e.bounds,o=i.x1+r[0]+n.left,a=i.y1+r[1]+n.top,u=i.width(),s=i.height();while(e.mark&&(e=e.mark.group))o+=e.x||0,a+=e.y||0;return{x:o,y:a,width:u,height:s,left:o,top:a,right:o+u,bottom:a+s}}};var Jc=Xc.prototype;Jc.initialize=function(e,t,n,r,i){return this._el=e,this.resize(t,n,r,i)},Jc.element=function(){return this._el},Jc.canvas=function(){return this._el&&this._el.firstChild},Jc.background=function(e){return 0===arguments.length?this._bgcolor:(this._bgcolor=e,this)},Jc.resize=function(e,t,n,r){return this._width=e,this._height=t,this._origin=n||[0,0],this._scale=r||1,this},Jc.dirty=function(){},Jc.render=function(e){var t=this;return t._call=function(){t._render(e)},t._call(),t._call=null,t},Jc._render=function(){},Jc.renderAsync=function(e){var t=this.render(e);return this._ready?this._ready.then((function(){return t})):Promise.resolve(t)},Jc._load=function(e,t){var n=this,r=n._loader[e](t);if(!n._ready){var i=n._call;n._ready=n._loader.ready().then((function(e){e&&i(),n._ready=null}))}return r},Jc.sanitizeURL=function(e){return this._load("sanitizeURL",e)},Jc.loadImage=function(e){return this._load("loadImage",e)};var Qc=["keydown","keypress","keyup","dragenter","dragleave","dragover","mousedown","mouseup","mousemove","mouseout","mouseover","click","dblclick","wheel","mousewheel","touchstart","touchmove","touchend"],Kc="mousemove",Zc="mouseout",el="click";function tl(e,t){Gc.call(this,e,t),this._down=null,this._touch=null,this._first=!0}var nl=Object(H["z"])(tl,Gc);function rl(e,t,n){return function(r){var i=this._active,o=this.pickEvent(r);o===i||(i&&i.exit||this.fire(n,r),this._active=o,this.fire(t,r)),this.fire(e,r)}}function il(e){return function(t){this.fire(e,t),this._active=null}}nl.initialize=function(e,t,n){var r=this._canvas=e&&Lc(e,"canvas");if(r){var i=this;this.events.forEach((function(e){r.addEventListener(e,(function(t){nl[e]?nl[e].call(i,t):i.fire(e,t)}))}))}return Gc.prototype.initialize.call(this,e,t,n)},nl.canvas=function(){return this._canvas},nl.context=function(){return this._canvas.getContext("2d")},nl.events=Qc,nl.DOMMouseScroll=function(e){this.fire("mousewheel",e)},nl.mousemove=rl("mousemove","mouseover","mouseout"),nl.dragover=rl("dragover","dragenter","dragleave"),nl.mouseout=il("mouseout"),nl.dragleave=il("dragleave"),nl.mousedown=function(e){this._down=this._active,this.fire("mousedown",e)},nl.click=function(e){this._down===this._active&&(this.fire("click",e),this._down=null)},nl.touchstart=function(e){this._touch=this.pickEvent(e.changedTouches[0]),this._first&&(this._active=this._touch,this._first=!1),this.fire("touchstart",e,!0)},nl.touchmove=function(e){this.fire("touchmove",e,!0)},nl.touchend=function(e){this.fire("touchend",e,!0),this._touch=null},nl.fire=function(e,t,n){var r,i,o=n?this._touch:this._active,a=this._handlers[e];if(t.vegaType=e,e===el&&o&&o.href?this.handleHref(t,o,o.href):e!==Kc&&e!==Zc||this.handleTooltip(t,o,e!==Zc),a)for(r=0,i=a.length;r<i;++r)a[r].handler.call(this._obj,t,o)},nl.on=function(e,t){var n=this.eventName(e),r=this._handlers,i=this._handlerIndex(r[n],e,t);return i<0&&(r[n]||(r[n]=[])).push({type:e,handler:t}),this},nl.off=function(e,t){var n=this.eventName(e),r=this._handlers[n],i=this._handlerIndex(r,e,t);return i>=0&&r.splice(i,1),this},nl.pickEvent=function(e){var t=Wc(e,this._canvas),n=this._origin;return this.pick(this._scene,t[0],t[1],t[0]-n[0],t[1]-n[1])},nl.pick=function(e,t,n,r,i){var o=this.context(),a=jc[e.marktype];return a.pick.call(this,o,e,t,n,r,i)};var ol=function(e,t){var n=t.clip;if(e.save(),e.beginPath(),Object(H["E"])(n))n(e);else{var r=t.group;e.rect(0,0,r.width||0,r.height||0)}e.clip()};function al(){return"undefined"!==typeof window&&window.devicePixelRatio||1}var ul=al(),sl=function(e,t,n,r,i){var o="undefined"!==typeof HTMLElement&&e instanceof HTMLElement&&null!=e.parentNode,a=e.getContext("2d"),u=o?ul:i;return e.width=t*u,e.height=n*u,o&&1!==u&&(e.style.width=t+"px",e.style.height=n+"px"),a.pixelRatio=u,a.setTransform(u,0,0,u,u*r[0],u*r[1]),e};function cl(e){Xc.call(this,e),this._redraw=!1,this._dirty=new ua}var ll=Object(H["z"])(cl,Xc),fl=Xc.prototype,dl=new ua;function hl(e,t,n){return t.expand(1).round(),t.translate(-n[0]%1,-n[1]%1),e.beginPath(),e.rect(t.x1,t.y1,t.width(),t.height()),e.clip(),t}function pl(e,t){if(null==t)return e;for(var n=dl.clear().union(e);null!=t;t=t.mark.group)n.translate(t.x||0,t.y||0);return n}function gl(e,t){Gc.call(this,e,t);var n=this;n._hrefHandler=vl(n,(function(e,t){t&&t.href&&n.handleHref(e,t,t.href)})),n._tooltipHandler=vl(n,(function(e,t){n.handleTooltip(e,t,e.type!==Zc)}))}ll.initialize=function(e,t,n,r,i){return this._canvas=ha(1,1),e&&(Uc(e,0).appendChild(this._canvas),this._canvas.setAttribute("class","marks")),fl.initialize.call(this,e,t,n,r,i)},ll.resize=function(e,t,n,r){return fl.resize.call(this,e,t,n,r),sl(this._canvas,this._width,this._height,this._origin,this._scale),this._redraw=!0,this},ll.canvas=function(){return this._canvas},ll.context=function(){return this._canvas?this._canvas.getContext("2d"):null},ll.dirty=function(e){var t=pl(e.bounds,e.mark.group);this._dirty.union(t)},ll._render=function(e){var t=this.context(),n=this._origin,r=this._width,i=this._height,o=this._dirty;return t.save(),this._redraw||o.empty()?(this._redraw=!1,o=null):o=hl(t,o,n),this.clear(-n[0],-n[1],r,i),this.draw(t,e,o),t.restore(),this._dirty.clear(),this},ll.draw=function(e,t,n){var r=jc[t.marktype];t.clip&&ol(e,t),r.draw.call(this,e,t,n),t.clip&&e.restore()},ll.clear=function(e,t,n,r){var i=this.context();i.clearRect(e,t,n,r),null!=this._bgcolor&&(i.fillStyle=this._bgcolor,i.fillRect(e,t,n,r))};var ml=Object(H["z"])(gl,Gc);function vl(e,t){return function(n){var r=n.target,i=r.__data__;n.vegaType=n.type,i=Array.isArray(i)?i[0]:i,t.call(e._obj,n,i)}}function bl(e,t,n){var r,i,o="<"+e;if(t)for(r in t)i=t[r],null!=i&&(o+=" "+r+'="'+i+'"');return n&&(o+=" "+n),o+">"}function yl(e){return"</"+e+">"}ml.initialize=function(e,t,n){var r=this._svg;return r&&(r.removeEventListener(el,this._hrefHandler),r.removeEventListener(Kc,this._tooltipHandler),r.removeEventListener(Zc,this._tooltipHandler)),this._svg=r=e&&Lc(e,"svg"),r&&(r.addEventListener(el,this._hrefHandler),r.addEventListener(Kc,this._tooltipHandler),r.addEventListener(Zc,this._tooltipHandler)),Gc.prototype.initialize.call(this,e,t,n)},ml.canvas=function(){return this._svg},ml.on=function(e,t){var n=this.eventName(e),r=this._handlers,i=this._handlerIndex(r[n],e,t);if(i<0){var o={type:e,handler:t,listener:vl(this,t)};(r[n]||(r[n]=[])).push(o),this._svg&&this._svg.addEventListener(n,o.listener)}return this},ml.off=function(e,t){var n=this.eventName(e),r=this._handlers[n],i=this._handlerIndex(r,e,t);return i>=0&&(this._svg&&this._svg.removeEventListener(n,r[i].listener),r.splice(i,1)),this};var xl={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},wl={fill:"fill",fillOpacity:"fill-opacity",stroke:"stroke",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",strokeCap:"stroke-linecap",strokeJoin:"stroke-linejoin",strokeDash:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeMiterLimit:"stroke-miterlimit",opacity:"opacity"},Ol=Object.keys(wl),El=xl.xmlns;function kl(e){Xc.call(this,e),this._dirtyID=1,this._dirty=[],this._svg=null,this._root=null,this._defs=null}var _l=Object(H["z"])(kl,Xc),Al=Xc.prototype;function Sl(e,t,n){var r,i,o;for(e=$c(e,n,"linearGradient",El),e.setAttribute("id",t.id),e.setAttribute("x1",t.x1),e.setAttribute("x2",t.x2),e.setAttribute("y1",t.y1),e.setAttribute("y2",t.y2),r=0,i=t.stops.length;r<i;++r)o=$c(e,r,"stop",El),o.setAttribute("offset",t.stops[r].offset),o.setAttribute("stop-color",t.stops[r].color);Uc(e,r)}function jl(e,t,n){var r;e=$c(e,n,"clipPath",El),e.setAttribute("id",t.id),t.path?(r=$c(e,0,"path",El),r.setAttribute("d",t.path)):(r=$c(e,0,"rect",El),r.setAttribute("x",0),r.setAttribute("y",0),r.setAttribute("width",t.width),r.setAttribute("height",t.height))}function Cl(e,t){for(;e&&e.dirty!==t;e=e.mark.group){if(e.dirty=t,!e.mark||e.mark.dirty===t)return;e.mark.dirty=t}}function Dl(e,t,n){t=t.lastChild;var r,i=0;is(n,(function(n){r=e.draw(t,n,r),++i})),Uc(t,1+i)}function Fl(e,t,n,r,i){var o,a=e._svg;if(!a&&(o=t.ownerDocument,a=Ic(o,r,El),e._svg=a,e.mark&&(a.__data__=e,a.__values__={fill:"default"},"g"===r))){var u=Ic(o,"path",El);u.setAttribute("class","background"),a.appendChild(u),u.__data__=e;var s=Ic(o,"g",El);a.appendChild(s),s.__data__=e}return(a.ownerSVGElement!==i||Ml(e)&&a.previousSibling!==n)&&t.insertBefore(a,n?n.nextSibling:t.firstChild),a}function Ml(e){var t=e.mark||e.group;return t&&t.items.length>1}_l.initialize=function(e,t,n,r){return e&&(this._svg=$c(e,0,"svg",El),this._svg.setAttribute("class","marks"),Uc(e,1),this._root=$c(this._svg,0,"g",El),Uc(this._svg,1)),this._defs={gradient:{},clipping:{}},this.background(this._bgcolor),Al.initialize.call(this,e,t,n,r)},_l.background=function(e){return arguments.length&&this._svg&&this._svg.style.setProperty("background-color",e),Al.background.apply(this,arguments)},_l.resize=function(e,t,n,r){return Al.resize.call(this,e,t,n,r),this._svg&&(this._svg.setAttribute("width",this._width*this._scale),this._svg.setAttribute("height",this._height*this._scale),this._svg.setAttribute("viewBox","0 0 "+this._width+" "+this._height),this._root.setAttribute("transform","translate("+this._origin+")")),this._dirty=[],this},_l.canvas=function(){return this._svg},_l.svg=function(){if(!this._svg)return null;var e={class:"marks",width:this._width*this._scale,height:this._height*this._scale,viewBox:"0 0 "+this._width+" "+this._height};for(var t in xl)e[t]=xl[t];var n=this._bgcolor?bl("rect",{width:this._width,height:this._height,style:"fill: "+this._bgcolor+";"})+yl("rect"):"";return bl("svg",e)+n+this._svg.innerHTML+yl("svg")},_l._render=function(e){return this._dirtyCheck()&&(this._dirtyAll&&this._resetDefs(),this.draw(this._root,e),Uc(this._root,1)),this.updateDefs(),this._dirty=[],++this._dirtyID,this},_l.updateDefs=function(){var e,t=this._svg,n=this._defs,r=n.el,i=0;for(e in n.gradient)r||(n.el=r=$c(t,0,"defs",El)),Sl(r,n.gradient[e],i++);for(e in n.clipping)r||(n.el=r=$c(t,0,"defs",El)),jl(r,n.clipping[e],i++);r&&(0===i?(t.removeChild(r),n.el=null):Uc(r,i))},_l._resetDefs=function(){var e=this._defs;e.gradient={},e.clipping={}},_l.dirty=function(e){e.dirty!==this._dirtyID&&(e.dirty=this._dirtyID,this._dirty.push(e))},_l.isDirty=function(e){return this._dirtyAll||!e._svg||e.dirty===this._dirtyID},_l._dirtyCheck=function(){this._dirtyAll=!0;var e=this._dirty;if(!e.length)return!0;var t,n,r,i,o,a,u,s=++this._dirtyID;for(o=0,a=e.length;o<a;++o)t=e[o],n=t.mark,n.marktype!==r&&(r=n.marktype,i=jc[r]),n.zdirty&&n.dirty!==s&&(this._dirtyAll=!1,Cl(t,s),n.items.forEach((function(e){e.dirty=s}))),n.zdirty||(t.exit?(i.nested&&n.items.length?(u=n.items[0],u._svg&&this._update(i,u._svg,u)):t._svg&&(u=t._svg.parentNode,u&&u.removeChild(t._svg)),t._svg=null):(t=i.nested?n.items[0]:t,t._update!==s&&(t._svg&&t._svg.ownerSVGElement?this._update(i,t._svg,t):(this._dirtyAll=!1,Cl(t,s)),t._update=s)));return!this._dirtyAll},_l.draw=function(e,t,n){if(!this.isDirty(t))return t._svg;var r,i=this,o=this._svg,a=jc[t.marktype],u=!1===t.interactive?"none":null,s="g"===a.tag,c=null,l=0;function f(e){var t=i.isDirty(e),n=Fl(e,r,c,a.tag,o);t&&(i._update(a,n,e),s&&Dl(i,n,e)),c=n,++l}return r=Fl(t,e,n,"g",o),r.setAttribute("class",qc(t)),s||r.style.setProperty("pointer-events",u),t.clip?r.setAttribute("clip-path",ks(i,t,t.group)):r.removeAttribute("clip-path"),a.nested?t.items.length&&f(t.items[0]):is(t,f),Uc(r,l),r};var zl=null,Nl=null,Tl={group:function(e,t,n){Nl=t.__values__,zl=t.childNodes[1],e.foreground(Bl,n,this),zl=t.childNodes[0],e.background(Bl,n,this);var r=!1===n.mark.interactive?"none":null;r!==Nl.events&&(zl.style.setProperty("pointer-events",r),Nl.events=r)},text:function(e,t,n){var r;r=gc(n),r!==Nl.text&&(t.textContent=r,Nl.text=r),Rl(t,"font-family",vc(n)),Rl(t,"font-size",hc(n)+"px"),Rl(t,"font-style",n.fontStyle),Rl(t,"font-variant",n.fontVariant),Rl(t,"font-weight",n.fontWeight)}};function Rl(e,t,n){n!==Nl[t]&&(null==n?e.style.removeProperty(t):e.style.setProperty(t,n+""),Nl[t]=n)}function Bl(e,t,n){t!==Nl[e]&&(null!=t?n?zl.setAttributeNS(n,e,t):zl.setAttribute(e,t):n?zl.removeAttributeNS(n,e):zl.removeAttribute(e),Nl[e]=t)}function Pl(){var e;return"undefined"===typeof window?"":(e=window.location).hash?e.href.slice(0,-e.hash.length):e.href}function Il(e){Xc.call(this,e),this._text={head:"",bg:"",root:"",foot:"",defs:"",body:""},this._defs={gradient:{},clipping:{}}}_l._update=function(e,t,n){zl=t,Nl=t.__values__,e.attr(Bl,n,this);var r=Tl[e.type];r&&r.call(this,e,t,n),this.style(zl,n)},_l.style=function(e,t){var n,r,i,o,a;if(null!=t)for(n=0,r=Ol.length;n<r;++n)i=Ol[n],a=t[i],"font"===i&&(a=vc(t)),a!==Nl[i]&&(o=wl[i],null==a?"fill"===o?e.style.setProperty(o,"none"):e.style.removeProperty(o):(a.id&&(this._defs.gradient[a.id]=a,a="url("+Pl()+"#"+a.id+")"),e.style.setProperty(o,a+"")),Nl[i]=a)};var Ll,$l=Object(H["z"])(Il,Xc),Ul=Xc.prototype;function ql(e,t,n,r){Ll[r||e]=t}function Wl(e,t,n,r){if(null==e)return"";var i,o,a,u,s,c="";for("bgrect"===n&&!1===t.interactive&&(c+="pointer-events: none; "),"text"===n&&(c+="font-family: "+vc(e)+"; ",c+="font-size: "+hc(e)+"px; ",e.fontStyle&&(c+="font-style: "+e.fontStyle+"; "),e.fontVariant&&(c+="font-variant: "+e.fontVariant+"; "),e.fontWeight&&(c+="font-weight: "+e.fontWeight+"; ")),i=0,o=Ol.length;i<o;++i)a=Ol[i],u=wl[a],s=e[a],null==s?"fill"===u&&(c+="fill: none; "):"transparent"!==s||"fill"!==u&&"stroke"!==u?(s.id&&(r.gradient[s.id]=s,s="url(#"+s.id+")"),c+=u+": "+s+"; "):c+=u+": none; ";return c?'style="'+c.trim()+'"':null}function Hl(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}$l.resize=function(e,t,n,r){Ul.resize.call(this,e,t,n,r);var i=this._origin,o=this._text,a={class:"marks",width:this._width*this._scale,height:this._height*this._scale,viewBox:"0 0 "+this._width+" "+this._height};for(var u in xl)a[u]=xl[u];o.head=bl("svg",a);var s=this._bgcolor;return"transparent"!==s&&"none"!==s||(s=null),o.bg=s?bl("rect",{width:this._width,height:this._height,style:"fill: "+s+";"})+yl("rect"):"",o.root=bl("g",{transform:"translate("+i+")"}),o.foot=yl("g")+yl("svg"),this},$l.background=function(){var e=Ul.background.apply(this,arguments);return arguments.length&&this._text.head&&this.resize(this._width,this._height,this._origin,this._scale),e},$l.svg=function(){var e=this._text;return e.head+e.bg+e.defs+e.root+e.body+e.foot},$l._render=function(e){return this._text.body=this.mark(e),this._text.defs=this.buildDefs(),this},$l.buildDefs=function(){var e,t,n,r,i=this._defs,o="";for(t in i.gradient){for(n=i.gradient[t],r=n.stops,o+=bl("linearGradient",{id:t,x1:n.x1,x2:n.x2,y1:n.y1,y2:n.y2}),e=0;e<r.length;++e)o+=bl("stop",{offset:r[e].offset,"stop-color":r[e].color})+yl("stop");o+=yl("linearGradient")}for(t in i.clipping)n=i.clipping[t],o+=bl("clipPath",{id:t}),n.path?o+=bl("path",{d:n.path})+yl("path"):o+=bl("rect",{x:0,y:0,width:n.width,height:n.height})+yl("rect"),o+=yl("clipPath");return o.length>0?bl("defs")+o+yl("defs"):""},$l.attributes=function(e,t){return Ll={},e(ql,t,this),Ll},$l.href=function(e){var t,n=this,r=e.href;if(r){if(t=n._hrefs&&n._hrefs[r])return t;n.sanitizeURL(r).then((function(e){e["xlink:href"]=e.href,e.href=null,(n._hrefs||(n._hrefs={}))[r]=e}))}return null},$l.mark=function(e){var t,n=this,r=jc[e.marktype],i=r.tag,o=this._defs,a="";function u(u){var s=n.href(u);s&&(a+=bl("a",s)),t="g"!==i?Wl(u,e,i,o):null,a+=bl(i,n.attributes(r.attr,u),t),"text"===i?a+=Hl(gc(u)):"g"===i&&(a+=bl("path",n.attributes(r.background,u),Wl(u,e,"bgrect",o))+yl("path"),a+=bl("g",n.attributes(r.foreground,u))+n.markGroup(u)+yl("g")),a+=yl(i),s&&(a+=yl("a"))}return"g"!==i&&!1===e.interactive&&(t='style="pointer-events: none;"'),a+=bl("g",{class:qc(e),"clip-path":e.clip?ks(n,e,e.group):null},t),r.nested?e.items&&e.items.length&&u(e.items[0]):is(e,u),a+yl("g")},$l.markGroup=function(e){var t=this,n="";return is(e,(function(e){n+=t.mark(e)})),n};var Gl="canvas",Yl="png",Vl="svg",Xl="none",Jl={Canvas:Gl,PNG:Yl,SVG:Vl,None:Xl},Ql={};function Kl(e,t){return e=String(e||"").toLowerCase(),arguments.length>1?(Ql[e]=t,this):Ql[e]}Ql[Gl]=Ql[Yl]={renderer:cl,headless:cl,handler:tl},Ql[Vl]={renderer:kl,headless:Il,handler:gl},Ql[Xl]={};var Zl=new ua,ef=function(e){var t=e.clip;if(Object(H["E"])(t))t(Vu(Zl.clear()));else{if(!t)return;Zl.set(0,0,e.group.width,e.group.height)}e.bounds.intersect(Zl)},tf=1e-9;function nf(e,t,n){return e===t||("path"===n?rf(e,t):e instanceof Date&&t instanceof Date?+e===+t:Object(H["F"])(e)&&Object(H["F"])(t)?Math.abs(e-t)<=tf:e&&t&&(Object(H["G"])(e)||Object(H["G"])(t))?null!=e&&null!=t&&of(e,t):e==t)}function rf(e,t){return nf(Pa(e),Pa(t))}function of(e,t){var n,r,i=Object.keys(e),o=Object.keys(t);if(i.length!==o.length)return!1;for(i.sort(),o.sort(),r=i.length-1;r>=0;r--)if(i[r]!=o[r])return!1;for(r=i.length-1;r>=0;r--)if(n=i[r],!nf(e[n],t[n],n))return!1;return typeof e===typeof t}function af(e){Kt.call(this,null,e)}var uf=Object(H["z"])(af,Kt);function sf(e,t,n){return t(e.bounds.clear(),e,n)}uf.transform=function(e,t){var n,r=t.dataflow,i=e.mark,o=i.marktype,a=jc[o],u=a.bound,s=i.bounds;return a.nested?(i.items.length&&r.dirty(i.items[0]),s=sf(i,u),i.items.forEach((function(e){e.bounds.clear().union(s)}))):o===Bo||e.modified()?(t.visit(t.MOD,(function(e){r.dirty(e)})),s.clear(),i.items.forEach((function(e){s.union(sf(e,u))})),i.role===Uo&&t.reflow()):(n=t.changed(t.REM),t.visit(t.ADD,(function(e){s.union(sf(e,u))})),t.visit(t.MOD,(function(e){n=n||s.alignsWith(e.bounds),r.dirty(e),s.union(sf(e,u))})),n&&(s.clear(),i.items.forEach((function(e){s.union(e.bounds)})))),ef(i),t.modifies("bounds")};var cf=":vega_identifier:";function lf(e){Kt.call(this,0,e)}lf.Definition={type:"Identifier",metadata:{modifies:!0},params:[{name:"as",type:"string",required:!0}]};var ff=Object(H["z"])(lf,Kt);function df(e){var t=e._signals[cf];return t||(e._signals[cf]=t=e.add(0)),t}function hf(e){Kt.call(this,null,e)}ff.transform=function(e,t){var n=df(t.dataflow),r=n.value,i=e.as;return t.visit(t.ADD,(function(e){e[i]||(e[i]=++r)})),n.set(this.value=r),t};var pf=Object(H["z"])(hf,Kt);function gf(e){var t=e.groups,n=e.parent;return t&&1===t.size?t.get(Object.keys(t.object)[0]):t&&n?t.lookup(n):null}function mf(e){Kt.call(this,null,e)}pf.transform=function(e,t){var n=this.value;n||(n=t.dataflow.scenegraph().mark(e.markdef,gf(e),e.index),n.group.context=e.context,e.context.group||(e.context.group=n.group),n.source=this,n.clip=e.clip,n.interactive=e.interactive,this.value=n);var r=n.marktype===Bo?da:fa;return t.visit(t.ADD,(function(e){r.call(e,n)})),(e.modified("clip")||e.modified("interactive"))&&(n.clip=e.clip,n.interactive=!!e.interactive,n.zdirty=!0,t.reflow()),n.items=t.source,t};var vf=Object(H["z"])(mf,Kt),bf={parity:function(e){return e.filter((function(e,t){return t%2?e.opacity=0:1}))},greedy:function(e){var t;return e.filter((function(e,n){return n&&yf(t.bounds,e.bounds)?e.opacity=0:(t=e,1)}))}};function yf(e,t){return!(e.x2-1<t.x1||e.x1+1>t.x2||e.y2-1<t.y1||e.y1+1>t.y2)}function xf(e){for(var t,n=1,r=e.length,i=e[0].bounds;n<r;i=t,++n)if(yf(i,t=e[n].bounds))return!0}function wf(e){var t=e.bounds;return t.width()>1&&t.height()>1}function Of(e,t,n){var r=e.range(),i=new ua;return t===So||t===Do?i.set(r[0],-1/0,r[1],1/0):i.set(-1/0,r[0],1/0,r[1]),i.expand(n||1),function(e){return i.encloses(e.bounds)}}function Ef(e){return e.forEach((function(e){e.opacity=1})),e}function kf(e,t){return e.reflow(t.modified()).modifies("opacity")}function _f(e){Kt.call(this,null,e)}vf.transform=function(e,t){var n,r,i=bf[e.method]||bf.parity,o=t.materialize(t.SOURCE).source;if(o){if(!e.method)return e.modified("method")&&(Ef(o),t=kf(t,e)),t;if(e.sort&&(o=o.slice().sort(e.sort)),"greedy"===e.method&&(o=o.filter(wf)),n=Ef(o),t=kf(t,e),n.length>=3&&xf(n)){do{n=i(n)}while(n.length>=3&&xf(n));n.length<3&&!Object(H["V"])(o).opacity&&(n.length>1&&(Object(H["V"])(n).opacity=0),Object(H["V"])(o).opacity=1)}return e.boundScale&&e.boundTolerance>=0&&(r=Of(e.boundScale,e.boundOrient,+e.boundTolerance),o.forEach((function(e){r(e)||(e.opacity=0)}))),t}};var Af=Object(H["z"])(_f,Kt);function Sf(e){for(var t,n,r=e.items,i=r.length,o=0,a={marks:[],rowheaders:[],rowfooters:[],colheaders:[],colfooters:[],rowtitle:null,coltitle:null};o<i;++o)if(t=r[o],n=t.items,t.marktype===Bo)switch(t.role){case Po:case Uo:break;case qo:jf(n,a.rowheaders);break;case Wo:jf(n,a.rowfooters);break;case Go:jf(n,a.colheaders);break;case Yo:jf(n,a.colfooters);break;case Ho:a.rowtitle=n[0];break;case Vo:a.coltitle=n[0];break;default:jf(n,a.marks)}return a}function jf(e,t){for(var n=0,r=e.length;n<r;++n)t.push(e[n])}function Cf(e){return{x1:0,y1:0,x2:e.width||0,y2:e.height||0}}function Df(e){var t=e.bounds.clone();return t.empty()?t.set(0,0,0,0):t.translate(-(e.x||0),-(e.y||0))}function Ff(e,t){return"x1"===t?e.x||0:"y1"===t?e.y||0:"x2"===t?(e.x||0)+(e.width||0):"y2"===t?(e.y||0)+(e.height||0):void 0}function Mf(e,t){return e.bounds[t]}function zf(e,t,n){var r=Object(H["G"])(e)?e[t]:e;return null!=r?r:void 0!==n?n:0}function Nf(e){return e<0?Math.ceil(-e):0}function Tf(e,t,n){var r,i,o,a,u,s,c,l,f,d,h,p,g=Sf(t,n),m=g.marks,v=n.bounds===ia,b=v?Cf:Df,y=new ua(0,0,0,0),x=zf(n.align,oa),w=zf(n.align,aa),O=zf(n.padding,oa),E=zf(n.padding,aa),k=n.offset,_=t.columns||n.columns||m.length,A=_<0?1:Math.ceil(m.length/_),S=A*_,j=[],C=[],D=0,F=0,M=[],z=[],N=0,T=0,R=m.length;for(i=0;i<_;++i)C[i]=0;for(i=0;i<A;++i)z[i]=0;for(i=0;i<R;++i)u=b(m[i]),o=i%_,a=~~(i/_),c=Math.ceil(b(m[i]).x2),l=Math.ceil(b(m[i]).y2),D=Math.max(D,c),N=Math.max(N,l),C[o]=Math.max(C[o],c),z[a]=Math.max(z[a],l),j.push(O+Nf(u.x1)),M.push(E+Nf(u.y1)),e.dirty(m[i]);for(i=0;i<R;++i)i%_===0&&(j[i]=F),i<_&&(M[i]=T);if(x===ra)for(o=1;o<_;++o){for(p=0,i=o;i<R;i+=_)p<j[i]&&(p=j[i]);for(i=o;i<R;i+=_)j[i]=p+C[o-1]}else if(x===na){for(p=0,i=0;i<R;++i)i%_&&p<j[i]&&(p=j[i]);for(i=0;i<R;++i)i%_&&(j[i]=p+D)}else for(x=!1,o=1;o<_;++o)for(i=o;i<R;i+=_)j[i]+=C[o-1];if(w===ra)for(a=1;a<A;++a){for(p=0,i=a*_,r=i+_;i<r;++i)p<M[i]&&(p=M[i]);for(i=a*_;i<r;++i)M[i]=p+z[a-1]}else if(w===na){for(p=0,i=_;i<R;++i)p<M[i]&&(p=M[i]);for(i=_;i<R;++i)M[i]=p+N}else for(w=!1,a=1;a<A;++a)for(i=a*_,r=i+_;i<r;++i)M[i]+=z[a-1];for(f=0,i=0;i<R;++i)s=m[i],c=s.x||0,s.x=f=j[i]+(i%_?f:0),s.bounds.translate(f-c,0);for(o=0;o<_;++o)for(d=0,i=o;i<R;i+=_)s=m[i],l=s.y||0,s.y=d+=M[i],s.bounds.translate(0,d-l);if(zf(n.center,oa)&&A>1&&x)for(i=0;i<R;++i)s=m[i],u=x===na?D:C[i%_],f=u-b(s).x2,f>0&&(s.x+=c=f/2,s.bounds.translate(c,0));if(zf(n.center,aa)&&1!==_&&w)for(i=0;i<R;++i)s=m[i],u=w===na?N:z[~~(i/_)],d=u-b(s).y2,d>0&&(s.y+=l=d/2,s.bounds.translate(0,l));for(i=0;i<R;++i)m[i].mark.bounds.clear();for(i=0;i<R;++i)s=m[i],e.dirty(s),y.union(s.mark.bounds.union(s.bounds));function B(e,t){return Math.floor(Math.min(e,t))}function P(e,t){return Math.ceil(Math.max(e,t))}b=v?Ff:Mf,h=zf(n.headerBand,aa,null),f=Rf(e,g.rowheaders,m,_,A,-zf(k,"rowHeader"),B,0,b,"x1",0,_,1,h),h=zf(n.headerBand,oa,null),d=Rf(e,g.colheaders,m,_,_,-zf(k,"columnHeader"),B,1,b,"y1",0,1,_,h),h=zf(n.footerBand,aa,null),Rf(e,g.rowfooters,m,_,A,zf(k,"rowFooter"),P,0,b,"x2",_-1,_,1,h),h=zf(n.footerBand,oa,null),Rf(e,g.colfooters,m,_,_,zf(k,"columnFooter"),P,1,b,"y2",S-_,1,_,h),g.rowtitle&&(p=f-zf(k,"rowTitle"),h=zf(n.titleBand,aa,.5),Bf(e,g.rowtitle,p,0,y,h)),g.coltitle&&(p=d-zf(k,"columnTitle"),h=zf(n.titleBand,oa,.5),Bf(e,g.coltitle,p,1,y,h))}function Rf(e,t,n,r,i,o,a,u,s,c,l,f,d,h){var p,g,m,v,b,y,x,w,O,E=n.length,k=0,_=0;if(!E)return k;for(p=l;p<E;p+=f)n[p]&&(k=a(k,s(n[p],c)));if(!t.length)return k;for(t.length>i&&(e.warn("Grid headers exceed limit: "+i),t=t.slice(0,i)),k+=o,g=0,v=t.length;g<v;++g)e.dirty(t[g]),t[g].mark.bounds.clear();for(p=l,g=0,v=t.length;g<v;++g,p+=f){for(y=t[g],b=y.mark.bounds,m=p;m>=0&&null==(x=n[m]);m-=d);u?(w=null==h?x.x:Math.round(x.bounds.x1+h*x.bounds.width()),O=k):(w=k,O=null==h?x.y:Math.round(x.bounds.y1+h*x.bounds.height())),b.union(y.bounds.translate(w-(y.x||0),O-(y.y||0))),y.x=w,y.y=O,e.dirty(y),_=a(_,b[c])}return _}function Bf(e,t,n,r,i,o){if(t){e.dirty(t);var a=n,u=n;r?a=Math.round(i.x1+o*i.width()):u=Math.round(i.y1+o*i.height()),t.bounds.translate(a-(t.x||0),u-(t.y||0)),t.mark.bounds.clear().union(t.bounds),t.x=a,t.y=u,e.dirty(t)}}Af.transform=function(e,t){var n=t.dataflow;if(t.visit(t.ALL,(function(e){n.dirty(e)})),t.fields&&t.fields["zindex"]){var r=t.source&&t.source[0];r&&(r.mark.zdirty=!0)}};var Pf=.5,If=new ua;function Lf(e){Kt.call(this,null,e)}var $f=Object(H["z"])(Lf,Kt);function Uf(e,t,n){var r,i,o,a,u,s,c=t.items,l=Math.max(0,t.width||0),f=Math.max(0,t.height||0),d=(new ua).set(0,0,l,f),h=d.clone(),p=d.clone(),g=[];for(u=0,s=c.length;u<s;++u)switch(i=c[u],i.role){case Po:a=Wf(i)?h:p,a.union(Gf(e,i,l,f));break;case Io:r=i;break;case Uo:g.push(i);break;case Lo:case $o:case qo:case Wo:case Ho:case Go:case Yo:case Vo:h.union(i.bounds),p.union(i.bounds);break;default:d.union(i.bounds)}if(g.length)for(o={leftWidth:Xf(e,g),margin:n.legendMargin||8,left:0,right:0,top:0,bottom:0},u=0,s=g.length;u<s;++u)if(a=Qf(e,g[u],o,h,p,l,f),n.autosize&&n.autosize.type===Qo){var m=g[u].items[0].datum.orient;m===jo||m===Co?d.add(a.x1,0).add(a.x2,0):m!==So&&m!==Do||d.add(0,a.y1).add(0,a.y2)}else d.union(a);d.union(h).union(p),r&&d.union(Vf(e,r,l,f,d)),Zf(e,t,d,n)}function qf(e,t,n){return e[t]===n?0:(e[t]=n,1)}function Wf(e){var t=e.items[0].datum.orient;return t===jo||t===Co}function Hf(e){var t=+e.grid;return[e.ticks?t++:-1,e.labels?t++:-1,t+ +e.domain]}function Gf(e,t,n,r){var i,o,a=t.items[0],u=a.datum,s=u.orient,c=Hf(u),l=a.range,f=a.offset,d=a.position,h=a.minExtent,p=a.maxExtent,g=u.title&&a.items[c[2]].items[0],m=a.titlePadding,v=a.bounds,b=0,y=0;switch(If.clear().union(v),v.clear(),(i=c[0])>-1&&v.union(a.items[i].bounds),(i=c[1])>-1&&v.union(a.items[i].bounds),s){case So:b=d||0,y=-f,o=Math.max(h,Math.min(p,-v.y1)),g&&(o=Yf(g,o,m,0,-1,v)),v.add(0,-o).add(l,0);break;case jo:b=-f,y=d||0,o=Math.max(h,Math.min(p,-v.x1)),g&&(o=Yf(g,o,m,1,-1,v)),v.add(-o,0).add(0,l);break;case Co:b=n+f,y=d||0,o=Math.max(h,Math.min(p,v.x2)),g&&(o=Yf(g,o,m,1,1,v)),v.add(0,0).add(o,l);break;case Do:b=d||0,y=r+f,o=Math.max(h,Math.min(p,v.y2)),g&&(o=Yf(g,o,m,0,1,v)),v.add(0,0).add(l,o);break;default:b=a.x,y=a.y}return Wu(v.translate(b,y),a),qf(a,"x",b+Pf)|qf(a,"y",y+Pf)&&(a.bounds=If,e.dirty(a),a.bounds=v,e.dirty(a)),a.mark.bounds.clear().union(v)}function Yf(e,t,n,r,i,o){var a=e.bounds,u=0,s=0;return e.auto?(t+=n,r?u=(e.x||0)-(e.x=i*t):s=(e.y||0)-(e.y=i*t),a.translate(-u,-s),e.mark.bounds.set(a.x1,a.y1,a.x2,a.y2),r?(o.add(0,a.y1).add(0,a.y2),t+=a.width()):(o.add(a.x1,0).add(a.x2,0),t+=a.height())):o.union(a),t}function Vf(e,t,n,r,i){var o,a=t.items[0],u=a.orient,s=a.frame,c=a.anchor,l=a.offset,f=a.bounds,d=u===jo||u===Co,h=0,p=d?r:n,g=0,m=0;switch(s!==Bo?u===jo?(h=i.y2,p=i.y1):u===Co?(h=i.y1,p=i.y2):(h=i.x1,p=i.x2):u===jo&&(h=r,p=0),o=c===To?h:c===Ro?p:(h+p)/2,If.clear().union(f),u){case So:g=o,m=i.y1-l;break;case jo:g=i.x1-l,m=o;break;case Co:g=i.x2+l,m=o;break;case Do:g=o,m=i.y2+l;break;default:g=a.x,m=a.y}return f.translate(g-a.x,m-a.y),qf(a,"x",g)|qf(a,"y",m)&&(a.bounds=If,e.dirty(a),a.bounds=f,e.dirty(a)),t.bounds.clear().union(f)}function Xf(e,t){return t.reduce((function(t,n){var r=n.items[0];if(Jf(e,r,r.items[0].items[0]),r.datum.orient===jo){var i=If.clear();r.items.forEach((function(e){i.union(e.bounds)})),t=Math.max(t,Math.ceil(i.width()+2*r.padding-1))}return t}),0)}function Jf(e,t,n){var r=t.padding-n.x,i=t.padding-n.y;if(t.datum.title){var o=t.items[1].items[0];i+=t.titlePadding+o.fontSize}(r||i)&&(n.x+=r,n.y+=i,n.bounds.translate(r,i),n.mark.bounds.translate(r,i),e.dirty(n))}function Qf(e,t,n,r,i,o,a){var u,s,c,l=t.items[0],f=l.datum,d=f.orient,h=l.offset,p=l.bounds,g=0,m=0;switch(d===So||d===Do?(c=i,g=n[d]):d!==jo&&d!==Co||(c=r,m=n[d]),If.clear().union(p),p.clear(),l.items.forEach((function(e){p.union(e.bounds)})),u=2*l.padding-1,s=2*l.padding-1,p.empty()||(u=Math.ceil(p.width()+u),s=Math.ceil(p.height()+s)),f.type===Jo&&Kf(l.items[0].items[0].items[0].items),d){case jo:g-=n.leftWidth+h-Math.floor(c.x1),n.left+=s+n.margin;break;case Co:g+=h+Math.ceil(c.x2),n.right+=s+n.margin;break;case So:m-=s+h-Math.floor(c.y1),n.top+=u+n.margin;break;case Do:m+=h+Math.ceil(c.y2),n.bottom+=u+n.margin;break;case Fo:g+=h,m+=h;break;case Mo:g+=o-u-h,m+=h;break;case zo:g+=h,m+=a-s-h;break;case No:g+=o-u-h,m+=a-s-h;break;default:g=l.x,m=l.y}return Wu(p.set(g,m,g+u,m+s),l),qf(l,"x",g)|qf(l,"width",u)|qf(l,"y",m)|qf(l,"height",s)&&(l.bounds=If,e.dirty(l),l.bounds=p,e.dirty(l)),l.mark.bounds.clear().union(p)}function Kf(e){var t=e.reduce((function(e,t){return e[t.column]=Math.max(t.bounds.x2-t.x,e[t.column]||0),e}),{});e.forEach((function(e){e.width=t[e.column],e.height=e.bounds.y2-e.y}))}function Zf(e,t,n,r){var i=r.autosize||{},o=i.type,a=e._width,u=e._height,s=e.padding();if(!(e._autosize<1)&&o){var c=Math.max(0,t.width||0),l=Math.max(0,Math.ceil(-n.x1)),f=Math.max(0,Math.ceil(n.x2-c)),d=Math.max(0,t.height||0),h=Math.max(0,Math.ceil(-n.y1)),p=Math.max(0,Math.ceil(n.y2-d));i.contains===Xo&&(a-=s.left+s.right,u-=s.top+s.bottom),o===ta?(l=0,h=0,c=a,d=u):o===Qo?(c=Math.max(0,a-l-f),d=Math.max(0,u-h-p)):o===Ko?(c=Math.max(0,a-l-f),u=d+h+p):o===Zo?(a=c+l+f,d=Math.max(0,u-h-p)):o===ea&&(a=c+l+f,u=d+h+p),e._resizeView(a,u,c,d,[l,h],i.resize)}}$f.transform=function(e,t){var n=t.dataflow;return e.mark.items.forEach((function(t){e.layout&&Tf(n,t,e.layout),Uf(n,t,e)})),e.modified()&&t.reflow(),t};var ed="log",td="pow",nd="utc",rd="sqrt",id="band",od="time",ad="point",ud="linear",sd="ordinal",cd="quantile",ld="quantize",fd="threshold",dd="bin-linear",hd="bin-ordinal",pd="sequential",gd=function(e,t,n){var r=e-t+2*n;return e?r>0?r:1:0},md=function(e){return function(t){var n,r=t[0],i=t[1];return i<r&&(n=r,r=i,i=n),[e.invert(r),e.invert(i)]}},vd=function(e){return function(t){var n,r,i,o,a=e.range(),u=t[0],s=t[1],c=-1;for(s<u&&(r=u,u=s,s=r),i=0,o=a.length;i<o;++i)a[i]>=u&&a[i]<=s&&(c<0&&(c=i),n=i);if(!(c<0))return u=e.invertExtent(a[c]),s=e.invertExtent(a[n]),[void 0===u[0]?u[1]:u[0],void 0===s[1]?s[0]:s[1]]}};const bd=xo(gn),yd=bd.right,xd=bd.left;xo(xn).center;var wd=yd,Od=n("ce24");function Ed(){var e,t,n=Object(Od["k"])().unknown(void 0),r=n.domain,i=n.range,o=[0,1],a=!1,u=0,s=0,c=.5;function l(){var n=r().length,l=o[1]<o[0],f=o[l-0],d=o[1-l],h=gd(n,u,s);e=(d-f)/(h||1),a&&(e=Math.floor(e)),f+=(d-f-e*(n-u))*c,t=e*(1-u),a&&(f=Math.round(f),t=Math.round(t));var p=Xr(n).map((function(t){return f+e*t}));return i(l?p.reverse():p)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),l()):r()},n.range=function(e){return arguments.length?(o=[+e[0],+e[1]],l()):o.slice()},n.rangeRound=function(e){return o=[+e[0],+e[1]],a=!0,l()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(a=!!e,l()):a},n.padding=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),u=s,l()):u},n.paddingInner=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),l()):u},n.paddingOuter=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),l()):s},n.align=function(e){return arguments.length?(c=Math.max(0,Math.min(1,e)),l()):c},n.invertRange=function(e){if(null!=e[0]&&null!=e[1]){var n,a,u,s=+e[0],c=+e[1],l=o[1]<o[0],f=l?i().reverse():i(),d=f.length-1;if(s===s&&c===c&&(c<s&&(u=s,s=c,c=u),!(c<f[0]||s>o[1-l])))return n=Math.max(0,yd(f,s)-1),a=s===c?n:yd(f,c)-1,s-f[n]>t+1e-10&&++n,l&&(u=n,n=d-a,a=d-u),n>a?void 0:r().slice(n,a+1)}},n.invert=function(e){var t=n.invertRange([e,e]);return t?t[0]:t},n.copy=function(){return Ed().domain(r()).range(o).round(a).paddingInner(u).paddingOuter(s).align(c)},l()}function kd(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,e.copy=function(){return kd(t())},e}function _d(){return kd(Ed().paddingInner(1))}var Ad=Array.prototype.map,Sd=Array.prototype.slice;function jd(e){return Ad.call(e,(function(e){return+e}))}function Cd(){var e=Object(Od["i"])(),t=[];function n(t){return e(t)}function r(n){t=jd(n),e.domain([t[0],Object(H["V"])(t)])}return n.domain=function(e){return arguments.length?(r(e),n):t.slice()},n.range=function(t){return arguments.length?(e.range(t),n):e.range()},n.rangeRound=function(t){return arguments.length?(e.rangeRound(t),n):e.rangeRound()},n.interpolate=function(t){return arguments.length?(e.interpolate(t),n):e.interpolate()},n.invert=function(t){return e.invert(t)},n.ticks=function(e){var r=t.length,i=~~(r/(e||r));return i<2?n.domain():t.filter((function(e,t){return!(t%i)}))},n.tickFormat=function(){return e.tickFormat.apply(e,arguments)},n.copy=function(){return Cd().domain(n.domain()).range(n.range())},n}function Dd(){var e=[],t=[];function n(n){return null==n||n!==n?void 0:t[(wd(e,n)-1)%t.length]}return n.domain=function(t){return arguments.length?(e=jd(t),n):e.slice()},n.range=function(e){return arguments.length?(t=Sd.call(e),n):t.slice()},n.tickFormat=function(){var t=Object(Od["i"])().domain([e[0],Object(H["V"])(e)]);return t.tickFormat.apply(t,arguments)},n.copy=function(){return Dd().domain(n.domain()).range(n.range())},n}function Fd(e){var t=Object(Od["i"])(),n=0,r=1,i=!1;function o(){var e=t.domain();n=e[0],r=Object(H["V"])(e)-n}function a(t){var o=(t-n)/r;return e(i?Math.max(0,Math.min(1,o)):o)}return a.clamp=function(e){return arguments.length?(i=!!e,a):i},a.domain=function(e){return arguments.length?(t.domain(e),o(),a):t.domain()},a.interpolator=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return Fd().domain(t.domain()).clamp(i).interpolator(e)},a.ticks=function(e){return t.ticks(e)},a.tickFormat=function(e,n){return t.tickFormat(e,n)},a.nice=function(e){return t.nice(e),o(),a},a}function Md(e,t){return function(){var n=t();return n.invertRange||(n.invertRange=n.invert?md(n):n.invertExtent?vd(n):void 0),n.type=e,n}}function zd(e,t){return arguments.length>1?(Nd[e]=Md(e,t),this):Nd.hasOwnProperty(e)?Nd[e]:void 0}var Nd={identity:Od["g"],linear:Od["i"],log:Od["j"],ordinal:Od["k"],pow:Od["m"],sqrt:Od["v"],quantile:Od["n"],quantize:Od["o"],threshold:Od["x"],time:Od["y"],utc:Od["z"],band:Ed,point:_d,sequential:Fd,"bin-linear":Cd,"bin-ordinal":Dd};for(var Td in Nd)zd(Td,Nd[Td]);var Rd=n("a43d");function Bd(e,t){var n=t[0],r=Object(H["V"])(t)-n;return function(t){return e(n+t*r)}}function Pd(e,t,n){var r=n-t;return r&&isFinite(r)?"linear"===e.type||"sequential"===e.type?function(e){return(e-t)/r}:e.copy().domain([t,n]).range([0,1]).interpolate(Id):Object(H["m"])(0)}function Id(e,t){var n=t-e;return function(t){return e+t*n}}function Ld(e,t){var n=Rd[$d(e)];return null!=t&&n&&n.gamma?n.gamma(t):n}function $d(e){return"interpolate"+e.toLowerCase().split("-").map((function(e){return e[0].toUpperCase()+e.slice(1)})).join("")}function Ud(e){var t=e.length/6|0,n=new Array(t),r=0;while(r<t)n[r]="#"+e.slice(6*r,6*++r);return n}var qd=Ud("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Wd=Ud("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),Hd=Ud("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),Gd=Ud("4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac"),Yd=Ud("4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5"),Vd=new Array(3).concat("67a9cff7f7f7f1a340","0571b092c5defdb863e66101","0571b092c5def7f7f7fdb863e66101","2166ac67a9cfd1e5f0fee0b6f1a340b35806","2166ac67a9cfd1e5f0f7f7f7fee0b6f1a340b35806","2166ac4393c392c5ded1e5f0fee0b6fdb863e08214b35806","2166ac4393c392c5ded1e5f0f7f7f7fee0b6fdb863e08214b35806","0530612166ac4393c392c5ded1e5f0fee0b6fdb863e08214b358067f3b08","0530612166ac4393c392c5ded1e5f0f7f7f7fee0b6fdb863e08214b358067f3b08").map(Ud),Xd=n("a968"),Jd=n("876c"),Qd=n("24cb"),Kd=n("c39b"),Zd=n("ab25"),eh=n("b245"),th=n("d63b"),nh=n("81b0"),rh=n("0b7d"),ih=n("4a96"),oh=n("5fbc"),ah=n("06f7"),uh=n("a1eb"),sh=n("e360"),ch={blueorange:Vd},lh={category10:Xd["a"],accent:Jd["a"],dark2:Qd["a"],paired:Kd["a"],pastel1:Zd["a"],pastel2:eh["a"],set1:th["a"],set2:nh["a"],set3:rh["a"],category20:qd,category20b:Wd,category20c:Hd,tableau10:Gd,tableau20:Yd,viridis:ih["a"],magma:ih["c"],inferno:ih["b"],plasma:ih["d"],rainbow:oh["b"],sinebow:ah["a"],blueorange:Object(sh["b"])(Object(H["V"])(Vd))};function fh(e,t){lh[e]=uh["interpolate"+t],ch[e]=uh["scheme"+t]}function dh(e,t){if(arguments.length>1)return lh[e]=t,this;var n=e.split("-");return e=n[0],n=+n[1]+1,n&&ch.hasOwnProperty(e)?ch[e][n-1]:!n&&lh.hasOwnProperty(e)?lh[e]:void 0}function hh(e,t,n){return arguments.length>1?(ch[e]=t,lh[e]=n||Object(sh["b"])(Object(H["V"])(t)),this):ch.hasOwnProperty(e)?ch[e]:void 0}fh("blues","Blues"),fh("greens","Greens"),fh("greys","Greys"),fh("purples","Purples"),fh("reds","Reds"),fh("oranges","Oranges"),fh("brownbluegreen","BrBG"),fh("purplegreen","PRGn"),fh("pinkyellowgreen","PiYG"),fh("purpleorange","PuOr"),fh("redblue","RdBu"),fh("redgrey","RdGy"),fh("redyellowblue","RdYlBu"),fh("redyellowgreen","RdYlGn"),fh("spectral","Spectral"),fh("bluegreen","BuGn"),fh("bluepurple","BuPu"),fh("greenblue","GnBu"),fh("orangered","OrRd"),fh("purplebluegreen","PuBuGn"),fh("purpleblue","PuBu"),fh("purplered","PuRd"),fh("redpurple","RdPu"),fh("yellowgreenblue","YlGnBu"),fh("yellowgreen","YlGn"),fh("yelloworangebrown","YlOrBr"),fh("yelloworangered","YlOrRd");var ph=n("1809"),gh=n("5edf"),mh=n("2c38"),vh=n("b3c3"),bh=n("742c"),yh=n("b14c"),xh=n("9603"),wh=n("a15a"),Oh=n("f8ee"),Eh=n("f623"),kh=n("6eb2"),_h=n("2739"),Ah=n("55f8"),Sh=n("77ae"),jh={millisecond:ph["a"],second:gh["a"],minute:mh["a"],hour:vh["a"],day:bh["b"],week:yh["g"],month:xh["a"],year:wh["a"]},Ch={millisecond:ph["a"],second:gh["a"],minute:Oh["a"],hour:Eh["a"],day:kh["a"],week:_h["g"],month:Ah["a"],year:Sh["a"]};function Dh(e){return jh.hasOwnProperty(e)&&jh[e]}function Fh(e){return Ch.hasOwnProperty(e)&&Ch[e]}var Mh=n("1231"),zh=n("09b8");function Nh(e,t){var n;return Object(H["G"])(t)&&(n=t.step,t=t.interval),Object(H["I"])(t)&&(t="time"===e.type?Dh(t):"utc"===e.type?Fh(t):Object(H["o"])("Only time and utc scales accept interval strings."),n&&(t=t.every(n))),t}function Th(e,t,n){var r=e.range(),i=r[0],o=Object(H["V"])(r);if(i>o&&(r=o,o=i,i=r),t=t.filter((function(t){return t=e(t),!(t<i||t>o)})),n>0&&t.length>1){var a=[t[0],Object(H["V"])(t)];while(t.length>n&&t.length>=3)t=t.filter((function(e,t){return!(t%2)}));t.length<3&&(t=a)}return t}function Rh(e,t){return e.ticks?e.ticks(t):e.domain()}function Bh(e,t,n){var r=e.tickFormat?e.tickFormat(t,n):n?Object(Mh["b"])(n):String;return e.type===ed?Ph(r,Ih(n)):r}function Ph(e,t){return function(n){return e(n)?t(n):""}}function Ih(e){var t=Object(zh["b"])(e||",");if(null==t.precision){switch(t.precision=12,t.type){case"%":t.precision-=2;break;case"e":t.precision-=1;break}return Lh(Object(Mh["b"])(t),Object(Mh["b"])(".1f")(1)[1])}return Object(Mh["b"])(t)}function Lh(e,t){return function(n){var r,i,o=e(n),a=o.indexOf(t);if(a<0)return o;r=$h(o,a),i=r<o.length?o.slice(r):"";while(--r>a)if("0"!==o[r]){++r;break}return o.slice(0,r)+i}}function $h(e,t){var n,r=e.lastIndexOf("e");if(r>0)return r;for(r=e.length;--r>t;)if(n=e.charCodeAt(r),n>=48&&n<=57)return r+1}function Uh(e){Kt.call(this,null,e)}var qh=Object(H["z"])(Uh,Kt);function Wh(e){Kt.call(this,null,e)}qh.transform=function(e,t){if(this.value&&!e.modified())return t.StopPropagation;var n=t.fork(t.NO_SOURCE|t.NO_FIELDS),r=this.value,i=e.scale,o=null==e.count?e.values?e.values.length:10:Nh(i,e.count),a=e.format||Bh(i,o,e.formatSpecifier),u=e.values?Th(i,e.values,o):Rh(i,o);return r&&(n.rem=r),r=u.map((function(e,t){return K({index:t/(u.length-1),value:e,label:a(e)})})),e.extra&&r.length&&r.push(K({index:-1,extra:{value:r[0].value},label:""})),n.source=r,n.add=r,this.value=r,n};var Hh=Object(H["z"])(Wh,Kt);function Gh(){return K({})}function Yh(e){return e.exit}function Vh(e){Kt.call(this,null,e)}Hh.transform=function(e,t){var n=t.dataflow,r=t.fork(t.NO_SOURCE|t.NO_FIELDS),i=e.item||Gh,o=e.key||J,a=this.value;return Object(H["B"])(r.encode)&&(r.encode=null),a&&(e.modified("key")||t.modified(o))&&Object(H["o"])("DataJoin does not support modified key function or fields."),a||(t=t.addAll(),this.value=a=Object(H["t"])().test(Yh),a.lookup=function(e){return a.get(o(e))}),t.visit(t.ADD,(function(e){var t=o(e),n=a.get(t);n?n.exit?(a.empty--,r.add.push(n)):r.mod.push(n):(a.set(t,n=i(e)),r.add.push(n)),n.datum=e,n.exit=!1})),t.visit(t.MOD,(function(e){var t=o(e),n=a.get(t);n&&(n.datum=e,r.mod.push(n))})),t.visit(t.REM,(function(e){var t=o(e),n=a.get(t);e!==n.datum||n.exit||(r.rem.push(n),n.exit=!0,++a.empty)})),t.changed(t.ADD_MOD)&&r.modifies("datum"),e.clean&&a.empty>n.cleanThreshold&&n.runAfter(a.clean),r};var Xh=Object(H["z"])(Vh,Kt);Xh.transform=function(e,t){var n=t.fork(t.ADD_REM),r=e.encoders,i=t.encode;if(Object(H["B"])(i)){if(!n.changed()&&!i.every((function(e){return r[e]})))return t.StopPropagation;i=i[0],n.encode=null}var o="enter"===i,a=r.update||H["s"],u=r.enter||H["s"],s=r.exit||H["s"],c=(i&&!o?r[i]:a)||H["s"];if(t.changed(t.ADD)&&(t.visit(t.ADD,(function(t){u(t,e),a(t,e),c!==H["s"]&&c!==a&&c(t,e)})),n.modifies(u.output),n.modifies(a.output),c!==H["s"]&&c!==a&&n.modifies(c.output)),t.changed(t.REM)&&s!==H["s"]&&(t.visit(t.REM,(function(t){s(t,e)})),n.modifies(s.output)),o||c!==H["s"]){var l=t.MOD|(e.modified()?t.REFLOW:0);o?(t.visit(l,(function(t){var r=u(t,e);(c(t,e)||r)&&n.mod.push(t)})),n.mod.length&&n.modifies(u.output)):t.visit(l,(function(t){c(t,e)&&n.mod.push(t)})),n.mod.length&&n.modifies(c.output)}return n.changed()?n:t.StopPropagation};var Jh="symbol",Qh="discrete",Kh="gradient",Zh={};function ep(e,t){var n=Zh[e.type];return n?n(e):Rh(e,t)}function tp(e){var t=e.domain(),n=t[0],r=Object(H["V"])(t),i=e.range().length,o=new Array(i),a=0;o[0]=-1/0;while(++a<i)o[a]=(a*r-(a-i)*n)/i;return o.max=1/0,o}function np(e){var t=[-1/0].concat(e.quantiles());return t.max=1/0,t}function rp(e){var t=[-1/0].concat(e.domain());return t.max=1/0,t}function ip(e){var t=e.domain();return t.max=t.pop(),t}function op(e,t,n){return n===Jh&&Zh[e.type]?ap(t):n===Qh?up(t):sp(t)}function ap(e){return function(t,n,r){var i=r[n+1]||r.max||1/0,o=cp(t,e),a=cp(i,e);return o&&a?o+"–"+a:a?"< "+a:"≥ "+o}}function up(e){return function(t,n){return n?e(t):null}}function sp(e){return function(t){return e(t)}}function cp(e,t){return isFinite(e)?t(e):null}function lp(e){var t=e.domain(),n=t.length-1,r=+t[0],i=+Object(H["V"])(t),o=i-r;if(e.type===fd){var a=n?o/n:.1;r-=a,i+=a,o=i-r}return function(e){return(e-r)/o}}function fp(e){Kt.call(this,[],e)}Zh[cd]=np,Zh[ld]=tp,Zh[fd]=rp,Zh[dd]=Zh[hd]=ip;var dp=Object(H["z"])(fp,Kt);dp.transform=function(e,t){if(null!=this.value&&!e.modified())return t.StopPropagation;var n,r,i,o,a=t.fork(t.NO_SOURCE|t.NO_FIELDS),u=this.value,s=e.type||Jh,c=e.scale,l=null==e.count?5:Nh(c,e.count),f=e.format||Bh(c,l,e.formatSpecifier),d=e.values||ep(c,l,s);return f=op(c,f,s),u&&(a.rem=u),s===Jh?(Object(H["E"])(i=e.size)?(e.values||0!==c(d[0])||(d=d.slice(1)),o=d.reduce((function(t,n){return Math.max(t,i(n,e))}),0)):i=Object(H["m"])(o=i||8),u=d.map((function(t,n){return K({index:n,label:f(t,n,d),value:t,offset:o,size:i(t,e)})}))):s===Kh?(n=c.domain(),r=Pd(c,n[0],Object(H["V"])(n)),d.length<3&&!e.values&&n[0]!==Object(H["V"])(n)&&(d=[n[0],Object(H["V"])(n)]),u=d.map((function(e,t){return K({index:t,label:f(e,t,d),value:e,perc:r(e)})}))):(i=d.length-1,r=lp(c),u=d.map((function(e,t){return K({index:t,label:f(e,t,d),value:e,perc:t?r(e):0,perc2:t===i?1:r(d[t+1])})}))),a.source=u,a.add=u,this.value=u,a};var hp=Object(H["t"])({line:xp,"line-radial":wp,arc:Op,"arc-radial":Ep,curve:kp,"curve-radial":_p,"orthogonal-horizontal":Ap,"orthogonal-vertical":Sp,"orthogonal-radial":jp,"diagonal-horizontal":Cp,"diagonal-vertical":Dp,"diagonal-radial":Fp});function pp(e){return e.source.x}function gp(e){return e.source.y}function mp(e){return e.target.x}function vp(e){return e.target.y}function bp(e){Kt.call(this,{},e)}bp.Definition={type:"LinkPath",metadata:{modifies:!0},params:[{name:"sourceX",type:"field",default:"source.x"},{name:"sourceY",type:"field",default:"source.y"},{name:"targetX",type:"field",default:"target.x"},{name:"targetY",type:"field",default:"target.y"},{name:"orient",type:"enum",default:"vertical",values:["horizontal","vertical","radial"]},{name:"shape",type:"enum",default:"line",values:["line","arc","curve","diagonal","orthogonal"]},{name:"require",type:"signal"},{name:"as",type:"string",default:"path"}]};var yp=Object(H["z"])(bp,Kt);function xp(e,t,n,r){return"M"+e+","+t+"L"+n+","+r}function wp(e,t,n,r){return xp(t*Math.cos(e),t*Math.sin(e),r*Math.cos(n),r*Math.sin(n))}function Op(e,t,n,r){var i=n-e,o=r-t,a=Math.sqrt(i*i+o*o)/2,u=180*Math.atan2(o,i)/Math.PI;return"M"+e+","+t+"A"+a+","+a+" "+u+" 0 1 "+n+","+r}function Ep(e,t,n,r){return Op(t*Math.cos(e),t*Math.sin(e),r*Math.cos(n),r*Math.sin(n))}function kp(e,t,n,r){var i=n-e,o=r-t,a=.2*(i+o),u=.2*(o-i);return"M"+e+","+t+"C"+(e+a)+","+(t+u)+" "+(n+u)+","+(r-a)+" "+n+","+r}function _p(e,t,n,r){return kp(t*Math.cos(e),t*Math.sin(e),r*Math.cos(n),r*Math.sin(n))}function Ap(e,t,n,r){return"M"+e+","+t+"V"+r+"H"+n}function Sp(e,t,n,r){return"M"+e+","+t+"H"+n+"V"+r}function jp(e,t,n,r){var i=Math.cos(e),o=Math.sin(e),a=Math.cos(n),u=Math.sin(n),s=Math.abs(n-e)>Math.PI?n<=e:n>e;return"M"+t*i+","+t*o+"A"+t+","+t+" 0 0,"+(s?1:0)+" "+t*a+","+t*u+"L"+r*a+","+r*u}function Cp(e,t,n,r){var i=(e+n)/2;return"M"+e+","+t+"C"+i+","+t+" "+i+","+r+" "+n+","+r}function Dp(e,t,n,r){var i=(t+r)/2;return"M"+e+","+t+"C"+e+","+i+" "+n+","+i+" "+n+","+r}function Fp(e,t,n,r){var i=Math.cos(e),o=Math.sin(e),a=Math.cos(n),u=Math.sin(n),s=(t+r)/2;return"M"+t*i+","+t*o+"C"+s*i+","+s*o+" "+s*a+","+s*u+" "+r*a+","+r*u}function Mp(e,t){let n=0;if(void 0===t)for(let r of e)(r=+r)&&(n+=r);else{let r=-1;for(let i of e)(i=+t(i,++r,e))&&(n+=i)}return n}function zp(e){Kt.call(this,null,e)}yp.transform=function(e,t){var n=e.sourceX||pp,r=e.sourceY||gp,i=e.targetX||mp,o=e.targetY||vp,a=e.as||"path",u=e.orient||"vertical",s=e.shape||"line",c=hp.get(s+"-"+u)||hp.get(s);return c||Object(H["o"])("LinkPath unsupported type: "+e.shape+(e.orient?"-"+e.orient:"")),t.visit(t.SOURCE,(function(e){e[a]=c(n(e),r(e),i(e),o(e))})),t.reflow(e.modified()).modifies(a)},zp.Definition={type:"Pie",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"startAngle",type:"number",default:0},{name:"endAngle",type:"number",default:6.283185307179586},{name:"sort",type:"boolean",default:!1},{name:"as",type:"string",array:!0,length:2,default:["startAngle","endAngle"]}]};var Np=Object(H["z"])(zp,Kt);Np.transform=function(e,t){var n,r,i,o=e.as||["startAngle","endAngle"],a=o[0],u=o[1],s=e.field||H["P"],c=e.startAngle||0,l=null!=e.endAngle?e.endAngle:2*Math.PI,f=t.source,d=f.map(s),h=d.length,p=c,g=(l-c)/Mp(d),m=Xr(h);for(e.sort&&m.sort((function(e,t){return d[e]-d[t]})),n=0;n<h;++n)i=d[m[n]],r=f[m[n]],r[a]=p,r[u]=p+=i*g;return this.value=d,t.reflow(e.modified()).modifies(o)};var Tp=n("5857"),Rp=n("ea1d"),Bp=5,Pp=Object(H["eb"])([ud,td,rd]),Ip=Object(H["eb"])([ud,ed,td,rd,od,nd]),Lp=Object(H["eb"])(["set","modified","clear","type","scheme","schemeExtent","schemeCount","domain","domainMin","domainMid","domainMax","domainRaw","domainImplicit","nice","zero","range","rangeStep","round","reverse","interpolate","interpolateGamma"]);function $p(e){Kt.call(this,null,e),this.modified(!0)}var Up=Object(H["z"])($p,Kt);function qp(e,t,n){var r=Wp(e,t.domainRaw,n);if(r>-1)return r;var i,o,a=t.domain,u=e.type,s=t.zero||void 0===t.zero&&Pp[u];return a?(Ip[u]&&t.padding&&a[0]!==Object(H["V"])(a)&&(a=Hp(u,a,t.range,t.padding,t.exponent)),(s||null!=t.domainMin||null!=t.domainMax||null!=t.domainMid)&&(i=(a=a.slice()).length-1||1,s&&(a[0]>0&&(a[0]=0),a[i]<0&&(a[i]=0)),null!=t.domainMin&&(a[0]=t.domainMin),null!=t.domainMax&&(a[i]=t.domainMax),null!=t.domainMid&&(o=t.domainMid,(o<a[0]||o>a[i])&&n.warn("Scale domainMid exceeds domain min or max.",o),a.splice(i,0,o))),e.domain(Gp(u,a,n)),u===sd&&e.unknown(t.domainImplicit?Od["h"]:void 0),t.nice&&e.nice&&e.nice(!0!==t.nice&&Nh(e,t.nice)||null),a.length):0}function Wp(e,t,n){return t?(e.domain(Gp(e.type,t,n)),t.length):-1}function Hp(e,t,n,r,i){var o=Math.abs(Object(H["V"])(n)-n[0]),a=o/(o-2*r),u=e===ed?Object(H["nb"])(t,null,a):e===rd?Object(H["ob"])(t,null,a,.5):e===td?Object(H["ob"])(t,null,a,i):Object(H["mb"])(t,null,a);return t=t.slice(),t[0]=u[0],t[t.length-1]=u[1],t}function Gp(e,t,n){if(e===ed){var r=Math.abs(t.reduce((function(e,t){return e+(t<0?-1:t>0?1:0)}),0));r!==t.length&&n.warn("Log scale domain includes zero: "+Object(H["ab"])(t))}return t}function Yp(e,t,n){var r=t.round||!1,i=t.range;if(null!=t.rangeStep)i=Vp(e.type,t,n);else if(t.scheme){if(i=Xp(e.type,t,n),Object(H["E"])(i))return e.interpolator(i)}else if(i&&e.type===pd)return e.interpolator(Object(sh["b"])(Qp(i,t.reverse)));i&&t.interpolate&&e.interpolate?e.interpolate(Ld(t.interpolate,t.interpolateGamma)):Object(H["E"])(e.round)?e.round(r):Object(H["E"])(e.rangeRound)&&e.interpolate(r?Tp["a"]:Rp["a"]),i&&e.range(Qp(i,t.reverse))}function Vp(e,t,n){e!==id&&e!==ad&&Object(H["o"])("Only band and point scales support rangeStep.");var r=(null!=t.paddingOuter?t.paddingOuter:t.padding)||0,i=e===ad?1:(null!=t.paddingInner?t.paddingInner:t.padding)||0;return[0,t.rangeStep*gd(n,i,r)]}function Xp(e,t,n){var r,i=t.scheme.toLowerCase(),o=dh(i),a=t.schemeExtent;return o||Object(H["o"])("Unrecognized scheme name: "+t.scheme),n=e===fd?n+1:e===hd?n-1:e===cd||e===ld?+t.schemeCount||Bp:n,e===pd?Jp(o,a,t.reverse):!a&&(r=dh(i+"-"+n))?r:Object(H["E"])(o)?Kp(Jp(o,a),n):e===sd?o:o.slice(0,n)}function Jp(e,t,n){return Object(H["E"])(e)&&(t||n)?Bd(e,Qp(t||[0,1],n)):e}function Qp(e,t){return t?e.slice().reverse():e}function Kp(e,t){for(var n=new Array(t),r=t+1,i=0;i<t;)n[i]=e(++i/r);return n}function Zp(e){Kt.call(this,null,e)}Up.transform=function(e,t){var n,r=t.dataflow,i=this.value;for(n in i&&!e.modified("type")||(this.value=i=zd((e.type||ud).toLowerCase())()),e)if(!Lp[n]){if("padding"===n&&Ip[i.type])continue;Object(H["E"])(i[n])?i[n](e[n]):r.warn("Unsupported scale property: "+n)}return Yp(i,e,qp(i,e,r)),t.fork(t.NO_SOURCE|t.NO_FIELDS)};var eg=Object(H["z"])(Zp,Kt);eg.transform=function(e,t){var n=e.modified("sort")||t.changed(t.ADD)||t.modified(e.sort.fields)||t.modified("datum");return n&&t.source.sort(e.sort),this.modified(n),t};var tg="zero",ng="center",rg="normalize",ig=["y0","y1"];function og(e){Kt.call(this,null,e)}og.Definition={type:"Stack",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"groupby",type:"field",array:!0},{name:"sort",type:"compare"},{name:"offset",type:"enum",default:tg,values:[tg,ng,rg]},{name:"as",type:"string",array:!0,length:2,default:ig}]};var ag=Object(H["z"])(og,Kt);function ug(e,t,n,r,i){for(var o,a=(t-e.sum)/2,u=e.length,s=0;s<u;++s)o=e[s],o[r]=a,o[i]=a+=Math.abs(n(o))}function sg(e,t,n,r,i){for(var o,a=1/e.sum,u=0,s=e.length,c=0,l=0;c<s;++c)o=e[c],o[r]=u,o[i]=u=a*(l+=Math.abs(n(o)))}function cg(e,t,n,r,i){for(var o,a,u=0,s=0,c=e.length,l=0;l<c;++l)a=e[l],o=n(a),o<0?(a[r]=s,a[i]=s+=o):(a[r]=u,a[i]=u+=o)}function lg(e,t,n,r){var i,o,a,u,s,c,l,f,d,h=[],p=function(e){return e(s)};if(null==t)h.push(e.slice());else for(i={},o=0,a=e.length;o<a;++o)s=e[o],c=t.map(p),l=i[c],l||(i[c]=l=[],h.push(l)),l.push(s);for(c=0,d=0,u=h.length;c<u;++c){for(l=h[c],o=0,f=0,a=l.length;o<a;++o)f+=Math.abs(r(l[o]));l.sum=f,f>d&&(d=f),n&&l.sort(n)}return h.max=d,h}ag.transform=function(e,t){var n,r,i,o,a=e.as||ig,u=a[0],s=a[1],c=e.field||H["P"],l=e.offset===ng?ug:e.offset===rg?sg:cg;for(n=lg(t.source,e.groupby,e.sort,c),r=0,i=n.length,o=n.max;r<i;++r)l(n[r],o,c,u,s);return t.reflow(e.modified()).modifies(a)};var fg=n("ccc7"),dg=["size","smooth"],hg=["x","y","weight","size","cellSize","bandwidth"];function pg(e){Kt.call(this,null,e)}pg.Definition={type:"Contour",metadata:{generates:!0},params:[{name:"size",type:"number",array:!0,length:2,required:!0},{name:"values",type:"number",array:!0},{name:"x",type:"field"},{name:"y",type:"field"},{name:"weight",type:"field"},{name:"cellSize",type:"number"},{name:"bandwidth",type:"number"},{name:"count",type:"number"},{name:"smooth",type:"boolean"},{name:"nice",type:"boolean",default:!1},{name:"thresholds",type:"number",array:!0}]};var gg=Object(H["z"])(pg,Kt);function mg(e){return function(t){for(var n=Vr(t),r=n[0],i=n[1]-r,o=[],a=1;a<=e;++a)o.push(r+i*a/(e+1));return o}}gg.transform=function(e,t){if(this.value&&!t.changed()&&!e.modified())return t.StopPropagation;var n,r,i,o=t.fork(t.NO_SOURCE|t.NO_FIELDS),a=e.count||10;return e.values?(n=Object(fg["b"])(),r=dg,i=e.values):(n=Object(fg["a"])(),r=hg,i=t.materialize(t.SOURCE).source),n.thresholds(e.thresholds||(e.nice?a:mg(a))),r.forEach((function(t){null!=e[t]&&n[t](e[t])})),this.value&&(o.rem=this.value),i=i&&i.length?n(i).map(K):[],this.value=o.source=o.add=i,o};var vg="Feature",bg="FeatureCollection",yg="MultiPoint";function xg(e){Kt.call(this,null,e)}xg.Definition={type:"GeoJSON",metadata:{},params:[{name:"fields",type:"field",array:!0,length:2},{name:"geojson",type:"field"}]};var wg=Object(H["z"])(xg,Kt);wg.transform=function(e,t){var n,r=this._features,i=this._points,o=e.fields,a=o&&o[0],u=o&&o[1],s=e.geojson,c=t.ADD;n=e.modified()||t.changed(t.REM)||t.modified(Object(H["g"])(s))||a&&t.modified(Object(H["g"])(a))||u&&t.modified(Object(H["g"])(u)),this.value&&!n||(c=t.SOURCE,this._features=r=[],this._points=i=[]),s&&t.visit(c,(function(e){r.push(s(e))})),a&&u&&(t.visit(c,(function(e){var t=a(e),n=u(e);null!=t&&null!=n&&(t=+t)===t&&(n=+n)===n&&i.push([t,n])})),r=r.concat({type:vg,geometry:{type:yg,coordinates:i}})),this.value={type:bg,features:r}};var Og=e=>e;function Eg(e,t){e&&_g.hasOwnProperty(e.type)&&_g[e.type](e,t)}var kg={Feature:function(e,t){Eg(e.geometry,t)},FeatureCollection:function(e,t){var n=e.features,r=-1,i=n.length;while(++r<i)Eg(n[r].geometry,t)}},_g={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){var n=e.coordinates,r=-1,i=n.length;while(++r<i)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){Ag(e.coordinates,t,0)},MultiLineString:function(e,t){var n=e.coordinates,r=-1,i=n.length;while(++r<i)Ag(n[r],t,0)},Polygon:function(e,t){Sg(e.coordinates,t)},MultiPolygon:function(e,t){var n=e.coordinates,r=-1,i=n.length;while(++r<i)Sg(n[r],t)},GeometryCollection:function(e,t){var n=e.geometries,r=-1,i=n.length;while(++r<i)Eg(n[r],t)}};function Ag(e,t,n){var r,i=-1,o=e.length-n;t.lineStart();while(++i<o)r=e[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function Sg(e,t){var n=-1,r=e.length;t.polygonStart();while(++n<r)Ag(e[n],t,1);t.polygonEnd()}var jg=function(e,t){e&&kg.hasOwnProperty(e.type)?kg[e.type](e,t):Eg(e,t)};class Cg{constructor(){this._partials=new Float64Array(32),this._n=0}add(e){const t=this._partials;let n=0;for(let r=0;r<this._n&&r<32;r++){const i=t[r],o=e+i,a=Math.abs(e)<Math.abs(i)?e-(o-i):i-(o-e);a&&(t[n++]=a),e=o}return t[n]=e,this._n=n+1,this}valueOf(){const e=this._partials;let t,n,r,i=this._n,o=0;if(i>0){o=e[--i];while(i>0)if(t=o,n=e[--i],o=t+n,r=n-(o-t),r)break;i>0&&(r<0&&e[i-1]<0||r>0&&e[i-1]>0)&&(n=2*r,t=o+n,n==t-o&&(o=t))}return o}}var Dg=1e-6,Fg=1e-12,Mg=Math.PI,zg=Mg/2,Ng=Mg/4,Tg=2*Mg,Rg=180/Mg,Bg=Mg/180,Pg=Math.abs,Ig=Math.atan,Lg=Math.atan2,$g=Math.cos,Ug=(Math.ceil,Math.exp),qg=(Math.floor,Math.hypot,Math.log),Wg=Math.pow,Hg=Math.sin,Gg=Math.sign||function(e){return e>0?1:e<0?-1:0},Yg=Math.sqrt,Vg=Math.tan;function Xg(e){return e>1?0:e<-1?Mg:Math.acos(e)}function Jg(e){return e>1?zg:e<-1?-zg:Math.asin(e)}function Qg(){}var Kg,Zg,em,tm,nm=new Cg,rm=new Cg,im={point:Qg,lineStart:Qg,lineEnd:Qg,polygonStart:function(){im.lineStart=om,im.lineEnd=sm},polygonEnd:function(){im.lineStart=im.lineEnd=im.point=Qg,nm.add(Pg(rm)),rm=new Cg},result:function(){var e=nm/2;return nm=new Cg,e}};function om(){im.point=am}function am(e,t){im.point=um,Kg=em=e,Zg=tm=t}function um(e,t){rm.add(tm*e-em*t),em=e,tm=t}function sm(){um(Kg,Zg)}var cm=im,lm=1/0,fm=lm,dm=-lm,hm=dm,pm={point:gm,lineStart:Qg,lineEnd:Qg,polygonStart:Qg,polygonEnd:Qg,result:function(){var e=[[lm,fm],[dm,hm]];return dm=hm=-(fm=lm=1/0),e}};function gm(e,t){e<lm&&(lm=e),e>dm&&(dm=e),t<fm&&(fm=t),t>hm&&(hm=t)}var mm,vm,bm,ym,xm=pm,wm=0,Om=0,Em=0,km=0,_m=0,Am=0,Sm=0,jm=0,Cm=0,Dm={point:Fm,lineStart:Mm,lineEnd:Tm,polygonStart:function(){Dm.lineStart=Rm,Dm.lineEnd=Bm},polygonEnd:function(){Dm.point=Fm,Dm.lineStart=Mm,Dm.lineEnd=Tm},result:function(){var e=Cm?[Sm/Cm,jm/Cm]:Am?[km/Am,_m/Am]:Em?[wm/Em,Om/Em]:[NaN,NaN];return wm=Om=Em=km=_m=Am=Sm=jm=Cm=0,e}};function Fm(e,t){wm+=e,Om+=t,++Em}function Mm(){Dm.point=zm}function zm(e,t){Dm.point=Nm,Fm(bm=e,ym=t)}function Nm(e,t){var n=e-bm,r=t-ym,i=Yg(n*n+r*r);km+=i*(bm+e)/2,_m+=i*(ym+t)/2,Am+=i,Fm(bm=e,ym=t)}function Tm(){Dm.point=Fm}function Rm(){Dm.point=Pm}function Bm(){Im(mm,vm)}function Pm(e,t){Dm.point=Im,Fm(mm=bm=e,vm=ym=t)}function Im(e,t){var n=e-bm,r=t-ym,i=Yg(n*n+r*r);km+=i*(bm+e)/2,_m+=i*(ym+t)/2,Am+=i,i=ym*e-bm*t,Sm+=i*(bm+e),jm+=i*(ym+t),Cm+=3*i,Fm(bm=e,ym=t)}var Lm=Dm;function $m(e){this._context=e}$m.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,Tg);break}},result:Qg};var Um,qm,Wm,Hm,Gm,Ym=new Cg,Vm={point:Qg,lineStart:function(){Vm.point=Xm},lineEnd:function(){Um&&Jm(qm,Wm),Vm.point=Qg},polygonStart:function(){Um=!0},polygonEnd:function(){Um=null},result:function(){var e=+Ym;return Ym=new Cg,e}};function Xm(e,t){Vm.point=Jm,qm=Hm=e,Wm=Gm=t}function Jm(e,t){Hm-=e,Gm-=t,Ym.add(Yg(Hm*Hm+Gm*Gm)),Hm=e,Gm=t}var Qm=Vm;function Km(){this._string=[]}function Zm(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}Km.prototype={_radius:4.5,_circle:Zm(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=Zm(this._radius)),this._string.push("M",e,",",t,this._circle);break}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}};var ev=function(e,t){var n,r,i=4.5;function o(e){return e&&("function"===typeof i&&r.pointRadius(+i.apply(this,arguments)),jg(e,n(r))),r.result()}return o.area=function(e){return jg(e,n(cm)),cm.result()},o.measure=function(e){return jg(e,n(Qm)),Qm.result()},o.bounds=function(e){return jg(e,n(xm)),xm.result()},o.centroid=function(e){return jg(e,n(Lm)),Lm.result()},o.projection=function(t){return arguments.length?(n=null==t?(e=null,Og):(e=t).stream,o):e},o.context=function(e){return arguments.length?(r=null==e?(t=null,new Km):new $m(t=e),"function"!==typeof i&&r.pointRadius(i),o):t},o.pointRadius=function(e){return arguments.length?(i="function"===typeof e?e:(r.pointRadius(+e),+e),o):i},o.projection(e).context(t)},tv=function(){var e,t=[];return{point:function(t,n,r){e.push([t,n,r])},lineStart:function(){t.push(e=[])},lineEnd:Qg,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},nv=function(e,t){return Pg(e[0]-t[0])<Dg&&Pg(e[1]-t[1])<Dg};function rv(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var iv=function(e,t,n,r,i){var o,a,u=[],s=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],a=e[t];if(nv(r,a)){if(!r[2]&&!a[2]){for(i.lineStart(),o=0;o<t;++o)i.point((r=e[o])[0],r[1]);return void i.lineEnd()}a[0]+=2*Dg}u.push(n=new rv(r,e,null,!0)),s.push(n.o=new rv(r,null,n,!1)),u.push(n=new rv(a,e,null,!1)),s.push(n.o=new rv(a,null,n,!0))}})),u.length){for(s.sort(t),ov(u),ov(s),o=0,a=s.length;o<a;++o)s[o].e=n=!n;var c,l,f=u[0];while(1){var d=f,h=!0;while(d.v)if((d=d.n)===f)return;c=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(h)for(o=0,a=c.length;o<a;++o)i.point((l=c[o])[0],l[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(h)for(c=d.p.z,o=c.length-1;o>=0;--o)i.point((l=c[o])[0],l[1]);else r(d.x,d.p.x,-1,i);d=d.p}d=d.o,c=d.z,h=!h}while(!d.v);i.lineEnd()}}};function ov(e){if(t=e.length){var t,n,r=0,i=e[0];while(++r<t)i.n=n=e[r],n.p=i,i=n;i.n=n=e[0],n.p=i}}function av(e){return[Lg(e[1],e[0]),Jg(e[2])]}function uv(e){var t=e[0],n=e[1],r=$g(n);return[r*$g(t),r*Hg(t),Hg(n)]}function sv(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function cv(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function lv(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function fv(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function dv(e){var t=Yg(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}function hv(e){return Pg(e[0])<=Mg?e[0]:Gg(e[0])*((Pg(e[0])+Mg)%Tg-Mg)}var pv=function(e,t){var n=hv(t),r=t[1],i=Hg(r),o=[Hg(n),-$g(n),0],a=0,u=0,s=new Cg;1===i?r=zg+Dg:-1===i&&(r=-zg-Dg);for(var c=0,l=e.length;c<l;++c)if(d=(f=e[c]).length)for(var f,d,h=f[d-1],p=hv(h),g=h[1]/2+Ng,m=Hg(g),v=$g(g),b=0;b<d;++b,p=x,m=O,v=E,h=y){var y=f[b],x=hv(y),w=y[1]/2+Ng,O=Hg(w),E=$g(w),k=x-p,_=k>=0?1:-1,A=_*k,S=A>Mg,j=m*O;if(s.add(Lg(j*_*Hg(A),v*E+j*$g(A))),a+=S?k+_*Tg:k,S^p>=n^x>=n){var C=cv(uv(h),uv(y));dv(C);var D=cv(o,C);dv(D);var F=(S^k>=0?-1:1)*Jg(D[2]);(r>F||r===F&&(C[0]||C[1]))&&(u+=S^k>=0?1:-1)}}return(a<-Dg||a<Dg&&s<-Fg)^1&u};function*gv(e){for(const t of e)yield*t}function mv(e){return Array.from(gv(e))}var vv=function(e,t,n,r){return function(i){var o,a,u,s=t(i),c=tv(),l=t(c),f=!1,d={point:h,lineStart:g,lineEnd:m,polygonStart:function(){d.point=v,d.lineStart=b,d.lineEnd=y,a=[],o=[]},polygonEnd:function(){d.point=h,d.lineStart=g,d.lineEnd=m,a=mv(a);var e=pv(o,r);a.length?(f||(i.polygonStart(),f=!0),iv(a,yv,e,n,i)):e&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function h(t,n){e(t,n)&&i.point(t,n)}function p(e,t){s.point(e,t)}function g(){d.point=p,s.lineStart()}function m(){d.point=h,s.lineEnd()}function v(e,t){u.push([e,t]),l.point(e,t)}function b(){l.lineStart(),u=[]}function y(){v(u[0][0],u[0][1]),l.lineEnd();var e,t,n,r,s=l.clean(),d=c.result(),h=d.length;if(u.pop(),o.push(u),u=null,h)if(1&s){if(n=d[0],(t=n.length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),e=0;e<t;++e)i.point((r=n[e])[0],r[1]);i.lineEnd()}}else h>1&&2&s&&d.push(d.pop().concat(d.shift())),a.push(d.filter(bv))}return d}};function bv(e){return e.length>1}function yv(e,t){return((e=e.x)[0]<0?e[1]-zg-Dg:zg-e[1])-((t=t.x)[0]<0?t[1]-zg-Dg:zg-t[1])}var xv=vv((function(){return!0}),wv,Ev,[-Mg,-zg]);function wv(e){var t,n=NaN,r=NaN,i=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(o,a){var u=o>0?Mg:-Mg,s=Pg(o-n);Pg(s-Mg)<Dg?(e.point(n,r=(r+a)/2>0?zg:-zg),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(u,r),e.point(o,r),t=0):i!==u&&s>=Mg&&(Pg(n-i)<Dg&&(n-=i*Dg),Pg(o-u)<Dg&&(o-=u*Dg),r=Ov(n,r,o,a),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(u,r),t=0),e.point(n=o,r=a),i=u},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}function Ov(e,t,n,r){var i,o,a=Hg(e-n);return Pg(a)>Dg?Ig((Hg(t)*(o=$g(r))*Hg(n)-Hg(r)*(i=$g(t))*Hg(e))/(i*o*a)):(t+r)/2}function Ev(e,t,n,r){var i;if(null==e)i=n*zg,r.point(-Mg,i),r.point(0,i),r.point(Mg,i),r.point(Mg,0),r.point(Mg,-i),r.point(0,-i),r.point(-Mg,-i),r.point(-Mg,0),r.point(-Mg,i);else if(Pg(e[0]-t[0])>Dg){var o=e[0]<t[0]?Mg:-Mg;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(t[0],t[1])}var kv=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return n=t.invert(n,r),n&&e.invert(n[0],n[1])}),n};function _v(e,t){return[Pg(e)>Mg?e+Math.round(-e/Tg)*Tg:e,t]}function Av(e,t,n){return(e%=Tg)?t||n?kv(jv(e),Cv(t,n)):jv(e):t||n?Cv(t,n):_v}function Sv(e){return function(t,n){return t+=e,[t>Mg?t-Tg:t<-Mg?t+Tg:t,n]}}function jv(e){var t=Sv(e);return t.invert=Sv(-e),t}function Cv(e,t){var n=$g(e),r=Hg(e),i=$g(t),o=Hg(t);function a(e,t){var a=$g(t),u=$g(e)*a,s=Hg(e)*a,c=Hg(t),l=c*n+u*r;return[Lg(s*i-l*o,u*n-c*r),Jg(l*i+s*o)]}return a.invert=function(e,t){var a=$g(t),u=$g(e)*a,s=Hg(e)*a,c=Hg(t),l=c*i-s*o;return[Lg(s*i+c*o,u*n+l*r),Jg(l*n-u*r)]},a}_v.invert=_v;var Dv=function(e){function t(t){return t=e(t[0]*Bg,t[1]*Bg),t[0]*=Rg,t[1]*=Rg,t}return e=Av(e[0]*Bg,e[1]*Bg,e.length>2?e[2]*Bg:0),t.invert=function(t){return t=e.invert(t[0]*Bg,t[1]*Bg),t[0]*=Rg,t[1]*=Rg,t},t};function Fv(e,t,n,r,i,o){if(n){var a=$g(t),u=Hg(t),s=r*n;null==i?(i=t+r*Tg,o=t-s/2):(i=Mv(a,i),o=Mv(a,o),(r>0?i<o:i>o)&&(i+=r*Tg));for(var c,l=i;r>0?l>o:l<o;l-=s)c=av([a,-u*$g(l),-u*Hg(l)]),e.point(c[0],c[1])}}function Mv(e,t){t=uv(t),t[0]-=e,dv(t);var n=Xg(-t[1]);return((-t[2]<0?-n:n)+Tg-Dg)%Tg}var zv=function(e){var t=$g(e),n=6*Bg,r=t>0,i=Pg(t)>Dg;function o(t,r,i,o){Fv(o,e,n,i,t,r)}function a(e,n){return $g(e)*$g(n)>t}function u(e){var t,n,o,u,l;return{lineStart:function(){u=o=!1,l=1},point:function(f,d){var h,p=[f,d],g=a(f,d),m=r?g?0:c(f,d):g?c(f+(f<0?Mg:-Mg),d):0;if(!t&&(u=o=g)&&e.lineStart(),g!==o&&(h=s(t,p),(!h||nv(t,h)||nv(p,h))&&(p[2]=1)),g!==o)l=0,g?(e.lineStart(),h=s(p,t),e.point(h[0],h[1])):(h=s(t,p),e.point(h[0],h[1],2),e.lineEnd()),t=h;else if(i&&t&&r^g){var v;m&n||!(v=s(p,t,!0))||(l=0,r?(e.lineStart(),e.point(v[0][0],v[0][1]),e.point(v[1][0],v[1][1]),e.lineEnd()):(e.point(v[1][0],v[1][1]),e.lineEnd(),e.lineStart(),e.point(v[0][0],v[0][1],3)))}!g||t&&nv(t,p)||e.point(p[0],p[1]),t=p,o=g,n=m},lineEnd:function(){o&&e.lineEnd(),t=null},clean:function(){return l|(u&&o)<<1}}}function s(e,n,r){var i=uv(e),o=uv(n),a=[1,0,0],u=cv(i,o),s=sv(u,u),c=u[0],l=s-c*c;if(!l)return!r&&e;var f=t*s/l,d=-t*c/l,h=cv(a,u),p=fv(a,f),g=fv(u,d);lv(p,g);var m=h,v=sv(p,m),b=sv(m,m),y=v*v-b*(sv(p,p)-1);if(!(y<0)){var x=Yg(y),w=fv(m,(-v-x)/b);if(lv(w,p),w=av(w),!r)return w;var O,E=e[0],k=n[0],_=e[1],A=n[1];k<E&&(O=E,E=k,k=O);var S=k-E,j=Pg(S-Mg)<Dg,C=j||S<Dg;if(!j&&A<_&&(O=_,_=A,A=O),C?j?_+A>0^w[1]<(Pg(w[0]-E)<Dg?_:A):_<=w[1]&&w[1]<=A:S>Mg^(E<=w[0]&&w[0]<=k)){var D=fv(m,(-v+x)/b);return lv(D,p),[w,av(D)]}}}function c(t,n){var i=r?e:Mg-e,o=0;return t<-i?o|=1:t>i&&(o|=2),n<-i?o|=4:n>i&&(o|=8),o}return vv(a,u,o,r?[0,-e]:[-Mg,e-Mg])},Nv=function(e,t,n,r,i,o){var a,u=e[0],s=e[1],c=t[0],l=t[1],f=0,d=1,h=c-u,p=l-s;if(a=n-u,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<d&&(d=a)}else if(h>0){if(a>d)return;a>f&&(f=a)}if(a=i-u,h||!(a<0)){if(a/=h,h<0){if(a>d)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<d&&(d=a)}if(a=r-s,p||!(a>0)){if(a/=p,p<0){if(a<f)return;a<d&&(d=a)}else if(p>0){if(a>d)return;a>f&&(f=a)}if(a=o-s,p||!(a<0)){if(a/=p,p<0){if(a>d)return;a>f&&(f=a)}else if(p>0){if(a<f)return;a<d&&(d=a)}return f>0&&(e[0]=u+f*h,e[1]=s+f*p),d<1&&(t[0]=u+d*h,t[1]=s+d*p),!0}}}}},Tv=1e9,Rv=-Tv;function Bv(e,t,n,r){function i(i,o){return e<=i&&i<=n&&t<=o&&o<=r}function o(i,o,u,c){var l=0,f=0;if(null==i||(l=a(i,u))!==(f=a(o,u))||s(i,o)<0^u>0)do{c.point(0===l||3===l?e:n,l>1?r:t)}while((l=(l+u+4)%4)!==f);else c.point(o[0],o[1])}function a(r,i){return Pg(r[0]-e)<Dg?i>0?0:3:Pg(r[0]-n)<Dg?i>0?2:1:Pg(r[1]-t)<Dg?i>0?1:0:i>0?3:2}function u(e,t){return s(e.x,t.x)}function s(e,t){var n=a(e,1),r=a(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(a){var s,c,l,f,d,h,p,g,m,v,b,y=a,x=tv(),w={point:O,lineStart:A,lineEnd:S,polygonStart:k,polygonEnd:_};function O(e,t){i(e,t)&&y.point(e,t)}function E(){for(var t=0,n=0,i=c.length;n<i;++n)for(var o,a,u=c[n],s=1,l=u.length,f=u[0],d=f[0],h=f[1];s<l;++s)o=d,a=h,f=u[s],d=f[0],h=f[1],a<=r?h>r&&(d-o)*(r-a)>(h-a)*(e-o)&&++t:h<=r&&(d-o)*(r-a)<(h-a)*(e-o)&&--t;return t}function k(){y=x,s=[],c=[],b=!0}function _(){var e=E(),t=b&&e,n=(s=mv(s)).length;(t||n)&&(a.polygonStart(),t&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),n&&iv(s,u,e,o,a),a.polygonEnd()),y=a,s=c=l=null}function A(){w.point=j,c&&c.push(l=[]),v=!0,m=!1,p=g=NaN}function S(){s&&(j(f,d),h&&m&&x.rejoin(),s.push(x.result())),w.point=O,m&&y.lineEnd()}function j(o,a){var u=i(o,a);if(c&&l.push([o,a]),v)f=o,d=a,h=u,v=!1,u&&(y.lineStart(),y.point(o,a));else if(u&&m)y.point(o,a);else{var s=[p=Math.max(Rv,Math.min(Tv,p)),g=Math.max(Rv,Math.min(Tv,g))],x=[o=Math.max(Rv,Math.min(Tv,o)),a=Math.max(Rv,Math.min(Tv,a))];Nv(s,x,e,t,n,r)?(m||(y.lineStart(),y.point(s[0],s[1])),y.point(x[0],x[1]),u||y.lineEnd(),b=!1):u&&(y.lineStart(),y.point(o,a),b=!1)}p=o,g=a,m=u}return w}}function Pv(e){return function(t){var n=new Iv;for(var r in e)n[r]=e[r];return n.stream=t,n}}function Iv(){}function Lv(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),jg(n,e.stream(xm)),t(xm.result()),null!=r&&e.clipExtent(r),e}function $v(e,t,n){return Lv(e,(function(n){var r=t[1][0]-t[0][0],i=t[1][1]-t[0][1],o=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),a=+t[0][0]+(r-o*(n[1][0]+n[0][0]))/2,u=+t[0][1]+(i-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([a,u])}),n)}function Uv(e,t,n){return $v(e,[[0,0],t],n)}function qv(e,t,n){return Lv(e,(function(n){var r=+t,i=r/(n[1][0]-n[0][0]),o=(r-i*(n[1][0]+n[0][0]))/2,a=-i*n[0][1];e.scale(150*i).translate([o,a])}),n)}function Wv(e,t,n){return Lv(e,(function(n){var r=+t,i=r/(n[1][1]-n[0][1]),o=-i*n[0][0],a=(r-i*(n[1][1]+n[0][1]))/2;e.scale(150*i).translate([o,a])}),n)}Iv.prototype={constructor:Iv,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Hv=16,Gv=$g(30*Bg),Yv=function(e,t){return+t?Xv(e,t):Vv(e)};function Vv(e){return Pv({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}function Xv(e,t){function n(r,i,o,a,u,s,c,l,f,d,h,p,g,m){var v=c-r,b=l-i,y=v*v+b*b;if(y>4*t&&g--){var x=a+d,w=u+h,O=s+p,E=Yg(x*x+w*w+O*O),k=Jg(O/=E),_=Pg(Pg(O)-1)<Dg||Pg(o-f)<Dg?(o+f)/2:Lg(w,x),A=e(_,k),S=A[0],j=A[1],C=S-r,D=j-i,F=b*C-v*D;(F*F/y>t||Pg((v*C+b*D)/y-.5)>.3||a*d+u*h+s*p<Gv)&&(n(r,i,o,a,u,s,S,j,_,x/=E,w/=E,O,g,m),m.point(S,j),n(S,j,_,x,w,O,c,l,f,d,h,p,g,m))}}return function(t){var r,i,o,a,u,s,c,l,f,d,h,p,g={point:m,lineStart:v,lineEnd:y,polygonStart:function(){t.polygonStart(),g.lineStart=x},polygonEnd:function(){t.polygonEnd(),g.lineStart=v}};function m(n,r){n=e(n,r),t.point(n[0],n[1])}function v(){l=NaN,g.point=b,t.lineStart()}function b(r,i){var o=uv([r,i]),a=e(r,i);n(l,f,c,d,h,p,l=a[0],f=a[1],c=r,d=o[0],h=o[1],p=o[2],Hv,t),t.point(l,f)}function y(){g.point=m,t.lineEnd()}function x(){v(),g.point=w,g.lineEnd=O}function w(e,t){b(r=e,t),i=l,o=f,a=d,u=h,s=p,g.point=b}function O(){n(l,f,c,d,h,p,i,o,r,a,u,s,Hv,t),g.lineEnd=y,y()}return g}}var Jv=Pv({point:function(e,t){this.stream.point(e*Bg,t*Bg)}});function Qv(e){return Pv({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}function Kv(e,t,n,r,i){function o(o,a){return o*=r,a*=i,[t+e*o,n-e*a]}return o.invert=function(o,a){return[(o-t)/e*r,(n-a)/e*i]},o}function Zv(e,t,n,r,i,o){if(!o)return Kv(e,t,n,r,i);var a=$g(o),u=Hg(o),s=a*e,c=u*e,l=a/e,f=u/e,d=(u*n-a*t)/e,h=(u*t+a*n)/e;function p(e,o){return e*=r,o*=i,[s*e-c*o+t,n-c*e-s*o]}return p.invert=function(e,t){return[r*(l*e-f*t+d),i*(h-f*e-l*t)]},p}function eb(e){return tb((function(){return e}))()}function tb(e){var t,n,r,i,o,a,u,s,c,l,f=150,d=480,h=250,p=0,g=0,m=0,v=0,b=0,y=0,x=1,w=1,O=null,E=xv,k=null,_=Og,A=.5;function S(e){return s(e[0]*Bg,e[1]*Bg)}function j(e){return e=s.invert(e[0],e[1]),e&&[e[0]*Rg,e[1]*Rg]}function C(){var e=Zv(f,0,0,x,w,y).apply(null,t(p,g)),r=Zv(f,d-e[0],h-e[1],x,w,y);return n=Av(m,v,b),u=kv(t,r),s=kv(n,u),a=Yv(u,A),D()}function D(){return c=l=null,S}return S.stream=function(e){return c&&l===e?c:c=Jv(Qv(n)(E(a(_(l=e)))))},S.preclip=function(e){return arguments.length?(E=e,O=void 0,D()):E},S.postclip=function(e){return arguments.length?(_=e,k=r=i=o=null,D()):_},S.clipAngle=function(e){return arguments.length?(E=+e?zv(O=e*Bg):(O=null,xv),D()):O*Rg},S.clipExtent=function(e){return arguments.length?(_=null==e?(k=r=i=o=null,Og):Bv(k=+e[0][0],r=+e[0][1],i=+e[1][0],o=+e[1][1]),D()):null==k?null:[[k,r],[i,o]]},S.scale=function(e){return arguments.length?(f=+e,C()):f},S.translate=function(e){return arguments.length?(d=+e[0],h=+e[1],C()):[d,h]},S.center=function(e){return arguments.length?(p=e[0]%360*Bg,g=e[1]%360*Bg,C()):[p*Rg,g*Rg]},S.rotate=function(e){return arguments.length?(m=e[0]%360*Bg,v=e[1]%360*Bg,b=e.length>2?e[2]%360*Bg:0,C()):[m*Rg,v*Rg,b*Rg]},S.angle=function(e){return arguments.length?(y=e%360*Bg,C()):y*Rg},S.reflectX=function(e){return arguments.length?(x=e?-1:1,C()):x<0},S.reflectY=function(e){return arguments.length?(w=e?-1:1,C()):w<0},S.precision=function(e){return arguments.length?(a=Yv(u,A=e*e),D()):Yg(A)},S.fitExtent=function(e,t){return $v(S,e,t)},S.fitSize=function(e,t){return Uv(S,e,t)},S.fitWidth=function(e,t){return qv(S,e,t)},S.fitHeight=function(e,t){return Wv(S,e,t)},function(){return t=e.apply(this,arguments),S.invert=t.invert&&j,C()}}function nb(e){var t=0,n=Mg/3,r=tb(e),i=r(t,n);return i.parallels=function(e){return arguments.length?r(t=e[0]*Bg,n=e[1]*Bg):[t*Rg,n*Rg]},i}function rb(e){var t=$g(e);function n(e,n){return[e*t,Hg(n)/t]}return n.invert=function(e,n){return[e/t,Jg(n*t)]},n}function ib(e,t){var n=Hg(e),r=(n+Hg(t))/2;if(Pg(r)<Dg)return rb(e);var i=1+n*(2*r-n),o=Yg(i)/r;function a(e,t){var n=Yg(i-2*r*Hg(t))/r;return[n*Hg(e*=r),o-n*$g(e)]}return a.invert=function(e,t){var n=o-t,a=Lg(e,Pg(n))*Gg(n);return n*r<0&&(a-=Mg*Gg(e)*Gg(n)),[a/r,Jg((i-(e*e+n*n)*r*r)/(2*r))]},a}var ob=function(){return nb(ib).scale(155.424).center([0,33.6442])},ab=function(){return ob().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};function ub(e){var t=e.length;return{point:function(n,r){var i=-1;while(++i<t)e[i].point(n,r)},sphere:function(){var n=-1;while(++n<t)e[n].sphere()},lineStart:function(){var n=-1;while(++n<t)e[n].lineStart()},lineEnd:function(){var n=-1;while(++n<t)e[n].lineEnd()},polygonStart:function(){var n=-1;while(++n<t)e[n].polygonStart()},polygonEnd:function(){var n=-1;while(++n<t)e[n].polygonEnd()}}}var sb=function(){var e,t,n,r,i,o,a=ab(),u=ob().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=ob().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(e,t){o=[e,t]}};function l(e){var t=e[0],a=e[1];return o=null,n.point(t,a),o||(r.point(t,a),o)||(i.point(t,a),o)}function f(){return e=t=null,l}return l.invert=function(e){var t=a.scale(),n=a.translate(),r=(e[0]-n[0])/t,i=(e[1]-n[1])/t;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?s:a).invert(e)},l.stream=function(n){return e&&t===n?e:e=ub([a.stream(t=n),u.stream(n),s.stream(n)])},l.precision=function(e){return arguments.length?(a.precision(e),u.precision(e),s.precision(e),f()):a.precision()},l.scale=function(e){return arguments.length?(a.scale(e),u.scale(.35*e),s.scale(e),l.translate(a.translate())):a.scale()},l.translate=function(e){if(!arguments.length)return a.translate();var t=a.scale(),o=+e[0],l=+e[1];return n=a.translate(e).clipExtent([[o-.455*t,l-.238*t],[o+.455*t,l+.238*t]]).stream(c),r=u.translate([o-.307*t,l+.201*t]).clipExtent([[o-.425*t+Dg,l+.12*t+Dg],[o-.214*t-Dg,l+.234*t-Dg]]).stream(c),i=s.translate([o-.205*t,l+.212*t]).clipExtent([[o-.214*t+Dg,l+.166*t+Dg],[o-.115*t-Dg,l+.234*t-Dg]]).stream(c),f()},l.fitExtent=function(e,t){return $v(l,e,t)},l.fitSize=function(e,t){return Uv(l,e,t)},l.fitWidth=function(e,t){return qv(l,e,t)},l.fitHeight=function(e,t){return Wv(l,e,t)},l.scale(1070)};function cb(e){return function(t,n){var r=$g(t),i=$g(n),o=e(r*i);return o===1/0?[2,0]:[o*i*Hg(t),o*Hg(n)]}}function lb(e){return function(t,n){var r=Yg(t*t+n*n),i=e(r),o=Hg(i),a=$g(i);return[Lg(t*o,r*a),Jg(r&&n*o/r)]}}var fb=cb((function(e){return Yg(2/(1+e))}));fb.invert=lb((function(e){return 2*Jg(e/2)}));var db=function(){return eb(fb).scale(124.75).clipAngle(179.999)},hb=cb((function(e){return(e=Xg(e))&&e/Hg(e)}));hb.invert=lb((function(e){return e}));var pb=function(){return eb(hb).scale(79.4188).clipAngle(179.999)};function gb(e,t){return[e,qg(Vg((zg+t)/2))]}gb.invert=function(e,t){return[e,2*Ig(Ug(t))-zg]};var mb=function(){return vb(gb).scale(961/Tg)};function vb(e){var t,n,r,i=eb(e),o=i.center,a=i.scale,u=i.translate,s=i.clipExtent,c=null;function l(){var o=Mg*a(),u=i(Dv(i.rotate()).invert([0,0]));return s(null==c?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:e===gb?[[Math.max(u[0]-o,c),t],[Math.min(u[0]+o,n),r]]:[[c,Math.max(u[1]-o,t)],[n,Math.min(u[1]+o,r)]])}return i.scale=function(e){return arguments.length?(a(e),l()):a()},i.translate=function(e){return arguments.length?(u(e),l()):u()},i.center=function(e){return arguments.length?(o(e),l()):o()},i.clipExtent=function(e){return arguments.length?(null==e?c=t=n=r=null:(c=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),l()):null==c?null:[[c,t],[n,r]]},l()}function bb(e){return Vg((zg+e)/2)}function yb(e,t){var n=$g(e),r=e===t?Hg(e):qg(n/$g(t))/qg(bb(t)/bb(e)),i=n*Wg(bb(e),r)/r;if(!r)return gb;function o(e,t){i>0?t<-zg+Dg&&(t=-zg+Dg):t>zg-Dg&&(t=zg-Dg);var n=i/Wg(bb(t),r);return[n*Hg(r*e),i-n*$g(r*e)]}return o.invert=function(e,t){var n=i-t,o=Gg(r)*Yg(e*e+n*n),a=Lg(e,Pg(n))*Gg(n);return n*r<0&&(a-=Mg*Gg(e)*Gg(n)),[a/r,2*Ig(Wg(i/o,1/r))-zg]},o}var xb=function(){return nb(yb).scale(109.5).parallels([30,30])};function wb(e,t){return[e,t]}wb.invert=wb;var Ob=function(){return eb(wb).scale(152.63)};function Eb(e,t){var n=$g(e),r=e===t?Hg(e):(n-$g(t))/(t-e),i=n/r+e;if(Pg(r)<Dg)return wb;function o(e,t){var n=i-t,o=r*e;return[n*Hg(o),i-n*$g(o)]}return o.invert=function(e,t){var n=i-t,o=Lg(e,Pg(n))*Gg(n);return n*r<0&&(o-=Mg*Gg(e)*Gg(n)),[o/r,i-Gg(r)*Yg(e*e+n*n)]},o}var kb=function(){return nb(Eb).scale(131.154).center([0,13.9389])},_b=1.340264,Ab=-.081106,Sb=893e-6,jb=.003796,Cb=Yg(3)/2,Db=12;function Fb(e,t){var n=Jg(Cb*Hg(t)),r=n*n,i=r*r*r;return[e*$g(n)/(Cb*(_b+3*Ab*r+i*(7*Sb+9*jb*r))),n*(_b+Ab*r+i*(Sb+jb*r))]}Fb.invert=function(e,t){for(var n,r,i,o=t,a=o*o,u=a*a*a,s=0;s<Db;++s)if(r=o*(_b+Ab*a+u*(Sb+jb*a))-t,i=_b+3*Ab*a+u*(7*Sb+9*jb*a),o-=n=r/i,a=o*o,u=a*a*a,Pg(n)<Fg)break;return[Cb*e*(_b+3*Ab*a+u*(7*Sb+9*jb*a))/$g(o),Jg(Hg(o)/Cb)]};var Mb=function(){return eb(Fb).scale(177.158)};function zb(e,t){var n=$g(t),r=$g(e)*n;return[n*Hg(e)/r,Hg(t)/r]}zb.invert=lb(Ig);var Nb=function(){return eb(zb).scale(144.049).clipAngle(60)},Tb=function(){var e,t,n,r,i,o,a,u=1,s=0,c=0,l=1,f=1,d=0,h=null,p=1,g=1,m=Pv({point:function(e,t){var n=y([e,t]);this.stream.point(n[0],n[1])}}),v=Og;function b(){return p=u*l,g=u*f,o=a=null,y}function y(n){var r=n[0]*p,i=n[1]*g;if(d){var o=i*e-r*t;r=r*e+i*t,i=o}return[r+s,i+c]}return y.invert=function(n){var r=n[0]-s,i=n[1]-c;if(d){var o=i*e+r*t;r=r*e-i*t,i=o}return[r/p,i/g]},y.stream=function(e){return o&&a===e?o:o=m(v(a=e))},y.postclip=function(e){return arguments.length?(v=e,h=n=r=i=null,b()):v},y.clipExtent=function(e){return arguments.length?(v=null==e?(h=n=r=i=null,Og):Bv(h=+e[0][0],n=+e[0][1],r=+e[1][0],i=+e[1][1]),b()):null==h?null:[[h,n],[r,i]]},y.scale=function(e){return arguments.length?(u=+e,b()):u},y.translate=function(e){return arguments.length?(s=+e[0],c=+e[1],b()):[s,c]},y.angle=function(n){return arguments.length?(d=n%360*Bg,t=Hg(d),e=$g(d),b()):d*Rg},y.reflectX=function(e){return arguments.length?(l=e?-1:1,b()):l<0},y.reflectY=function(e){return arguments.length?(f=e?-1:1,b()):f<0},y.fitExtent=function(e,t){return $v(y,e,t)},y.fitSize=function(e,t){return Uv(y,e,t)},y.fitWidth=function(e,t){return qv(y,e,t)},y.fitHeight=function(e,t){return Wv(y,e,t)},y};function Rb(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Rb.invert=function(e,t){var n,r=t,i=25;do{var o=r*r,a=o*o;r-=n=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-t)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(Pg(n)>Dg&&--i>0);return[e/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Bb=function(){return eb(Rb).scale(175.295)};function Pb(e,t){return[$g(t)*Hg(e),Hg(t)]}Pb.invert=lb(Jg);var Ib=function(){return eb(Pb).scale(249.5).clipAngle(90+Dg)};function Lb(e,t){var n=$g(t),r=1+$g(e)*n;return[n*Hg(e)/r,Hg(t)/r]}Lb.invert=lb((function(e){return 2*Ig(e)}));var $b=function(){return eb(Lb).scale(250).clipAngle(142)};function Ub(e,t){return[qg(Vg((zg+t)/2)),-e]}Ub.invert=function(e,t){return[-t,2*Ig(Ug(e))-zg]};var qb=function(){var e=vb(Ub),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):(e=t(),[e[1],-e[0]])},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):(e=n(),[e[0],e[1],e[2]-90])},n([0,0,90]).scale(159.155)};function Wb(){}var Hb=function(){var e,t=[];return{point:function(t,n,r){e.push([t,n,r])},lineStart:function(){t.push(e=[])},lineEnd:Wb,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},Gb=1e-6,Yb=1e-12,Vb=Math.PI,Xb=Vb/2,Jb=Vb/4,Qb=2*Vb,Kb=180/Vb,Zb=Vb/180,ey=Math.abs,ty=Math.atan,ny=Math.atan2,ry=Math.cos,iy=(Math.ceil,Math.exp,Math.floor,Math.hypot,Math.log,Math.pow,Math.sin),oy=Math.sign||function(e){return e>0?1:e<0?-1:0},ay=Math.sqrt;Math.tan;function uy(e){return e>1?0:e<-1?Vb:Math.acos(e)}function sy(e){return e>1?Xb:e<-1?-Xb:Math.asin(e)}var cy=function(e,t){return ey(e[0]-t[0])<Gb&&ey(e[1]-t[1])<Gb};function ly(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var fy=function(e,t,n,r,i){var o,a,u=[],s=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],a=e[t];if(cy(r,a)){if(!r[2]&&!a[2]){for(i.lineStart(),o=0;o<t;++o)i.point((r=e[o])[0],r[1]);return void i.lineEnd()}a[0]+=2*Gb}u.push(n=new ly(r,e,null,!0)),s.push(n.o=new ly(r,null,n,!1)),u.push(n=new ly(a,e,null,!1)),s.push(n.o=new ly(a,null,n,!0))}})),u.length){for(s.sort(t),dy(u),dy(s),o=0,a=s.length;o<a;++o)s[o].e=n=!n;var c,l,f=u[0];while(1){var d=f,h=!0;while(d.v)if((d=d.n)===f)return;c=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(h)for(o=0,a=c.length;o<a;++o)i.point((l=c[o])[0],l[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(h)for(c=d.p.z,o=c.length-1;o>=0;--o)i.point((l=c[o])[0],l[1]);else r(d.x,d.p.x,-1,i);d=d.p}d=d.o,c=d.z,h=!h}while(!d.v);i.lineEnd()}}};function dy(e){if(t=e.length){var t,n,r=0,i=e[0];while(++r<t)i.n=n=e[r],n.p=i,i=n;i.n=n=e[0],n.p=i}}function hy(e){return[ny(e[1],e[0]),sy(e[2])]}function py(e){var t=e[0],n=e[1],r=ry(n);return[r*ry(t),r*iy(t),iy(n)]}function gy(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function my(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function vy(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function by(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function yy(e){var t=ay(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}function xy(e){return ey(e[0])<=Vb?e[0]:oy(e[0])*((ey(e[0])+Vb)%Qb-Vb)}var wy=function(e,t){var n=xy(t),r=t[1],i=iy(r),o=[iy(n),-ry(n),0],a=0,u=0,s=new Cg;1===i?r=Xb+Gb:-1===i&&(r=-Xb-Gb);for(var c=0,l=e.length;c<l;++c)if(d=(f=e[c]).length)for(var f,d,h=f[d-1],p=xy(h),g=h[1]/2+Jb,m=iy(g),v=ry(g),b=0;b<d;++b,p=x,m=O,v=E,h=y){var y=f[b],x=xy(y),w=y[1]/2+Jb,O=iy(w),E=ry(w),k=x-p,_=k>=0?1:-1,A=_*k,S=A>Vb,j=m*O;if(s.add(ny(j*_*iy(A),v*E+j*ry(A))),a+=S?k+_*Qb:k,S^p>=n^x>=n){var C=my(py(h),py(y));yy(C);var D=my(o,C);yy(D);var F=(S^k>=0?-1:1)*sy(D[2]);(r>F||r===F&&(C[0]||C[1]))&&(u+=S^k>=0?1:-1)}}return(a<-Gb||a<Gb&&s<-Yb)^1&u},Oy=function(e,t,n,r){return function(i){var o,a,u,s=t(i),c=Hb(),l=t(c),f=!1,d={point:h,lineStart:g,lineEnd:m,polygonStart:function(){d.point=v,d.lineStart=b,d.lineEnd=y,a=[],o=[]},polygonEnd:function(){d.point=h,d.lineStart=g,d.lineEnd=m,a=mv(a);var e=wy(o,r);a.length?(f||(i.polygonStart(),f=!0),fy(a,ky,e,n,i)):e&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function h(t,n){e(t,n)&&i.point(t,n)}function p(e,t){s.point(e,t)}function g(){d.point=p,s.lineStart()}function m(){d.point=h,s.lineEnd()}function v(e,t){u.push([e,t]),l.point(e,t)}function b(){l.lineStart(),u=[]}function y(){v(u[0][0],u[0][1]),l.lineEnd();var e,t,n,r,s=l.clean(),d=c.result(),h=d.length;if(u.pop(),o.push(u),u=null,h)if(1&s){if(n=d[0],(t=n.length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),e=0;e<t;++e)i.point((r=n[e])[0],r[1]);i.lineEnd()}}else h>1&&2&s&&d.push(d.pop().concat(d.shift())),a.push(d.filter(Ey))}return d}};function Ey(e){return e.length>1}function ky(e,t){return((e=e.x)[0]<0?e[1]-Xb-Gb:Xb-e[1])-((t=t.x)[0]<0?t[1]-Xb-Gb:Xb-t[1])}var _y=Oy((function(){return!0}),Ay,jy,[-Vb,-Xb]);function Ay(e){var t,n=NaN,r=NaN,i=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(o,a){var u=o>0?Vb:-Vb,s=ey(o-n);ey(s-Vb)<Gb?(e.point(n,r=(r+a)/2>0?Xb:-Xb),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(u,r),e.point(o,r),t=0):i!==u&&s>=Vb&&(ey(n-i)<Gb&&(n-=i*Gb),ey(o-u)<Gb&&(o-=u*Gb),r=Sy(n,r,o,a),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(u,r),t=0),e.point(n=o,r=a),i=u},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}function Sy(e,t,n,r){var i,o,a=iy(e-n);return ey(a)>Gb?ty((iy(t)*(o=ry(r))*iy(n)-iy(r)*(i=ry(t))*iy(e))/(i*o*a)):(t+r)/2}function jy(e,t,n,r){var i;if(null==e)i=n*Xb,r.point(-Vb,i),r.point(0,i),r.point(Vb,i),r.point(Vb,0),r.point(Vb,-i),r.point(0,-i),r.point(-Vb,-i),r.point(-Vb,0),r.point(-Vb,i);else if(ey(e[0]-t[0])>Gb){var o=e[0]<t[0]?Vb:-Vb;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(t[0],t[1])}var Cy=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return n=t.invert(n,r),n&&e.invert(n[0],n[1])}),n};function Dy(e,t){return[ey(e)>Vb?e+Math.round(-e/Qb)*Qb:e,t]}function Fy(e,t,n){return(e%=Qb)?t||n?Cy(zy(e),Ny(t,n)):zy(e):t||n?Ny(t,n):Dy}function My(e){return function(t,n){return t+=e,[t>Vb?t-Qb:t<-Vb?t+Qb:t,n]}}function zy(e){var t=My(e);return t.invert=My(-e),t}function Ny(e,t){var n=ry(e),r=iy(e),i=ry(t),o=iy(t);function a(e,t){var a=ry(t),u=ry(e)*a,s=iy(e)*a,c=iy(t),l=c*n+u*r;return[ny(s*i-l*o,u*n-c*r),sy(l*i+s*o)]}return a.invert=function(e,t){var a=ry(t),u=ry(e)*a,s=iy(e)*a,c=iy(t),l=c*i-s*o;return[ny(s*i+c*o,u*n+l*r),sy(l*n-u*r)]},a}Dy.invert=Dy;function Ty(e,t,n,r,i,o){if(n){var a=ry(t),u=iy(t),s=r*n;null==i?(i=t+r*Qb,o=t-s/2):(i=Ry(a,i),o=Ry(a,o),(r>0?i<o:i>o)&&(i+=r*Qb));for(var c,l=i;r>0?l>o:l<o;l-=s)c=hy([a,-u*ry(l),-u*iy(l)]),e.point(c[0],c[1])}}function Ry(e,t){t=py(t),t[0]-=e,yy(t);var n=uy(-t[1]);return((-t[2]<0?-n:n)+Qb-Gb)%Qb}var By=function(e){var t=ry(e),n=6*Zb,r=t>0,i=ey(t)>Gb;function o(t,r,i,o){Ty(o,e,n,i,t,r)}function a(e,n){return ry(e)*ry(n)>t}function u(e){var t,n,o,u,l;return{lineStart:function(){u=o=!1,l=1},point:function(f,d){var h,p=[f,d],g=a(f,d),m=r?g?0:c(f,d):g?c(f+(f<0?Vb:-Vb),d):0;if(!t&&(u=o=g)&&e.lineStart(),g!==o&&(h=s(t,p),(!h||cy(t,h)||cy(p,h))&&(p[2]=1)),g!==o)l=0,g?(e.lineStart(),h=s(p,t),e.point(h[0],h[1])):(h=s(t,p),e.point(h[0],h[1],2),e.lineEnd()),t=h;else if(i&&t&&r^g){var v;m&n||!(v=s(p,t,!0))||(l=0,r?(e.lineStart(),e.point(v[0][0],v[0][1]),e.point(v[1][0],v[1][1]),e.lineEnd()):(e.point(v[1][0],v[1][1]),e.lineEnd(),e.lineStart(),e.point(v[0][0],v[0][1],3)))}!g||t&&cy(t,p)||e.point(p[0],p[1]),t=p,o=g,n=m},lineEnd:function(){o&&e.lineEnd(),t=null},clean:function(){return l|(u&&o)<<1}}}function s(e,n,r){var i=py(e),o=py(n),a=[1,0,0],u=my(i,o),s=gy(u,u),c=u[0],l=s-c*c;if(!l)return!r&&e;var f=t*s/l,d=-t*c/l,h=my(a,u),p=by(a,f),g=by(u,d);vy(p,g);var m=h,v=gy(p,m),b=gy(m,m),y=v*v-b*(gy(p,p)-1);if(!(y<0)){var x=ay(y),w=by(m,(-v-x)/b);if(vy(w,p),w=hy(w),!r)return w;var O,E=e[0],k=n[0],_=e[1],A=n[1];k<E&&(O=E,E=k,k=O);var S=k-E,j=ey(S-Vb)<Gb,C=j||S<Gb;if(!j&&A<_&&(O=_,_=A,A=O),C?j?_+A>0^w[1]<(ey(w[0]-E)<Gb?_:A):_<=w[1]&&w[1]<=A:S>Vb^(E<=w[0]&&w[0]<=k)){var D=by(m,(-v+x)/b);return vy(D,p),[w,hy(D)]}}}function c(t,n){var i=r?e:Vb-e,o=0;return t<-i?o|=1:t>i&&(o|=2),n<-i?o|=4:n>i&&(o|=8),o}return Oy(a,u,o,r?[0,-e]:[-Vb,e-Vb])},Py=function(e,t,n,r,i,o){var a,u=e[0],s=e[1],c=t[0],l=t[1],f=0,d=1,h=c-u,p=l-s;if(a=n-u,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<d&&(d=a)}else if(h>0){if(a>d)return;a>f&&(f=a)}if(a=i-u,h||!(a<0)){if(a/=h,h<0){if(a>d)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<d&&(d=a)}if(a=r-s,p||!(a>0)){if(a/=p,p<0){if(a<f)return;a<d&&(d=a)}else if(p>0){if(a>d)return;a>f&&(f=a)}if(a=o-s,p||!(a<0)){if(a/=p,p<0){if(a>d)return;a>f&&(f=a)}else if(p>0){if(a<f)return;a<d&&(d=a)}return f>0&&(e[0]=u+f*h,e[1]=s+f*p),d<1&&(t[0]=u+d*h,t[1]=s+d*p),!0}}}}},Iy=1e9,Ly=-Iy;function $y(e,t,n,r){function i(i,o){return e<=i&&i<=n&&t<=o&&o<=r}function o(i,o,u,c){var l=0,f=0;if(null==i||(l=a(i,u))!==(f=a(o,u))||s(i,o)<0^u>0)do{c.point(0===l||3===l?e:n,l>1?r:t)}while((l=(l+u+4)%4)!==f);else c.point(o[0],o[1])}function a(r,i){return ey(r[0]-e)<Gb?i>0?0:3:ey(r[0]-n)<Gb?i>0?2:1:ey(r[1]-t)<Gb?i>0?1:0:i>0?3:2}function u(e,t){return s(e.x,t.x)}function s(e,t){var n=a(e,1),r=a(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(a){var s,c,l,f,d,h,p,g,m,v,b,y=a,x=Hb(),w={point:O,lineStart:A,lineEnd:S,polygonStart:k,polygonEnd:_};function O(e,t){i(e,t)&&y.point(e,t)}function E(){for(var t=0,n=0,i=c.length;n<i;++n)for(var o,a,u=c[n],s=1,l=u.length,f=u[0],d=f[0],h=f[1];s<l;++s)o=d,a=h,f=u[s],d=f[0],h=f[1],a<=r?h>r&&(d-o)*(r-a)>(h-a)*(e-o)&&++t:h<=r&&(d-o)*(r-a)<(h-a)*(e-o)&&--t;return t}function k(){y=x,s=[],c=[],b=!0}function _(){var e=E(),t=b&&e,n=(s=mv(s)).length;(t||n)&&(a.polygonStart(),t&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),n&&fy(s,u,e,o,a),a.polygonEnd()),y=a,s=c=l=null}function A(){w.point=j,c&&c.push(l=[]),v=!0,m=!1,p=g=NaN}function S(){s&&(j(f,d),h&&m&&x.rejoin(),s.push(x.result())),w.point=O,m&&y.lineEnd()}function j(o,a){var u=i(o,a);if(c&&l.push([o,a]),v)f=o,d=a,h=u,v=!1,u&&(y.lineStart(),y.point(o,a));else if(u&&m)y.point(o,a);else{var s=[p=Math.max(Ly,Math.min(Iy,p)),g=Math.max(Ly,Math.min(Iy,g))],x=[o=Math.max(Ly,Math.min(Iy,o)),a=Math.max(Ly,Math.min(Iy,a))];Py(s,x,e,t,n,r)?(m||(y.lineStart(),y.point(s[0],s[1])),y.point(x[0],x[1]),u||y.lineEnd(),b=!1):u&&(y.lineStart(),y.point(o,a),b=!1)}p=o,g=a,m=u}return w}}var Uy=e=>e;function qy(e){return function(t){var n=new Wy;for(var r in e)n[r]=e[r];return n.stream=t,n}}function Wy(){}function Hy(e,t){e&&Yy.hasOwnProperty(e.type)&&Yy[e.type](e,t)}Wy.prototype={constructor:Wy,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Gy={Feature:function(e,t){Hy(e.geometry,t)},FeatureCollection:function(e,t){var n=e.features,r=-1,i=n.length;while(++r<i)Hy(n[r].geometry,t)}},Yy={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){var n=e.coordinates,r=-1,i=n.length;while(++r<i)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){Vy(e.coordinates,t,0)},MultiLineString:function(e,t){var n=e.coordinates,r=-1,i=n.length;while(++r<i)Vy(n[r],t,0)},Polygon:function(e,t){Xy(e.coordinates,t)},MultiPolygon:function(e,t){var n=e.coordinates,r=-1,i=n.length;while(++r<i)Xy(n[r],t)},GeometryCollection:function(e,t){var n=e.geometries,r=-1,i=n.length;while(++r<i)Hy(n[r],t)}};function Vy(e,t,n){var r,i=-1,o=e.length-n;t.lineStart();while(++i<o)r=e[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function Xy(e,t){var n=-1,r=e.length;t.polygonStart();while(++n<r)Vy(e[n],t,1);t.polygonEnd()}var Jy=function(e,t){e&&Gy.hasOwnProperty(e.type)?Gy[e.type](e,t):Hy(e,t)},Qy=1/0,Ky=Qy,Zy=-Qy,ex=Zy,tx={point:nx,lineStart:Wb,lineEnd:Wb,polygonStart:Wb,polygonEnd:Wb,result:function(){var e=[[Qy,Ky],[Zy,ex]];return Zy=ex=-(Ky=Qy=1/0),e}};function nx(e,t){e<Qy&&(Qy=e),e>Zy&&(Zy=e),t<Ky&&(Ky=t),t>ex&&(ex=t)}var rx=tx;function ix(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),Jy(n,e.stream(rx)),t(rx.result()),null!=r&&e.clipExtent(r),e}function ox(e,t,n){return ix(e,(function(n){var r=t[1][0]-t[0][0],i=t[1][1]-t[0][1],o=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),a=+t[0][0]+(r-o*(n[1][0]+n[0][0]))/2,u=+t[0][1]+(i-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([a,u])}),n)}function ax(e,t,n){return ox(e,[[0,0],t],n)}function ux(e,t,n){return ix(e,(function(n){var r=+t,i=r/(n[1][0]-n[0][0]),o=(r-i*(n[1][0]+n[0][0]))/2,a=-i*n[0][1];e.scale(150*i).translate([o,a])}),n)}function sx(e,t,n){return ix(e,(function(n){var r=+t,i=r/(n[1][1]-n[0][1]),o=-i*n[0][0],a=(r-i*(n[1][1]+n[0][1]))/2;e.scale(150*i).translate([o,a])}),n)}var cx=16,lx=ry(30*Zb),fx=function(e,t){return+t?hx(e,t):dx(e)};function dx(e){return qy({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}function hx(e,t){function n(r,i,o,a,u,s,c,l,f,d,h,p,g,m){var v=c-r,b=l-i,y=v*v+b*b;if(y>4*t&&g--){var x=a+d,w=u+h,O=s+p,E=ay(x*x+w*w+O*O),k=sy(O/=E),_=ey(ey(O)-1)<Gb||ey(o-f)<Gb?(o+f)/2:ny(w,x),A=e(_,k),S=A[0],j=A[1],C=S-r,D=j-i,F=b*C-v*D;(F*F/y>t||ey((v*C+b*D)/y-.5)>.3||a*d+u*h+s*p<lx)&&(n(r,i,o,a,u,s,S,j,_,x/=E,w/=E,O,g,m),m.point(S,j),n(S,j,_,x,w,O,c,l,f,d,h,p,g,m))}}return function(t){var r,i,o,a,u,s,c,l,f,d,h,p,g={point:m,lineStart:v,lineEnd:y,polygonStart:function(){t.polygonStart(),g.lineStart=x},polygonEnd:function(){t.polygonEnd(),g.lineStart=v}};function m(n,r){n=e(n,r),t.point(n[0],n[1])}function v(){l=NaN,g.point=b,t.lineStart()}function b(r,i){var o=py([r,i]),a=e(r,i);n(l,f,c,d,h,p,l=a[0],f=a[1],c=r,d=o[0],h=o[1],p=o[2],cx,t),t.point(l,f)}function y(){g.point=m,t.lineEnd()}function x(){v(),g.point=w,g.lineEnd=O}function w(e,t){b(r=e,t),i=l,o=f,a=d,u=h,s=p,g.point=b}function O(){n(l,f,c,d,h,p,i,o,r,a,u,s,cx,t),g.lineEnd=y,y()}return g}}var px=qy({point:function(e,t){this.stream.point(e*Zb,t*Zb)}});function gx(e){return qy({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}function mx(e,t,n,r,i){function o(o,a){return o*=r,a*=i,[t+e*o,n-e*a]}return o.invert=function(o,a){return[(o-t)/e*r,(n-a)/e*i]},o}function vx(e,t,n,r,i,o){if(!o)return mx(e,t,n,r,i);var a=ry(o),u=iy(o),s=a*e,c=u*e,l=a/e,f=u/e,d=(u*n-a*t)/e,h=(u*t+a*n)/e;function p(e,o){return e*=r,o*=i,[s*e-c*o+t,n-c*e-s*o]}return p.invert=function(e,t){return[r*(l*e-f*t+d),i*(h-f*e-l*t)]},p}function bx(e){return yx((function(){return e}))()}function yx(e){var t,n,r,i,o,a,u,s,c,l,f=150,d=480,h=250,p=0,g=0,m=0,v=0,b=0,y=0,x=1,w=1,O=null,E=_y,k=null,_=Uy,A=.5;function S(e){return s(e[0]*Zb,e[1]*Zb)}function j(e){return e=s.invert(e[0],e[1]),e&&[e[0]*Kb,e[1]*Kb]}function C(){var e=vx(f,0,0,x,w,y).apply(null,t(p,g)),r=vx(f,d-e[0],h-e[1],x,w,y);return n=Fy(m,v,b),u=Cy(t,r),s=Cy(n,u),a=fx(u,A),D()}function D(){return c=l=null,S}return S.stream=function(e){return c&&l===e?c:c=px(gx(n)(E(a(_(l=e)))))},S.preclip=function(e){return arguments.length?(E=e,O=void 0,D()):E},S.postclip=function(e){return arguments.length?(_=e,k=r=i=o=null,D()):_},S.clipAngle=function(e){return arguments.length?(E=+e?By(O=e*Zb):(O=null,_y),D()):O*Kb},S.clipExtent=function(e){return arguments.length?(_=null==e?(k=r=i=o=null,Uy):$y(k=+e[0][0],r=+e[0][1],i=+e[1][0],o=+e[1][1]),D()):null==k?null:[[k,r],[i,o]]},S.scale=function(e){return arguments.length?(f=+e,C()):f},S.translate=function(e){return arguments.length?(d=+e[0],h=+e[1],C()):[d,h]},S.center=function(e){return arguments.length?(p=e[0]%360*Zb,g=e[1]%360*Zb,C()):[p*Kb,g*Kb]},S.rotate=function(e){return arguments.length?(m=e[0]%360*Zb,v=e[1]%360*Zb,b=e.length>2?e[2]%360*Zb:0,C()):[m*Kb,v*Kb,b*Kb]},S.angle=function(e){return arguments.length?(y=e%360*Zb,C()):y*Kb},S.reflectX=function(e){return arguments.length?(x=e?-1:1,C()):x<0},S.reflectY=function(e){return arguments.length?(w=e?-1:1,C()):w<0},S.precision=function(e){return arguments.length?(a=fx(u,A=e*e),D()):ay(A)},S.fitExtent=function(e,t){return ox(S,e,t)},S.fitSize=function(e,t){return ax(S,e,t)},S.fitWidth=function(e,t){return ux(S,e,t)},S.fitHeight=function(e,t){return sx(S,e,t)},function(){return t=e.apply(this,arguments),S.invert=t.invert&&j,C()}}var xx=Math.abs,wx=(Math.atan,Math.atan2,Math.ceil,Math.cos),Ox=(Math.exp,Math.floor,Math.log,Math.max,Math.min,Math.pow,Math.round,Math.sign,Math.sin),Ex=(Math.tan,1e-6),kx=Math.PI,_x=kx/2,Ax=(Math.SQRT1_2,jx(2));jx(kx);function Sx(e){return e>1?_x:e<-1?-_x:Math.asin(e)}function jx(e){return e>0?Math.sqrt(e):0}function Cx(e,t){var n,r=e*Ox(t),i=30;do{t-=n=(t+Ox(t)-r)/(1+wx(t))}while(xx(n)>Ex&&--i>0);return t/2}function Dx(e,t,n){function r(r,i){return[e*r*wx(i=Cx(n,i)),t*Ox(i)]}return r.invert=function(r,i){return i=Sx(i/t),[r/(e*wx(i)),Sx((2*i+Ox(2*i))/n)]},r}var Fx=Dx(Ax/_x,Ax,kx),Mx=function(){return bx(Fx).scale(169.529)};const zx=ev(),Nx=["clipAngle","clipExtent","scale","translate","center","rotate","parallels","precision","reflectX","reflectY","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"];function Tx(e,t){return function n(){const r=t();return r.type=e,r.path=ev().projection(r),r.copy=r.copy||function(){const e=n();return Nx.forEach(t=>{r[t]&&e[t](r[t]())}),e.path.pointRadius(r.path.pointRadius()),e},r}}function Rx(e,t){if(!e||"string"!==typeof e)throw new Error("Projection type must be a name string.");return e=e.toLowerCase(),arguments.length>1?(Px[e]=Tx(e,t),this):Px[e]||null}function Bx(e){return e&&e.path||zx}const Px={albers:ab,albersusa:sb,azimuthalequalarea:db,azimuthalequidistant:pb,conicconformal:xb,conicequalarea:ob,conicequidistant:kb,equalEarth:Mb,equirectangular:Ob,gnomonic:Nb,identity:Tb,mercator:mb,mollweide:Mx,naturalEarth1:Bb,orthographic:Ib,stereographic:$b,transversemercator:qb};for(const TQ in Px)Rx(TQ,Px[TQ]);function Ix(e){Kt.call(this,null,e)}Ix.Definition={type:"GeoPath",metadata:{modifies:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field"},{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string",default:"path"}]};var Lx=Object(H["z"])(Ix,Kt);function $x(e,t){var n=e.pointRadius();return e.context(null),null!=t&&e.pointRadius(t),n}function Ux(e){Kt.call(this,null,e)}Lx.transform=function(e,t){var n=t.fork(t.ALL),r=this.value,i=e.field||H["y"],o=e.as||"path",a=n.SOURCE;function u(e){e[o]=r(i(e))}!r||e.modified()?(this.value=r=Bx(e.projection),n.materialize().reflow()):a=i===H["y"]||t.modified(i.fields)?n.ADD_MOD:n.ADD;var s=$x(r,e.pointRadius);return n.visit(a,u),r.pointRadius(s),n.modifies(o)},Ux.Definition={type:"GeoPoint",metadata:{modifies:!0},params:[{name:"projection",type:"projection",required:!0},{name:"fields",type:"field",array:!0,required:!0,length:2},{name:"as",type:"string",array:!0,length:2,default:["x","y"]}]};var qx=Object(H["z"])(Ux,Kt);function Wx(e){Kt.call(this,null,e)}qx.transform=function(e,t){var n,r=e.projection,i=e.fields[0],o=e.fields[1],a=e.as||["x","y"],u=a[0],s=a[1];function c(e){var t=r([i(e),o(e)]);t?(e[u]=t[0],e[s]=t[1]):(e[u]=void 0,e[s]=void 0)}return e.modified()?t=t.materialize().reflow(!0).visit(t.SOURCE,c):(n=t.modified(i.fields)||t.modified(o.fields),t.visit(n?t.ADD_MOD:t.ADD,c)),t.modifies(a)},Wx.Definition={type:"GeoShape",metadata:{modifies:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field",default:"datum"},{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string",default:"shape"}]};var Hx=Object(H["z"])(Wx,Kt);function Gx(e,t,n){var r=null==n?function(n){return e(t(n))}:function(r){var i=e.pointRadius(),o=e.pointRadius(n)(t(r));return e.pointRadius(i),o};return r.context=function(t){return e.context(t),r},r}Hx.transform=function(e,t){var n=t.fork(t.ALL),r=this.value,i=e.field||Object(H["u"])("datum"),o=e.as||"shape",a=n.ADD_MOD;return r&&!e.modified()||(this.value=r=Gx(Bx(e.projection),i,e.pointRadius),n.materialize().reflow(),a=n.SOURCE),n.visit(a,(function(e){e[o]=r})),n.modifies(o)};var Yx=n("adda");function Vx(e){Kt.call(this,[],e),this.generator=Object(Yx["a"])()}Vx.Definition={type:"Graticule",metadata:{changes:!0},params:[{name:"extent",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMajor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMinor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"step",type:"number",array:!0,length:2},{name:"stepMajor",type:"number",array:!0,length:2,default:[90,360]},{name:"stepMinor",type:"number",array:!0,length:2,default:[10,10]},{name:"precision",type:"number",default:2.5}]};var Xx=Object(H["z"])(Vx,Kt);function Jx(e){Kt.call(this,null,e),this.modified(!0)}Xx.transform=function(e,t){var n,r=this.value,i=this.generator;if(!r.length||e.modified())for(var o in e)Object(H["E"])(i[o])&&i[o](e[o]);return n=i(),r.length?t.mod.push(te(r[0],n)):t.add.push(K(n)),r[0]=n,t};var Qx=Object(H["z"])(Jx,Kt);function Kx(e,t){var n=tw(t.fit);t.extent?e.fitExtent(t.extent,n):t.size&&e.fitSize(t.size,n)}function Zx(e){var t=Rx((e||"mercator").toLowerCase());return t||Object(H["o"])("Unrecognized projection type: "+e),t()}function ew(e,t,n){Object(H["E"])(e[t])&&e[t](n)}function tw(e){return e=Object(H["i"])(e),1===e.length?e[0]:{type:bg,features:e.reduce((function(e,t){return t&&t.type===bg?e.push.apply(e,t.features):Object(H["B"])(t)?e.push.apply(e,t):e.push(t),e}),[])}}Qx.transform=function(e,t){var n=this.value;return!n||e.modified("type")?(this.value=n=Zx(e.type),Nx.forEach((function(t){null!=e[t]&&ew(n,t,e[t])}))):Nx.forEach((function(t){e.modified(t)&&ew(n,t,e[t])})),null!=e.pointRadius&&n.path.pointRadius(e.pointRadius),e.fit&&Kx(n,e),t.fork(t.NO_SOURCE|t.NO_FIELDS)};var nw=n("0a4a"),rw={center:nw["a"],collide:nw["b"],nbody:nw["d"],link:nw["c"],x:nw["g"],y:nw["h"]},iw="forces",ow=["alpha","alphaMin","alphaTarget","velocityDecay","forces"],aw=["static","iterations"],uw=["x","y","vx","vy"];function sw(e){Kt.call(this,null,e)}sw.Definition={type:"Force",metadata:{modifies:!0},params:[{name:"static",type:"boolean",default:!1},{name:"restart",type:"boolean",default:!1},{name:"iterations",type:"number",default:300},{name:"alpha",type:"number",default:1},{name:"alphaMin",type:"number",default:.001},{name:"alphaTarget",type:"number",default:0},{name:"velocityDecay",type:"number",default:.4},{name:"forces",type:"param",array:!0,params:[{key:{force:"center"},params:[{name:"x",type:"number",default:0},{name:"y",type:"number",default:0}]},{key:{force:"collide"},params:[{name:"radius",type:"number",expr:!0},{name:"strength",type:"number",default:.7},{name:"iterations",type:"number",default:1}]},{key:{force:"nbody"},params:[{name:"strength",type:"number",default:-30},{name:"theta",type:"number",default:.9},{name:"distanceMin",type:"number",default:1},{name:"distanceMax",type:"number"}]},{key:{force:"link"},params:[{name:"links",type:"data"},{name:"id",type:"field"},{name:"distance",type:"number",default:30,expr:!0},{name:"strength",type:"number",expr:!0},{name:"iterations",type:"number",default:1}]},{key:{force:"x"},params:[{name:"strength",type:"number",default:.1},{name:"x",type:"field"}]},{key:{force:"y"},params:[{name:"strength",type:"number",default:.1},{name:"y",type:"field"}]}]},{name:"as",type:"string",array:!0,modify:!1,default:uw}]};var cw=Object(H["z"])(sw,Kt);function lw(e,t){return function(){e.touch(t).run()}}function fw(e,t){var n=Object(nw["f"])(e),r=!1,i=n.stop,o=n.restart;return n.stopped=function(){return r},n.restart=function(){return r=!1,o()},n.stop=function(){return r=!0,i()},dw(n,t,!0).on("end",(function(){r=!0}))}function dw(e,t,n,r){var i,o,a,u,s=Object(H["i"])(t.forces);for(i=0,o=ow.length;i<o;++i)a=ow[i],a!==iw&&t.modified(a)&&e[a](t[a]);for(i=0,o=s.length;i<o;++i)u=iw+i,a=n||t.modified(iw,i)?pw(s[i]):r&&hw(s[i],r)?e.force(u):null,a&&e.force(u,a);for(o=e.numForces||0;i<o;++i)e.force(iw+i,null);return e.numForces=s.length,e}function hw(e,t){var n,r;for(n in e)if(Object(H["E"])(r=e[n])&&t.modified(Object(H["g"])(r)))return 1;return 0}function pw(e){var t,n;for(n in rw.hasOwnProperty(e.force)||Object(H["o"])("Unrecognized force: "+e.force),t=rw[e.force](),e)Object(H["E"])(t[n])&&gw(t[n],e[n],e);return t}function gw(e,t,n){e(Object(H["E"])(t)?function(e){return t(e,n)}:t)}cw.transform=function(e,t){var n=this.value,r=t.changed(t.ADD_REM),i=e.modified(ow),o=e.iterations||300;if(n?(r&&(t.modifies("index"),n.nodes(t.source)),(i||t.changed(t.MOD))&&dw(n,e,0,t)):(this.value=n=fw(t.source,e),n.on("tick",lw(t.dataflow,this)),e.static||(r=!0,n.tick()),t.modifies("index")),i||r||e.modified(aw)||t.changed()&&e.restart)if(n.alpha(Math.max(n.alpha(),e.alpha||1)).alphaDecay(1-Math.pow(n.alphaMin(),1/o)),e.static)for(n.stop();--o>=0;)n.tick();else if(n.stopped()&&n.restart(),!r)return t.StopPropagation;return this.finish(e,t)},cw.finish=function(e,t){for(var n,r=t.dataflow,i=this._argops,o=0,a=i.length;o<a;++o)if(n=i[o],n.name===iw&&"link"===n.op._argval.force)for(var u,s=n.op._argops,c=0,l=s.length;c<l;++c)if("links"===s[c].name&&(u=s[c].op.source)){r.pulse(u,r.changeset().reflow());break}return t.reflow(e.modified()).modifies(uw)};var mw=function(e,t,n){var r={};return e.each((function(e){var i=e.data;n(i)&&(r[t(i)]=e)})),e.lookup=r,e},vw=n("6f04"),bw=n("6bcb");function yw(e){Kt.call(this,null,e)}yw.Definition={type:"Nest",metadata:{treesource:!0,changes:!0},params:[{name:"keys",type:"field",array:!0},{name:"generate",type:"boolean"}]};var xw=Object(H["z"])(yw,Kt);function ww(e){return e.values}function Ow(e){Kt.call(this,null,e)}xw.transform=function(e,t){t.source||Object(H["o"])("Nest transform requires an upstream data source.");var n=e.generate,r=e.modified(),i=t.clone(),o=this.value;return(!o||r||t.changed())&&(o&&o.each((function(e){e.children&&X(e.data)&&i.rem.push(e.data)})),this.value=o=Object(bw["c"])({values:Object(H["i"])(e.keys).reduce((function(e,t){return e.key(t),e}),Object(vw["d"])()).entries(i.source)},ww),n&&o.each((function(e){e.children&&(e=K(e.data),i.add.push(e),i.source.push(e))})),mw(o,J,J)),i.source.root=o,i};var Ew=Object(H["z"])(Ow,Kt);function kw(e,t,n){for(var r,i=0,o=t.length;i<o;++i)r=t[i],r in n&&e[r](n[r])}function _w(e,t,n){for(var r=e.data,i=0,o=t.length-1;i<o;++i)r[n[i]]=e[t[i]];r[n[o]]=e.children?e.children.length:0}function Aw(e,t){return e.parent===t.parent?1:2}Ew.transform=function(e,t){t.source&&t.source.root||Object(H["o"])(this.constructor.name+" transform requires a backing tree data source.");var n=this.layout(e.method),r=this.fields,i=t.source.root,o=e.as||r;e.field&&i.sum(e.field),e.sort&&i.sort(e.sort),kw(n,this.params,e),n.separation&&n.separation(!1!==e.separation?Aw:H["P"]);try{this.value=n(i)}catch(a){Object(H["o"])(a)}return i.each((function(e){_w(e,r,o)})),t.reflow(e.modified()).modifies(o).modifies("leaf")};var Sw=n("2373"),jw=["x","y","r","depth","children"];function Cw(e){Ow.call(this,e)}Cw.Definition={type:"Pack",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"radius",type:"field",default:null},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:jw.length,default:jw}]};var Dw=Object(H["z"])(Cw,Ow);Dw.layout=Sw["a"],Dw.params=["size","padding"],Dw.fields=jw;var Fw=n("f8d7"),Mw=["x0","y0","x1","y1","depth","children"];function zw(e){Ow.call(this,e)}zw.Definition={type:"Partition",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:Mw.length,default:Mw}]};var Nw=Object(H["z"])(zw,Ow);Nw.layout=Fw["a"],Nw.params=["size","round","padding"],Nw.fields=Mw;var Tw=n("354e");function Rw(e){Kt.call(this,null,e)}Rw.Definition={type:"Stratify",metadata:{treesource:!0},params:[{name:"key",type:"field",required:!0},{name:"parentKey",type:"field",required:!0}]};var Bw=Object(H["z"])(Rw,Kt);Bw.transform=function(e,t){t.source||Object(H["o"])("Stratify transform requires an upstream data source.");var n=this.value,r=e.modified(),i=t.fork(t.ALL).materialize(t.SOURCE),o=!this.value||r||t.changed(t.ADD_REM)||t.modified(e.key.fields)||t.modified(e.parentKey.fields);return i.source=i.source.slice(),o&&(n=i.source.length?mw(Object(Tw["a"])().id(e.key).parentId(e.parentKey)(i.source),e.key,H["hb"]):mw(Object(Tw["a"])()([{}]),e.key,e.key)),i.source.root=this.value=n,i};var Pw=n("5070"),Iw=n("ce97"),Lw={tidy:Pw["a"],cluster:Iw["a"]},$w=["x","y","depth","children"];function Uw(e){Ow.call(this,e)}Uw.Definition={type:"Tree",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"tidy",values:["tidy","cluster"]},{name:"size",type:"number",array:!0,length:2},{name:"nodeSize",type:"number",array:!0,length:2},{name:"separation",type:"boolean",default:!0},{name:"as",type:"string",array:!0,length:$w.length,default:$w}]};var qw=Object(H["z"])(Uw,Ow);function Ww(e){Kt.call(this,[],e)}qw.layout=function(e){var t=e||"tidy";if(Lw.hasOwnProperty(t))return Lw[t]();Object(H["o"])("Unrecognized Tree layout method: "+t)},qw.params=["size","nodeSize"],qw.fields=$w,Ww.Definition={type:"TreeLinks",metadata:{tree:!0,generates:!0,changes:!0},params:[]};var Hw=Object(H["z"])(Ww,Kt);Hw.transform=function(e,t){var n=this.value,r=t.source&&t.source.root,i=t.fork(t.NO_SOURCE),o={};return r||Object(H["o"])("TreeLinks transform requires a tree data source."),t.changed(t.ADD_REM)?(i.rem=n,t.visit(t.SOURCE,(function(e){o[J(e)]=1})),r.each((function(e){var t=e.data,n=e.parent&&e.parent.data;n&&o[J(t)]&&o[J(n)]&&i.add.push(K({source:n,target:t}))})),this.value=i.add):t.changed(t.MOD)&&(t.visit(t.MOD,(function(e){o[J(e)]=1})),n.forEach((function(e){(o[J(e.source)]||o[J(e.target)])&&i.mod.push(e)}))),i};var Gw=n("8af3"),Yw=n("14f3"),Vw=n("ec83"),Xw=n("0830"),Jw=n("2388"),Qw=n("d426"),Kw=n("b6f4"),Zw={binary:Gw["a"],dice:Yw["a"],slice:Vw["a"],slicedice:Xw["a"],squarify:Jw["a"],resquarify:Qw["a"]},eO=["x0","y0","x1","y1","depth","children"];function tO(e){Ow.call(this,e)}tO.Definition={type:"Treemap",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"squarify",values:["squarify","resquarify","binary","dice","slice","slicedice"]},{name:"padding",type:"number",default:0},{name:"paddingInner",type:"number",default:0},{name:"paddingOuter",type:"number",default:0},{name:"paddingTop",type:"number",default:0},{name:"paddingRight",type:"number",default:0},{name:"paddingBottom",type:"number",default:0},{name:"paddingLeft",type:"number",default:0},{name:"ratio",type:"number",default:1.618033988749895},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:eO.length,default:eO}]};var nO=Object(H["z"])(tO,Ow);nO.layout=function(){var e=Object(Kw["a"])();return e.ratio=function(t){var n=e.tile();n.ratio&&e.tile(n.ratio(t))},e.method=function(t){Zw.hasOwnProperty(t)?e.tile(Zw[t]):Object(H["o"])("Unrecognized Treemap layout method: "+t)},e},nO.params=["method","ratio","size","round","padding","paddingInner","paddingOuter","paddingTop","paddingRight","paddingBottom","paddingLeft"],nO.fields=eO;var rO=n("6ca8");function iO(e){Kt.call(this,null,e)}iO.Definition={type:"Voronoi",metadata:{modifies:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"size",type:"number",array:!0,length:2},{name:"extent",type:"array",array:!0,length:2,default:[[-1e5,-1e5],[1e5,1e5]],content:{type:"number",array:!0,length:2}},{name:"as",type:"string",default:"path"}]};var oO=Object(H["z"])(iO,Kt),aO=[[-1e5,-1e5],[1e5,1e5]];oO.transform=function(e,t){var n,r,i,o,a=e.as||"path",u=t.source;for(n=Object(rO["a"])().x(e.x).y(e.y),e.size?n.size(e.size):n.extent(e.extent||aO),this.value=n=n(u),r=n.polygons(),i=0,o=u.length;i<o;++i)u[i][a]=r[i]?"M"+r[i].join("L")+"Z":null;return t.reflow(e.modified()).modifies(a)};var uO=Math.PI/180,sO=64,cO=2048,lO=function(){var e,t,n,r,i,o,a,u=[256,256],s=gO,c=[],l=Math.random,f={};function d(e){e.width=e.height=1;var t=Math.sqrt(e.getContext("2d").getImageData(0,0,1,1).data.length>>2);e.width=(sO<<5)/t,e.height=cO/t;var n=e.getContext("2d");return n.fillStyle=n.strokeStyle="red",n.textAlign="center",{context:n,ratio:t}}function h(e,t,n){var r,i,o,a=t.x,c=t.y,f=Math.sqrt(u[0]*u[0]+u[1]*u[1]),d=s(u),h=l()<.5?1:-1,p=-h;while(r=d(p+=h)){if(i=~~r[0],o=~~r[1],Math.min(Math.abs(i),Math.abs(o))>=f)break;if(t.x=a+i,t.y=c+o,!(t.x+t.x0<0||t.y+t.y0<0||t.x+t.x1>u[0]||t.y+t.y1>u[1])&&(!n||!dO(t,e,u[0]))&&(!n||pO(t,n))){for(var g,m=t.sprite,v=t.width>>5,b=u[0]>>5,y=t.x-(v<<4),x=127&y,w=32-x,O=t.y1-t.y0,E=(t.y+t.y0)*b+(y>>5),k=0;k<O;k++){g=0;for(var _=0;_<=v;_++)e[E+_]|=g<<w|(_<v?(g=m[k*v+_])>>>x:0);E+=b}return t.sprite=null,!0}}return!1}return f.layout=function(){var s=d(ha()),f=vO((u[0]>>5)*u[1]),p=null,g=c.length,m=-1,v=[],b=c.map((function(u){return{text:e(u),font:t(u),style:r(u),weight:i(u),rotate:o(u),size:~~n(u),padding:a(u),xoff:0,yoff:0,x1:0,y1:0,x0:0,y0:0,hasText:!1,sprite:null,datum:u}})).sort((function(e,t){return t.size-e.size}));while(++m<g){var y=b[m];y.x=u[0]*(l()+.5)>>1,y.y=u[1]*(l()+.5)>>1,fO(s,y,b,m),y.hasText&&h(f,y,p)&&(v.push(y),p?hO(p,y):p=[{x:y.x+y.x0,y:y.y+y.y0},{x:y.x+y.x1,y:y.y+y.y1}],y.x-=u[0]>>1,y.y-=u[1]>>1)}return v},f.words=function(e){return arguments.length?(c=e,f):c},f.size=function(e){return arguments.length?(u=[+e[0],+e[1]],f):u},f.font=function(e){return arguments.length?(t=bO(e),f):t},f.fontStyle=function(e){return arguments.length?(r=bO(e),f):r},f.fontWeight=function(e){return arguments.length?(i=bO(e),f):i},f.rotate=function(e){return arguments.length?(o=bO(e),f):o},f.text=function(t){return arguments.length?(e=bO(t),f):e},f.spiral=function(e){return arguments.length?(s=yO[e]||e,f):s},f.fontSize=function(e){return arguments.length?(n=bO(e),f):n},f.padding=function(e){return arguments.length?(a=bO(e),f):a},f.random=function(e){return arguments.length?(l=e,f):l},f};function fO(e,t,n,r){if(!t.sprite){var i=e.context,o=e.ratio;i.clearRect(0,0,(sO<<5)/o,cO/o);var a,u,s,c,l,f=0,d=0,h=0,p=n.length;--r;while(++r<p){if(t=n[r],i.save(),i.font=t.style+" "+t.weight+" "+~~((t.size+1)/o)+"px "+t.font,a=i.measureText(t.text+"m").width*o,s=t.size<<1,t.rotate){var g=Math.sin(t.rotate*uO),m=Math.cos(t.rotate*uO),v=a*m,b=a*g,y=s*m,x=s*g;a=Math.max(Math.abs(v+x),Math.abs(v-x))+31>>5<<5,s=~~Math.max(Math.abs(b+y),Math.abs(b-y))}else a=a+31>>5<<5;if(s>h&&(h=s),f+a>=sO<<5&&(f=0,d+=h,h=0),d+s>=cO)break;i.translate((f+(a>>1))/o,(d+(s>>1))/o),t.rotate&&i.rotate(t.rotate*uO),i.fillText(t.text,0,0),t.padding&&(i.lineWidth=2*t.padding,i.strokeText(t.text,0,0)),i.restore(),t.width=a,t.height=s,t.xoff=f,t.yoff=d,t.x1=a>>1,t.y1=s>>1,t.x0=-t.x1,t.y0=-t.y1,t.hasText=!0,f+=a}var w=i.getImageData(0,0,(sO<<5)/o,cO/o).data,O=[];while(--r>=0)if(t=n[r],t.hasText){for(a=t.width,u=a>>5,s=t.y1-t.y0,c=0;c<s*u;c++)O[c]=0;if(f=t.xoff,null==f)return;d=t.yoff;var E=0,k=-1;for(l=0;l<s;l++){for(c=0;c<a;c++){var _=u*l+(c>>5),A=w[(d+l)*(sO<<5)+(f+c)<<2]?1<<31-c%32:0;O[_]|=A,E|=A}E?k=l:(t.y0++,s--,l--,d++)}t.y1=t.y0+k,t.sprite=O.slice(0,(t.y1-t.y0)*u)}}}function dO(e,t,n){n>>=5;for(var r,i=e.sprite,o=e.width>>5,a=e.x-(o<<4),u=127&a,s=32-u,c=e.y1-e.y0,l=(e.y+e.y0)*n+(a>>5),f=0;f<c;f++){r=0;for(var d=0;d<=o;d++)if((r<<s|(d<o?(r=i[f*o+d])>>>u:0))&t[l+d])return!0;l+=n}return!1}function hO(e,t){var n=e[0],r=e[1];t.x+t.x0<n.x&&(n.x=t.x+t.x0),t.y+t.y0<n.y&&(n.y=t.y+t.y0),t.x+t.x1>r.x&&(r.x=t.x+t.x1),t.y+t.y1>r.y&&(r.y=t.y+t.y1)}function pO(e,t){return e.x+e.x1>t[0].x&&e.x+e.x0<t[1].x&&e.y+e.y1>t[0].y&&e.y+e.y0<t[1].y}function gO(e){var t=e[0]/e[1];return function(e){return[t*(e*=.1)*Math.cos(e),e*Math.sin(e)]}}function mO(e){var t=4,n=t*e[0]/e[1],r=0,i=0;return function(e){var o=e<0?-1:1;switch(Math.sqrt(1+4*o*e)-o&3){case 0:r+=n;break;case 1:i+=t;break;case 2:r-=n;break;default:i-=t;break}return[r,i]}}function vO(e){var t=[],n=-1;while(++n<e)t[n]=0;return t}function bO(e){return"function"===typeof e?e:function(){return e}}var yO={archimedean:gO,rectangular:mO},xO=["x","y","font","fontSize","fontStyle","fontWeight","angle"],wO=["text","font","rotate","fontSize","fontStyle","fontWeight"];function OO(e){Kt.call(this,lO(),e)}OO.Definition={type:"Wordcloud",metadata:{modifies:!0},params:[{name:"size",type:"number",array:!0,length:2},{name:"font",type:"string",expr:!0,default:"sans-serif"},{name:"fontStyle",type:"string",expr:!0,default:"normal"},{name:"fontWeight",type:"string",expr:!0,default:"normal"},{name:"fontSize",type:"number",expr:!0,default:14},{name:"fontSizeRange",type:"number",array:"nullable",default:[10,50]},{name:"rotate",type:"number",expr:!0,default:0},{name:"text",type:"field"},{name:"spiral",type:"string",values:["archimedean","rectangular"]},{name:"padding",type:"number",expr:!0},{name:"as",type:"string",array:!0,length:7,default:xO}]};var EO=Object(H["z"])(OO,Kt);function kO(e,t){for(var n,r=1/0,i=-1/0,o=0,a=t.length;o<a;++o)n=e(t[o]),n<r&&(r=n),n>i&&(i=n);return[r,i]}function _O(e){return new Uint8Array(e)}function AO(e){return new Uint16Array(e)}function SO(e){return new Uint32Array(e)}function jO(){var e=8,t=[],n=SO(0),r=DO(0,e),i=DO(0,e);return{data:function(){return t},seen:function(){return n=CO(n,t.length)},add:function(e){for(var n,r=0,i=t.length,o=e.length;r<o;++r)n=e[r],n._index=i++,t.push(n)},remove:function(e,n){var o,a,u,s=t.length,c=Array(s-e),l=t;for(a=0;!n[a]&&a<s;++a)c[a]=t[a],l[a]=a;for(u=a;a<s;++a)o=t[a],n[a]?l[a]=-1:(l[a]=u,r[u]=r[a],i[u]=i[a],c[u]=o,o._index=u++),r[a]=0;return t=c,l},size:function(){return t.length},curr:function(){return r},prev:function(){return i},reset:function(e){i[e]=r[e]},all:function(){return e<257?255:e<65537?65535:4294967295},set:function(e,t){r[e]|=t},clear:function(e,t){r[e]&=~t},resize:function(t,n){var o=r.length;(t>o||n>e)&&(e=Math.max(n,e),r=DO(t,e,r),i=DO(t,e))}}}function CO(e,t,n){return e.length>=t?e:(n=n||new e.constructor(t),n.set(e),n)}function DO(e,t,n){var r=(t<257?_O:t<65537?AO:SO)(e);return n&&r.set(n),r}EO.transform=function(e,t){function n(n){var r=e[n];return Object(H["E"])(r)&&t.modified(r.fields)}var r=e.modified();if(r||t.changed(t.ADD_REM)||wO.some(n)){var i,o=t.materialize(t.SOURCE).source,a=this.value,u=e.as||xO,s=e.fontSize||14;if(Object(H["E"])(s)?i=e.fontSizeRange:s=Object(H["m"])(s),i){var c=s,l=zd("sqrt")().domain(kO(c,o)).range(i);s=function(e){return l(c(e))}}o.forEach((function(e){e[u[0]]=NaN,e[u[1]]=NaN,e[u[3]]=0}));for(var f,d,h=a.words(o).text(e.text).size(e.size||[500,500]).padding(e.padding||1).spiral(e.spiral||"archimedean").rotate(e.rotate||0).font(e.font||"sans-serif").fontStyle(e.fontStyle||"normal").fontWeight(e.fontWeight||"normal").fontSize(s).random(Dn).layout(),p=a.size(),g=p[0]>>1,m=p[1]>>1,v=0,b=h.length;v<b;++v)f=h[v],d=f.datum,d[u[0]]=f.x+g,d[u[1]]=f.y+m,d[u[2]]=f.font,d[u[3]]=f.size,d[u[4]]=f.style,d[u[5]]=f.weight,d[u[6]]=f.rotate;return t.reflow(r).modifies(u)}};var FO=function(e,t,n){var r=1<<t;return{one:r,zero:~r,range:n.slice(),bisect:e.bisect,index:e.index,size:e.size,onAdd:function(e,t){var n,i=this,o=i.bisect(i.range,e.value),a=e.index,u=o[0],s=o[1],c=a.length;for(n=0;n<u;++n)t[a[n]]|=r;for(n=s;n<c;++n)t[a[n]]|=r;return i}}},MO=function(e,t){return Array.from(t,t=>e[t])};function zO(){var e=SO(0),t=[],n=0;function r(r,i,o){if(!i.length)return[];var a,u,s,c=n,l=i.length,f=Array(l),d=SO(l);for(s=0;s<l;++s)f[s]=r(i[s]),d[s]=s;if(f=NO(f,d),c)a=t,u=e,t=Array(c+l),e=SO(c+l),TO(o,a,u,c,f,d,l,t,e);else{if(o>0)for(s=0;s<l;++s)d[s]+=o;t=f,e=d}return n=c+l,{index:d,value:f}}function i(r,i){var o,a,u,s=n;for(a=0;!i[e[a]]&&a<s;++a);for(u=a;a<s;++a)i[o=e[a]]||(e[u]=o,t[u]=t[a],++u);n=s-r}function o(t){for(var r=0,i=n;r<i;++r)e[r]=t[e[r]]}function a(e,r){var i;return r?i=r.length:(r=t,i=n),[xd(r,e[0],0,i),yd(r,e[1],0,i)]}return{insert:r,remove:i,bisect:a,reindex:o,index:function(){return e},size:function(){return n}}}function NO(e,t){return e.sort.call(t,(function(t,n){var r=e[t],i=e[n];return r<i?-1:r>i?1:0})),MO(e,t)}function TO(e,t,n,r,i,o,a,u,s){var c,l=0,f=0;for(c=0;l<r&&f<a;++c)t[l]<i[f]?(u[c]=t[l],s[c]=n[l++]):(u[c]=i[f],s[c]=o[f++]+e);for(;l<r;++l,++c)u[c]=t[l],s[c]=n[l];for(;f<a;++f,++c)u[c]=i[f],s[c]=o[f]+e}function RO(e){Kt.call(this,jO(),e),this._indices=null,this._dims=null}RO.Definition={type:"CrossFilter",metadata:{},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"query",type:"array",array:!0,required:!0,content:{type:"number",array:!0,length:2}}]};var BO=Object(H["z"])(RO,Kt);function PO(e){Kt.call(this,null,e)}BO.transform=function(e,t){if(this._dims){var n=e.modified("fields")||e.fields.some((function(e){return t.modified(e.fields)}));return n?this.reinit(e,t):this.eval(e,t)}return this.init(e,t)},BO.init=function(e,t){for(var n,r,i=e.fields,o=e.query,a=this._indices={},u=this._dims=[],s=o.length,c=0;c<s;++c)n=i[c].fname,r=a[n]||(a[n]=zO()),u.push(FO(r,c,o[c]));return this.eval(e,t)},BO.reinit=function(e,t){var n,r,i,o,a,u,s,c,l,f=t.materialize().fork(),d=e.fields,h=e.query,p=this._indices,g=this._dims,m=this.value,v=m.curr(),b=m.prev(),y=m.all(),x=f.rem=f.add,w=f.mod,O=h.length,E={};if(b.set(v),t.rem.length&&(a=this.remove(e,t,f)),t.add.length&&m.add(t.add),t.mod.length)for(u={},o=t.mod,s=0,c=o.length;s<c;++s)u[o[s]._index]=1;for(s=0;s<O;++s)l=d[s],(!g[s]||e.modified("fields",s)||t.modified(l.fields))&&(i=l.fname,(n=E[i])||(p[i]=r=zO(),E[i]=n=r.insert(l,t.source,0)),g[s]=FO(r,s,h[s]).onAdd(n,v));for(s=0,c=m.data().length;s<c;++s)a[s]||(b[s]!==v[s]?x.push(s):u[s]&&v[s]!==y&&w.push(s));return m.mask=(1<<O)-1,f},BO.eval=function(e,t){var n=t.materialize().fork(),r=this._dims.length,i=0;return t.rem.length&&(this.remove(e,t,n),i|=(1<<r)-1),e.modified("query")&&!e.modified("fields")&&(i|=this.update(e,t,n)),t.add.length&&(this.insert(e,t,n),i|=(1<<r)-1),t.mod.length&&(this.modify(t,n),i|=(1<<r)-1),this.value.mask=i,n},BO.insert=function(e,t,n){var r,i,o,a=t.add,u=this.value,s=this._dims,c=this._indices,l=e.fields,f={},d=n.add,h=u.size(),p=h+a.length,g=s.length;u.resize(p,g),u.add(a);var m=u.curr(),v=u.prev(),b=u.all();for(r=0;r<g;++r)i=l[r].fname,o=f[i]||(f[i]=c[i].insert(l[r],a,h)),s[r].onAdd(o,m);for(;h<p;++h)v[h]=b,m[h]!==b&&d.push(h)},BO.modify=function(e,t){var n,r,i,o=t.mod,a=this.value,u=a.curr(),s=a.all(),c=e.mod;for(n=0,r=c.length;n<r;++n)i=c[n]._index,u[i]!==s&&o.push(i)},BO.remove=function(e,t,n){var r,i,o,a,u=this._indices,s=this.value,c=s.curr(),l=s.prev(),f=s.all(),d={},h=n.rem,p=t.rem;for(r=0,i=p.length;r<i;++r)o=p[r]._index,d[o]=1,l[o]=a=c[o],c[o]=f,a!==f&&h.push(o);for(o in u)u[o].remove(i,d);return this.reindex(t,i,d),d},BO.reindex=function(e,t,n){var r=this._indices,i=this.value;e.runAfter((function(){var e=i.remove(t,n);for(var o in r)r[o].reindex(e)}))},BO.update=function(e,t,n){var r,i,o=this._dims,a=e.query,u=t.stamp,s=o.length,c=0;for(n.filters=0,i=0;i<s;++i)e.modified("query",i)&&(r=i,++c);if(1===c)c=o[r].one,this.incrementOne(o[r],a[r],n.add,n.rem);else for(i=0,c=0;i<s;++i)e.modified("query",i)&&(c|=o[i].one,this.incrementAll(o[i],a[i],u,n.add),n.rem=n.add);return c},BO.incrementAll=function(e,t,n,r){var i,o,a,u=this.value,s=u.seen(),c=u.curr(),l=u.prev(),f=e.index(),d=e.bisect(e.range),h=e.bisect(t),p=h[0],g=h[1],m=d[0],v=d[1],b=e.one;if(p<m)for(i=p,o=Math.min(m,g);i<o;++i)a=f[i],s[a]!==n&&(l[a]=c[a],s[a]=n,r.push(a)),c[a]^=b;else if(p>m)for(i=m,o=Math.min(p,v);i<o;++i)a=f[i],s[a]!==n&&(l[a]=c[a],s[a]=n,r.push(a)),c[a]^=b;if(g>v)for(i=Math.max(p,v),o=g;i<o;++i)a=f[i],s[a]!==n&&(l[a]=c[a],s[a]=n,r.push(a)),c[a]^=b;else if(g<v)for(i=Math.max(m,g),o=v;i<o;++i)a=f[i],s[a]!==n&&(l[a]=c[a],s[a]=n,r.push(a)),c[a]^=b;e.range=t.slice()},BO.incrementOne=function(e,t,n,r){var i,o,a,u=this.value,s=u.curr(),c=e.index(),l=e.bisect(e.range),f=e.bisect(t),d=f[0],h=f[1],p=l[0],g=l[1],m=e.one;if(d<p)for(i=d,o=Math.min(p,h);i<o;++i)a=c[i],s[a]^=m,n.push(a);else if(d>p)for(i=p,o=Math.min(d,g);i<o;++i)a=c[i],s[a]^=m,r.push(a);if(h>g)for(i=Math.max(d,g),o=h;i<o;++i)a=c[i],s[a]^=m,n.push(a);else if(h<g)for(i=Math.max(p,h),o=g;i<o;++i)a=c[i],s[a]^=m,r.push(a);e.range=t.slice()},PO.Definition={type:"ResolveFilter",metadata:{},params:[{name:"ignore",type:"number",required:!0,description:"A bit mask indicating which filters to ignore."},{name:"filter",type:"object",required:!0,description:"Per-tuple filter bitmaps from a CrossFilter transform."}]};var IO=Object(H["z"])(PO,Kt);IO.transform=function(e,t){var n=~(e.ignore||0),r=e.filter,i=r.mask;if(0===(i&n))return t.StopPropagation;var o=t.fork(t.ALL),a=r.data(),u=r.curr(),s=r.prev(),c=function(e){return u[e]&n?null:a[e]};return o.filter(o.MOD,c),i&i-1?(o.filter(o.ADD,(function(e){var t=u[e]&n,r=!t&&t^s[e]&n;return r?a[e]:null})),o.filter(o.REM,(function(e){var t=u[e]&n,r=t&&!(t^t^s[e]&n);return r?a[e]:null}))):(o.filter(o.ADD,c),o.filter(o.REM,(function(e){return(u[e]&n)===i?a[e]:null}))),o.filter(o.SOURCE,(function(e){return c(e._index)}))};var LO=n("1c83"),$O="default",UO=function(e){var t=e._signals.cursor;t||(e._signals.cursor=t=e.add({user:$O,item:null})),e.on(e.events("view","mousemove"),t,(function(e,n){var r=t.value,i=r?Object(H["I"])(r)?r:r.user:$O,o=n.item&&n.item.cursor||null;return r&&i===r.user&&o==r.item?r:{user:i,item:o}})),e.add(null,(function(e){var t=e.cursor,n=this.value;return Object(H["I"])(t)||(n=t.item,t=t.user),qO(t&&t!==$O?t:n||t),n}),{cursor:t})};function qO(e){"undefined"!==typeof document&&document.body&&(document.body.style.cursor=e)}function WO(e,t){var n=e._runtime.data;return n.hasOwnProperty(t)||Object(H["o"])("Unrecognized data set: "+t),n[t]}function HO(e){return WO(this,e).values.value}function GO(e,t){ne(t)||Object(H["o"])("Second argument to changes must be a changeset.");var n=WO(this,e);return n.modified=!0,this.pulse(n.input,t)}function YO(e,t){return GO.call(this,e,re().insert(t))}function VO(e,t){return GO.call(this,e,re().remove(t))}function XO(e){var t=e.padding();return Math.max(0,e._viewWidth+t.left+t.right)}function JO(e){var t=e.padding();return Math.max(0,e._viewHeight+t.top+t.bottom)}function QO(e){var t=e.padding(),n=e._origin;return[t.left+n[0],t.top+n[1]]}function KO(e){var t=QO(e),n=XO(e),r=JO(e);e._renderer.background(e._background),e._renderer.resize(n,r,t),e._handler.origin(t),e._resizeListeners.forEach((function(t){try{t(n,r)}catch(i){e.error(i)}}))}var ZO=function(e,t,n){var r,i,o,a=e._renderer.canvas();return a&&(o=QO(e),i=t.changedTouches?t.changedTouches[0]:t,r=Wc(i,a),r[0]-=o[0],r[1]-=o[1]),t.dataflow=e,t.vega=eE(e,n,r),t.item=n,t};function eE(e,t,n){var r=t?"group"===t.mark.marktype?t:t.mark.group:null;function i(e){var n,i=r;if(e)for(n=t;n;n=n.mark.group)if(n.mark.name===e){i=n;break}return i&&i.mark&&i.mark.interactive?i:{}}function o(e){if(!e)return n;Object(H["I"])(e)&&(e=i(e));var t=n.slice();while(e)t[0]-=e.x||0,t[1]-=e.y||0,e=e.mark&&e.mark.group;return t}return{view:Object(H["m"])(e),item:Object(H["m"])(t||{}),group:i,xy:o,x:function(e){return o(e)[0]},y:function(e){return o(e)[1]}}}var tE="view",nE="timer",rE="window",iE={trap:!1};function oE(e){e=Object(H["p"])({},e);var t=e.defaults;return t&&(Object(H["B"])(t.prevent)&&(t.prevent=Object(H["eb"])(t.prevent)),Object(H["B"])(t.allow)&&(t.allow=Object(H["eb"])(t.allow))),e}function aE(e,t){var n=e._eventConfig.defaults,r=n&&n.prevent,i=n&&n.allow;return!1!==r&&!0!==i&&(!0===r||!1===i||(r?r[t]:i?!i[t]:e.preventDefault()))}function uE(e,t,n){var r,i=this,o=new be(n),a=function(n,r){e===tE&&aE(i,t)&&n.preventDefault();try{o.receive(ZO(i,n,r))}catch(a){i.error(a)}finally{i.run()}};if(e===nE)i.timer(a,t);else if(e===tE)i.addEventListener(t,a,iE);else if(e===rE?"undefined"!==typeof window&&(r=[window]):"undefined"!==typeof document&&(r=document.querySelectorAll(e)),r){for(var u=0,s=r.length;u<s;++u)r[u].addEventListener(t,a);i._eventListeners.push({type:t,sources:r,handler:a})}else i.warn("Can not resolve event source: "+e);return o}function sE(e){return e.item}function cE(e){var t=e.item.mark.source;return t.source||t}function lE(e){return function(t,n){return n.vega.view().changeset().encode(n.item,e)}}var fE=function(e,t){return e=[e||"hover"],t=[t||"update",e[0]],this.on(this.events("view","mouseover",sE),cE,lE(e)),this.on(this.events("view","mouseout",sE),cE,lE(t)),this},dE=function(){var e,t,n,r=this._tooltip,i=this._timers,o=this._eventListeners;e=i.length;while(--e>=0)i[e].stop();e=o.length;while(--e>=0){n=o[e],t=n.sources.length;while(--t>=0)n.sources[t].removeEventListener(n.type,n.handler)}return r&&r.call(this,this._handler,null,null,null),this},hE=function(e,t,n){var r=document.createElement(e);for(var i in t)r.setAttribute(i,t[i]);return null!=n&&(r.textContent=n),r},pE=Math.sqrt(50),gE=Math.sqrt(10),mE=Math.sqrt(2);function vE(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=pE?i*=10:o>=gE?i*=5:o>=mE&&(i*=2),t<e?-i:i}var bE="vega-bind",yE="vega-bind-name",xE="vega-bind-radio",wE="vega-option-",OE=function(e,t,n){if(t){var r=n.param,i=n.state;return i||(i=n.state={elements:null,active:!1,set:null,update:function(t){t!==e.signal(r.signal)&&(i.source=!0,e.signal(r.signal,t).run())}},r.debounce&&(i.update=Object(H["n"])(r.debounce,i.update))),EE(i,t,r,e.signal(r.signal)),i.active||(e.on(e._signals[r.signal],null,(function(){i.source?i.source=!1:i.set(e.signal(r.signal))})),i.active=!0),i}};function EE(e,t,n,r){var i=hE("div",{class:bE});i.appendChild(hE("span",{class:yE},n.name||n.signal)),t.appendChild(i);var o=kE;switch(n.input){case"checkbox":o=_E;break;case"select":o=AE;break;case"radio":o=SE;break;case"range":o=jE;break}o(e,i,n,r)}function kE(e,t,n,r){var i=hE("input");for(var o in n)"signal"!==o&&"element"!==o&&i.setAttribute("input"===o?"type":o,n[o]);i.setAttribute("name",n.signal),i.value=r,t.appendChild(i),i.addEventListener("input",(function(){e.update(i.value)})),e.elements=[i],e.set=function(e){i.value=e}}function _E(e,t,n,r){var i={type:"checkbox",name:n.signal};r&&(i.checked=!0);var o=hE("input",i);t.appendChild(o),o.addEventListener("change",(function(){e.update(o.checked)})),e.elements=[o],e.set=function(e){o.checked=!!e||null}}function AE(e,t,n,r){var i=hE("select",{name:n.signal});n.options.forEach((function(e){var t={value:e};CE(e,r)&&(t.selected=!0),i.appendChild(hE("option",t,e+""))})),t.appendChild(i),i.addEventListener("change",(function(){e.update(n.options[i.selectedIndex])})),e.elements=[i],e.set=function(e){for(var t=0,r=n.options.length;t<r;++t)if(CE(n.options[t],e))return void(i.selectedIndex=t)}}function SE(e,t,n,r){var i=hE("span",{class:xE});t.appendChild(i),e.elements=n.options.map((function(t){var o=wE+n.signal+"-"+t,a={id:o,type:"radio",name:n.signal,value:t};CE(t,r)&&(a.checked=!0);var u=hE("input",a);return u.addEventListener("change",(function(){e.update(t)})),i.appendChild(u),i.appendChild(hE("label",{for:o},t+"")),u})),e.set=function(t){for(var n=e.elements,r=0,i=n.length;r<i;++r)CE(n[r].value,t)&&(n[r].checked=!0)}}function jE(e,t,n,r){r=void 0!==r?r:(+n.max+ +n.min)/2;var i=n.min||Math.min(0,+r)||0,o=n.max||Math.max(100,+r)||100,a=n.step||vE(i,o,100),u=hE("input",{type:"range",name:n.signal,min:i,max:o,step:a});u.value=r;var s=hE("label",{},+r);function c(){s.textContent=u.value,e.update(+u.value)}t.appendChild(u),t.appendChild(s),u.addEventListener("input",c),u.addEventListener("change",c),e.elements=[u],e.set=function(e){u.value=e,s.textContent=e}}function CE(e,t){return e===t||e+""===t+""}var DE=function(e,t,n,r,i){return t=t||new r(e.loader()),t.initialize(n,XO(e),JO(e),QO(e),i).background(e._background)},FE=function(e,t){return t?function(){try{t.apply(this,arguments)}catch(n){e.error(n)}}:null},ME=function(e,t,n,r){var i=new r(e.loader(),FE(e,e.tooltip())).scene(e.scenegraph().root).initialize(n,QO(e),e);return t&&t.handlers().forEach((function(e){i.on(e.type,e.handler)})),i},zE=function(e,t){var n,r,i=this,o=i._renderType,a=Kl(o);return e=i._el=e?NE(i,e):null,a||i.error("Unrecognized renderer type: "+o),n=a.handler||tl,r=e?a.renderer:a.headless,i._renderer=r?DE(i,i._renderer,e,r):null,i._handler=ME(i,i._handler,e,n),i._redraw=!0,e&&(t=t?NE(i,t):e.appendChild(hE("div",{class:"vega-bindings"})),i._bind.forEach((function(e){e.param.element&&(e.element=NE(i,e.param.element))})),i._bind.forEach((function(e){OE(i,e.element||t,e)}))),i};function NE(e,t){if("string"===typeof t){if("undefined"===typeof document)return e.error("DOM document instance not found."),null;if(t=document.querySelector(t),!t)return e.error("Signal bind element not found: "+t),null}if(t)try{t.innerHTML=""}catch(n){t=null,e.error(n)}return t}var TE=function(e,t,n){var r=Kl(t),i=r&&r.headless;return i?e.runAsync().then((function(){return DE(e,null,null,i,n).renderAsync(e._scenegraph.root)})):Promise.reject("Unrecognized renderer type: "+t)},RE=function(e,t){return e!==Jl.Canvas&&e!==Jl.SVG&&e!==Jl.PNG?Promise.reject("Unrecognized image type: "+e):TE(this,e,t).then((function(t){return e===Jl.SVG?BE(t.svg(),"image/svg+xml"):t.canvas().toDataURL("image/png")}))};function BE(e,t){var n=new Blob([e],{type:t});return window.URL.createObjectURL(n)}var PE=function(e){return TE(this,Jl.Canvas,e).then((function(e){return e.canvas()}))},IE=function(e){return TE(this,Jl.SVG,e).then((function(e){return e.svg()}))},LE=function(e,t){return e=e||t.autosize,Object(H["G"])(e)?e:(e=e||"pad",{type:e})},$E=function(e,t){return e=e||t.padding,Object(H["G"])(e)?{top:UE(e.top),bottom:UE(e.bottom),left:UE(e.left),right:UE(e.right)}:qE(UE(e))};function UE(e){return+e||0}function qE(e){return{top:e,bottom:e,left:e,right:e}}var WE="outer",HE=["value","update","init","react","bind"];function GE(e,t){Object(H["o"])(e+' for "outer" push: '+Object(H["ab"])(t))}var YE=function(e,t){var n=e.name;if(e.push===WE)t.signals[n]||GE("No prior signal definition",n),HE.forEach((function(t){void 0!==e[t]&&GE("Invalid property ",t)}));else{var r=t.addSignal(n,e.value);!1===e.react&&(r.react=!1),e.bind&&t.addBinding(n,e.bind)}};const VE="RawCode",XE="Literal",JE="Property",QE="Identifier",KE="ArrayExpression",ZE="BinaryExpression",ek="CallExpression",tk="ConditionalExpression",nk="LogicalExpression",rk="MemberExpression",ik="ObjectExpression",ok="UnaryExpression";function ak(e){this.type=e}function uk(e){switch(e.type){case KE:return e.elements;case ZE:case nk:return[e.left,e.right];case ek:return[e.callee].concat(e.arguments);case tk:return[e.test,e.consequent,e.alternate];case rk:return[e.object,e.property];case ik:return e.properties;case JE:return[e.key,e.value];case ok:return[e.argument];case QE:case XE:case VE:default:return[]}}var sk,ck,lk,fk,dk;ak.prototype.visit=function(e){let t,n,r;if(e(this))return 1;for(t=uk(this),n=0,r=t.length;n<r;++n)if(t[n].visit(e))return 1};var hk=1,pk=2,gk=3,mk=4,vk=5,bk=6,yk=7,xk=8,wk=9;sk={},sk[hk]="Boolean",sk[pk]="<end>",sk[gk]="Identifier",sk[mk]="Keyword",sk[vk]="Null",sk[bk]="Numeric",sk[yk]="Punctuator",sk[xk]="String",sk[wk]="RegularExpression";var Ok="ArrayExpression",Ek="BinaryExpression",kk="CallExpression",_k="ConditionalExpression",Ak="Identifier",Sk="Literal",jk="LogicalExpression",Ck="MemberExpression",Dk="ObjectExpression",Fk="Property",Mk="UnaryExpression",zk="Unexpected token %0",Nk="Unexpected number",Tk="Unexpected string",Rk="Unexpected identifier",Bk="Unexpected reserved word",Pk="Unexpected end of input",Ik="Invalid regular expression",Lk="Invalid regular expression: missing /",$k="Octal literals are not allowed in strict mode.",Uk="Duplicate data property in object literal not allowed in strict mode",qk="ILLEGAL",Wk="Disabled.",Hk=new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),Gk=new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");function Yk(e,t){if(!e)throw new Error("ASSERT: "+t)}function Vk(e){return e>=48&&e<=57}function Xk(e){return"0123456789abcdefABCDEF".indexOf(e)>=0}function Jk(e){return"01234567".indexOf(e)>=0}function Qk(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0}function Kk(e){return 10===e||13===e||8232===e||8233===e}function Zk(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&Hk.test(String.fromCharCode(e))}function e_(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&Gk.test(String.fromCharCode(e))}var t_={if:1,in:1,do:1,var:1,for:1,new:1,try:1,let:1,this:1,else:1,case:1,void:1,with:1,enum:1,while:1,break:1,catch:1,throw:1,const:1,yield:1,class:1,super:1,return:1,typeof:1,delete:1,switch:1,export:1,import:1,public:1,static:1,default:1,finally:1,extends:1,package:1,private:1,function:1,continue:1,debugger:1,interface:1,protected:1,instanceof:1,implements:1};function n_(){var e;while(lk<fk){if(e=ck.charCodeAt(lk),!Qk(e)&&!Kk(e))break;++lk}}function r_(e){var t,n,r,i=0;for(n="u"===e?4:2,t=0;t<n;++t)lk<fk&&Xk(ck[lk])?(r=ck[lk++],i=16*i+"0123456789abcdef".indexOf(r.toLowerCase())):F_({},zk,qk);return String.fromCharCode(i)}function i_(){var e,t,n,r;e=ck[lk],t=0,"}"===e&&F_({},zk,qk);while(lk<fk){if(e=ck[lk++],!Xk(e))break;t=16*t+"0123456789abcdef".indexOf(e.toLowerCase())}return(t>1114111||"}"!==e)&&F_({},zk,qk),t<=65535?String.fromCharCode(t):(n=55296+(t-65536>>10),r=56320+(t-65536&1023),String.fromCharCode(n,r))}function o_(){var e,t;e=ck.charCodeAt(lk++),t=String.fromCharCode(e),92===e&&(117!==ck.charCodeAt(lk)&&F_({},zk,qk),++lk,e=r_("u"),e&&"\\"!==e&&Zk(e.charCodeAt(0))||F_({},zk,qk),t=e);while(lk<fk){if(e=ck.charCodeAt(lk),!e_(e))break;++lk,t+=String.fromCharCode(e),92===e&&(t=t.substr(0,t.length-1),117!==ck.charCodeAt(lk)&&F_({},zk,qk),++lk,e=r_("u"),e&&"\\"!==e&&e_(e.charCodeAt(0))||F_({},zk,qk),t+=e)}return t}function a_(){var e,t;e=lk++;while(lk<fk){if(t=ck.charCodeAt(lk),92===t)return lk=e,o_();if(!e_(t))break;++lk}return ck.slice(e,lk)}function u_(){var e,t,n;return e=lk,t=92===ck.charCodeAt(lk)?o_():a_(),n=1===t.length?gk:t_.hasOwnProperty(t)?mk:"null"===t?vk:"true"===t||"false"===t?hk:gk,{type:n,value:t,start:e,end:lk}}function s_(){var e,t,n,r,i=lk,o=ck.charCodeAt(lk),a=ck[lk];switch(o){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++lk,{type:yk,value:String.fromCharCode(o),start:i,end:lk};default:if(e=ck.charCodeAt(lk+1),61===e)switch(o){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return lk+=2,{type:yk,value:String.fromCharCode(o)+String.fromCharCode(e),start:i,end:lk};case 33:case 61:return lk+=2,61===ck.charCodeAt(lk)&&++lk,{type:yk,value:ck.slice(i,lk),start:i,end:lk}}}return r=ck.substr(lk,4),">>>="===r?(lk+=4,{type:yk,value:r,start:i,end:lk}):(n=r.substr(0,3),">>>"===n||"<<="===n||">>="===n?(lk+=3,{type:yk,value:n,start:i,end:lk}):(t=n.substr(0,2),a===t[1]&&"+-<>&|".indexOf(a)>=0||"=>"===t?(lk+=2,{type:yk,value:t,start:i,end:lk}):"<>=!+-*%&|^/".indexOf(a)>=0?(++lk,{type:yk,value:a,start:i,end:lk}):void F_({},zk,qk)))}function c_(e){var t="";while(lk<fk){if(!Xk(ck[lk]))break;t+=ck[lk++]}return 0===t.length&&F_({},zk,qk),Zk(ck.charCodeAt(lk))&&F_({},zk,qk),{type:bk,value:parseInt("0x"+t,16),start:e,end:lk}}function l_(e){var t="0"+ck[lk++];while(lk<fk){if(!Jk(ck[lk]))break;t+=ck[lk++]}return(Zk(ck.charCodeAt(lk))||Vk(ck.charCodeAt(lk)))&&F_({},zk,qk),{type:bk,value:parseInt(t,8),octal:!0,start:e,end:lk}}function f_(){var e,t,n;if(n=ck[lk],Yk(Vk(n.charCodeAt(0))||"."===n,"Numeric literal must start with a decimal digit or a decimal point"),t=lk,e="","."!==n){if(e=ck[lk++],n=ck[lk],"0"===e){if("x"===n||"X"===n)return++lk,c_(t);if(Jk(n))return l_(t);n&&Vk(n.charCodeAt(0))&&F_({},zk,qk)}while(Vk(ck.charCodeAt(lk)))e+=ck[lk++];n=ck[lk]}if("."===n){e+=ck[lk++];while(Vk(ck.charCodeAt(lk)))e+=ck[lk++];n=ck[lk]}if("e"===n||"E"===n)if(e+=ck[lk++],n=ck[lk],"+"!==n&&"-"!==n||(e+=ck[lk++]),Vk(ck.charCodeAt(lk)))while(Vk(ck.charCodeAt(lk)))e+=ck[lk++];else F_({},zk,qk);return Zk(ck.charCodeAt(lk))&&F_({},zk,qk),{type:bk,value:parseFloat(e),start:t,end:lk}}function d_(){var e,t,n,r,i="",o=!1;e=ck[lk],Yk("'"===e||'"'===e,"String literal must starts with a quote"),t=lk,++lk;while(lk<fk){if(n=ck[lk++],n===e){e="";break}if("\\"===n)if(n=ck[lk++],n&&Kk(n.charCodeAt(0)))"\r"===n&&"\n"===ck[lk]&&++lk;else switch(n){case"u":case"x":"{"===ck[lk]?(++lk,i+=i_()):i+=r_(n);break;case"n":i+="\n";break;case"r":i+="\r";break;case"t":i+="\t";break;case"b":i+="\b";break;case"f":i+="\f";break;case"v":i+="\v";break;default:Jk(n)?(r="01234567".indexOf(n),0!==r&&(o=!0),lk<fk&&Jk(ck[lk])&&(o=!0,r=8*r+"01234567".indexOf(ck[lk++]),"0123".indexOf(n)>=0&&lk<fk&&Jk(ck[lk])&&(r=8*r+"01234567".indexOf(ck[lk++]))),i+=String.fromCharCode(r)):i+=n;break}else{if(Kk(n.charCodeAt(0)))break;i+=n}}return""!==e&&F_({},zk,qk),{type:xk,value:i,octal:o,start:t,end:lk}}function h_(e,t){var n=e;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}/g,(e,t)=>{if(parseInt(t,16)<=1114111)return"x";F_({},Ik)}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"x"));try{new RegExp(n)}catch(r){F_({},Ik)}try{return new RegExp(e,t)}catch(i){return null}}function p_(){var e,t,n,r,i;e=ck[lk],Yk("/"===e,"Regular expression literal must start with a slash"),t=ck[lk++],n=!1,r=!1;while(lk<fk)if(e=ck[lk++],t+=e,"\\"===e)e=ck[lk++],Kk(e.charCodeAt(0))&&F_({},Lk),t+=e;else if(Kk(e.charCodeAt(0)))F_({},Lk);else if(n)"]"===e&&(n=!1);else{if("/"===e){r=!0;break}"["===e&&(n=!0)}return r||F_({},Lk),i=t.substr(1,t.length-2),{value:i,literal:t}}function g_(){var e,t,n;t="",n="";while(lk<fk){if(e=ck[lk],!e_(e.charCodeAt(0)))break;++lk,"\\"===e&&lk<fk?F_({},zk,qk):(n+=e,t+=e)}return n.search(/[^gimuy]/g)>=0&&F_({},Ik,n),{value:n,literal:t}}function m_(){var e,t,n,r;return dk=null,n_(),e=lk,t=p_(),n=g_(),r=h_(t.value,n.value),{literal:t.literal+n.literal,value:r,regex:{pattern:t.value,flags:n.value},start:e,end:lk}}function v_(e){return e.type===gk||e.type===mk||e.type===hk||e.type===vk}function b_(){var e;return n_(),lk>=fk?{type:pk,start:lk,end:lk}:(e=ck.charCodeAt(lk),Zk(e)?u_():40===e||41===e||59===e?s_():39===e||34===e?d_():46===e?Vk(ck.charCodeAt(lk+1))?f_():s_():Vk(e)?f_():s_())}function y_(){var e;return e=dk,lk=e.end,dk=b_(),lk=e.end,e}function x_(){var e;e=lk,dk=b_(),lk=e}function w_(e){var t=new ak(Ok);return t.elements=e,t}function O_(e,t,n){var r=new ak("||"===e||"&&"===e?jk:Ek);return r.operator=e,r.left=t,r.right=n,r}function E_(e,t){var n=new ak(kk);return n.callee=e,n.arguments=t,n}function k_(e,t,n){var r=new ak(_k);return r.test=e,r.consequent=t,r.alternate=n,r}function __(e){var t=new ak(Ak);return t.name=e,t}function A_(e){var t=new ak(Sk);return t.value=e.value,t.raw=ck.slice(e.start,e.end),e.regex&&("//"===t.raw&&(t.raw="/(?:)/"),t.regex=e.regex),t}function S_(e,t,n){var r=new ak(Ck);return r.computed="["===e,r.object=t,r.property=n,r.computed||(n.member=!0),r}function j_(e){var t=new ak(Dk);return t.properties=e,t}function C_(e,t,n){var r=new ak(Fk);return r.key=t,r.value=n,r.kind=e,r}function D_(e,t){var n=new ak(Mk);return n.operator=e,n.argument=t,n.prefix=!0,n}function F_(e,t){var n,r=Array.prototype.slice.call(arguments,2),i=t.replace(/%(\d)/g,(e,t)=>(Yk(t<r.length,"Message reference must be in range"),r[t]));throw n=new Error(i),n.index=lk,n.description=i,n}function M_(e){e.type===pk&&F_(e,Pk),e.type===bk&&F_(e,Nk),e.type===xk&&F_(e,Tk),e.type===gk&&F_(e,Rk),e.type===mk&&F_(e,Bk),F_(e,zk,e.value)}function z_(e){var t=y_();t.type===yk&&t.value===e||M_(t)}function N_(e){return dk.type===yk&&dk.value===e}function T_(e){return dk.type===mk&&dk.value===e}function R_(){var e=[];lk=dk.start,z_("[");while(!N_("]"))N_(",")?(y_(),e.push(null)):(e.push(K_()),N_("]")||z_(","));return y_(),w_(e)}function B_(){var e;return lk=dk.start,e=y_(),e.type===xk||e.type===bk?(e.octal&&F_(e,$k),A_(e)):__(e.value)}function P_(){var e,t,n,r;return lk=dk.start,e=dk,e.type===gk?(n=B_(),z_(":"),r=K_(),C_("init",n,r)):e.type!==pk&&e.type!==yk?(t=B_(),z_(":"),r=K_(),C_("init",t,r)):void M_(e)}function I_(){var e,t,n,r=[],i={},o=String;lk=dk.start,z_("{");while(!N_("}"))e=P_(),t=e.key.type===Ak?e.key.name:o(e.key.value),n="$"+t,Object.prototype.hasOwnProperty.call(i,n)?F_({},Uk):i[n]=!0,r.push(e),N_("}")||z_(",");return z_("}"),j_(r)}function L_(){var e;return z_("("),e=Z_(),z_(")"),e}var $_={if:1};function U_(){var e,t,n;if(N_("("))return L_();if(N_("["))return R_();if(N_("{"))return I_();if(e=dk.type,lk=dk.start,e===gk||$_[dk.value])n=__(y_().value);else if(e===xk||e===bk)dk.octal&&F_(dk,$k),n=A_(y_());else{if(e===mk)throw new Error(Wk);e===hk?(t=y_(),t.value="true"===t.value,n=A_(t)):e===vk?(t=y_(),t.value=null,n=A_(t)):N_("/")||N_("/=")?(n=A_(m_()),x_()):M_(y_())}return n}function q_(){var e=[];if(z_("("),!N_(")"))while(lk<fk){if(e.push(K_()),N_(")"))break;z_(",")}return z_(")"),e}function W_(){var e;return lk=dk.start,e=y_(),v_(e)||M_(e),__(e.value)}function H_(){return z_("."),W_()}function G_(){var e;return z_("["),e=Z_(),z_("]"),e}function Y_(){var e,t,n;for(e=U_();;)if(N_("."))n=H_(),e=S_(".",e,n);else if(N_("("))t=q_(),e=E_(e,t);else{if(!N_("["))break;n=G_(),e=S_("[",e,n)}return e}function V_(){var e=Y_();if(dk.type===yk&&(N_("++")||N_("--")))throw new Error(Wk);return e}function X_(){var e,t;if(dk.type!==yk&&dk.type!==mk)t=V_();else{if(N_("++")||N_("--"))throw new Error(Wk);if(N_("+")||N_("-")||N_("~")||N_("!"))e=y_(),t=X_(),t=D_(e.value,t);else{if(T_("delete")||T_("void")||T_("typeof"))throw new Error(Wk);t=V_()}}return t}function J_(e){var t=0;if(e.type!==yk&&e.type!==mk)return 0;switch(e.value){case"||":t=1;break;case"&&":t=2;break;case"|":t=3;break;case"^":t=4;break;case"&":t=5;break;case"==":case"!=":case"===":case"!==":t=6;break;case"<":case">":case"<=":case">=":case"instanceof":case"in":t=7;break;case"<<":case">>":case">>>":t=8;break;case"+":case"-":t=9;break;case"*":case"/":case"%":t=11;break;default:break}return t}function Q_(){var e,t,n,r,i,o,a,u,s,c;if(e=dk,s=X_(),r=dk,i=J_(r),0===i)return s;r.prec=i,y_(),t=[e,dk],a=X_(),o=[s,r,a];while((i=J_(dk))>0){while(o.length>2&&i<=o[o.length-2].prec)a=o.pop(),u=o.pop().value,s=o.pop(),t.pop(),n=O_(u,s,a),o.push(n);r=y_(),r.prec=i,o.push(r),t.push(dk),n=X_(),o.push(n)}c=o.length-1,n=o[c],t.pop();while(c>1)t.pop(),n=O_(o[c-1].value,o[c-2],n),c-=2;return n}function K_(){var e,t,n;return e=Q_(),N_("?")&&(y_(),t=K_(),z_(":"),n=K_(),e=k_(e,t,n)),e}function Z_(){var e=K_();if(N_(","))throw new Error(Wk);return e}var eA=function(e){ck=e,lk=0,fk=ck.length,dk=null,x_();var t=Z_();if(dk.type!==pk)throw new Error("Unexpect token after expression.");return t},tA={NaN:"NaN",E:"Math.E",LN2:"Math.LN2",LN10:"Math.LN10",LOG2E:"Math.LOG2E",LOG10E:"Math.LOG10E",PI:"Math.PI",SQRT1_2:"Math.SQRT1_2",SQRT2:"Math.SQRT2",MIN_VALUE:"Number.MIN_VALUE",MAX_VALUE:"Number.MAX_VALUE"},nA=function(e){function t(t,n,r,i){let o=e(n[0]);return r&&(o=r+"("+o+")",0===r.lastIndexOf("new ",0)&&(o="("+o+")")),o+"."+t+(i<0?"":0===i?"()":"("+n.slice(1).map(e).join(",")+")")}function n(e,n,r){return i=>t(e,i,n,r)}const r="new Date",i="String",o="RegExp";return{isNaN:"Number.isNaN",isFinite:"Number.isFinite",abs:"Math.abs",acos:"Math.acos",asin:"Math.asin",atan:"Math.atan",atan2:"Math.atan2",ceil:"Math.ceil",cos:"Math.cos",exp:"Math.exp",floor:"Math.floor",log:"Math.log",max:"Math.max",min:"Math.min",pow:"Math.pow",random:"Math.random",round:"Math.round",sin:"Math.sin",sqrt:"Math.sqrt",tan:"Math.tan",clamp:function(t){t.length<3&&Object(H["o"])("Missing arguments to clamp function."),t.length>3&&Object(H["o"])("Too many arguments to clamp function.");const n=t.map(e);return"Math.max("+n[1]+", Math.min("+n[2]+","+n[0]+"))"},now:"Date.now",utc:"Date.UTC",datetime:r,date:n("getDate",r,0),day:n("getDay",r,0),year:n("getFullYear",r,0),month:n("getMonth",r,0),hours:n("getHours",r,0),minutes:n("getMinutes",r,0),seconds:n("getSeconds",r,0),milliseconds:n("getMilliseconds",r,0),time:n("getTime",r,0),timezoneoffset:n("getTimezoneOffset",r,0),utcdate:n("getUTCDate",r,0),utcday:n("getUTCDay",r,0),utcyear:n("getUTCFullYear",r,0),utcmonth:n("getUTCMonth",r,0),utchours:n("getUTCHours",r,0),utcminutes:n("getUTCMinutes",r,0),utcseconds:n("getUTCSeconds",r,0),utcmilliseconds:n("getUTCMilliseconds",r,0),length:n("length",null,-1),join:n("join",null),indexof:n("indexOf",null),lastindexof:n("lastIndexOf",null),slice:n("slice",null),reverse:function(t){return"("+e(t[0])+").slice().reverse()"},parseFloat:"parseFloat",parseInt:"parseInt",upper:n("toUpperCase",i,0),lower:n("toLowerCase",i,0),substring:n("substring",i),split:n("split",i),replace:n("replace",i),trim:n("trim",i,0),regexp:o,test:n("test",o),if:function(t){t.length<3&&Object(H["o"])("Missing arguments to if function."),t.length>3&&Object(H["o"])("Too many arguments to if function.");const n=t.map(e);return"("+n[0]+"?"+n[1]+":"+n[2]+")"}}};function rA(e){const t=e&&e.length-1;return t&&('"'===e[0]&&'"'===e[t]||"'"===e[0]&&"'"===e[t])?e.slice(1,-1):e}var iA=function(e){e=e||{};const t=e.whitelist?Object(H["eb"])(e.whitelist):{},n=e.blacklist?Object(H["eb"])(e.blacklist):{},r=e.constants||tA,i=(e.functions||nA)(f),o=e.globalvar,a=e.fieldvar,u=Object(H["E"])(o)?o:e=>`${o}["${e}"]`;let s={},c={},l=0;function f(e){if(Object(H["I"])(e))return e;const t=d[e.type];return null==t&&Object(H["o"])("Unsupported type: "+e.type),t(e)}const d={Literal:e=>e.raw,Identifier:e=>{const i=e.name;return l>0?i:Object(H["w"])(n,i)?Object(H["o"])("Illegal identifier: "+i):Object(H["w"])(r,i)?r[i]:Object(H["w"])(t,i)?i:(s[i]=1,u(i))},MemberExpression:e=>{const t=!e.computed,n=f(e.object);t&&(l+=1);const r=f(e.property);return n===a&&(c[rA(r)]=1),t&&(l-=1),n+(t?"."+r:"["+r+"]")},CallExpression:e=>{"Identifier"!==e.callee.type&&Object(H["o"])("Illegal callee type: "+e.callee.type);const t=e.callee.name,n=e.arguments,r=Object(H["w"])(i,t)&&i[t];return r||Object(H["o"])("Unrecognized function: "+t),Object(H["E"])(r)?r(n):r+"("+n.map(f).join(",")+")"},ArrayExpression:e=>"["+e.elements.map(f).join(",")+"]",BinaryExpression:e=>"("+f(e.left)+e.operator+f(e.right)+")",UnaryExpression:e=>"("+e.operator+f(e.argument)+")",ConditionalExpression:e=>"("+f(e.test)+"?"+f(e.consequent)+":"+f(e.alternate)+")",LogicalExpression:e=>"("+f(e.left)+e.operator+f(e.right)+")",ObjectExpression:e=>"{"+e.properties.map(f).join(",")+"}",Property:e=>{l+=1;const t=f(e.key);return l-=1,t+":"+f(e.value)}};function h(e){const t={code:f(e),globals:Object.keys(s),fields:Object.keys(c)};return s={},c={},t}return h.functions=i,h.constants=r,h},oA=n("166a"),aA=n("62f0"),uA={};function sA(e,t,n){var r=e+":"+n,i=uA[r];return i&&i[0]===t||(uA[r]=i=[t,t(n)]),i[1]}function cA(e,t){return sA("format",Mh["b"],t)(e)}function lA(e,t){return sA("timeFormat",ot["b"],t)(e)}function fA(e,t){return sA("utcFormat",ot["d"],t)(e)}function dA(e,t){return sA("timeParse",ot["c"],t)(e)}function hA(e,t){return sA("utcParse",ot["e"],t)(e)}var pA=new Date(2e3,0,1);function gA(e,t,n){return pA.setMonth(e),pA.setDate(t),lA(pA,n)}function mA(e){return gA(e,1,"%B")}function vA(e){return gA(e,1,"%b")}function bA(e){return gA(0,2+e,"%A")}function yA(e){return gA(0,2+e,"%a")}function xA(e){var t,n,r,i,o=0;if(e&&(t=e.length)){for(n=e[o];null==n||n!==n;n=e[++o]);for(r=i=n;o<t;++o)n=e[o],null!=n&&(n<r&&(r=n),n>i&&(i=n))}return[r,i]}function wA(e,t,n,r){var i,o=t[0],a=t[t.length-1];return o>a&&(i=o,o=a,a=i),n=void 0===n||n,r=void 0===r||r,(n?o<=e:o<e)&&(r?e<=a:e<a)}function OA(e,t,n){var r,i=e[0],o=e[1];return o<i&&(r=o,o=i,i=r),r=o-i,r>=n-t?[t,n]:[i=Math.min(Math.max(i,t),n-r),i+r]}function EA(e){return e[e.length-1]-e[0]||0}function kA(e){return 1+~~(new Date(e).getMonth()/3)}function _A(e){return 1+~~(new Date(e).getUTCMonth()/3)}function AA(e,t,n){try{e[t].apply(e,["EXPRESSION"].concat([].slice.call(n)))}catch(r){e.warn(r)}return n[n.length-1]}function SA(){return AA(this.context.dataflow,"warn",arguments)}function jA(){return AA(this.context.dataflow,"info",arguments)}function CA(){return AA(this.context.dataflow,"debug",arguments)}var DA=function(e){var t=this.context.group,n=!1;if(t)while(e){if(e===t){n=!0;break}e=e.mark.group}return n};function FA(e){var t=e.touches,n=t[0].clientX-t[1].clientX,r=t[0].clientY-t[1].clientY;return Math.sqrt(n*n+r*r)}function MA(e){var t=e.touches;return Math.atan2(t[0].clientY-t[1].clientY,t[0].clientX-t[1].clientX)}var zA="undefined"!==typeof window&&window||null;function NA(){return zA?zA.screen:{}}function TA(){return zA?[zA.innerWidth,zA.innerHeight]:[void 0,void 0]}function RA(){var e=this.context.dataflow,t=e.container&&e.container();return t?[t.clientWidth,t.clientHeight]:[void 0,void 0]}var BA=function(e,t,n,r,i,o){if(!n&&0!==n)return o;var a,u,s=e[0],c=Object(H["V"])(e),l=+n;return c<s&&(a=s,s=c,c=a),a=Math.abs(t-s),u=Math.abs(c-t),a<u&&a<=l?r:u<=l?i:o},PA=function(){var e=[].slice.call(arguments);return e.unshift({}),H["p"].apply(null,e)},IA="Literal",LA="Identifier",$A="@",UA="%",qA=":";function WA(e,t){var n;return Object(H["E"])(e)?e:Object(H["I"])(e)?(n=t.scales[e])&&n.value:void 0}function HA(e,t,n){var r=UA+n;if(!t.hasOwnProperty(r))try{t[r]=e.scaleRef(n)}catch(i){}}function GA(e,t,n,r){if(t[0].type===IA)HA(n,r,t[0].value);else if(t[0].type===LA)for(e in n.scales)HA(n,r,e)}function YA(e,t){var n=WA(e,(t||this).context);return n&&n.range?n.range():[]}function VA(e,t){var n=WA(e,(t||this).context);return n?n.domain():[]}function XA(e,t){var n=WA(e,(t||this).context);return n&&n.bandwidth?n.bandwidth():0}function JA(e,t,n){return gd(e||0,t||0,n||0)}function QA(e,t){var n=WA(e,(t||this).context);return n?n.copy():void 0}function KA(e,t,n){var r=WA(e,(n||this).context);return r?r(t):void 0}function ZA(e,t,n){var r=WA(e,(n||this).context);return r?Object(H["B"])(t)?(r.invertRange||r.invert)(t):(r.invert||r.invertExtent)(t):void 0}var eS=function(e,t,n,r,i){e=WA(e,(i||this).context);var o=la(t,n),a=e.domain(),u=a[0],s=Object(H["V"])(a),c=Pd(e,u,s);e.ticks&&(a=e.ticks(+r||15),u!==a[0]&&a.unshift(u),s!==Object(H["V"])(a)&&a.push(s));for(var l=0,f=a.length;l<f;++l)o.stop(c(a[l]),e(a[l]));return o},tS=n("3d23"),nS=n("7e33"),rS=n("a794");function iS(e,t){return function(n,r,i){if(n){var o=WA(n,(i||this).context);return o&&o.path[e](r)}return t(r)}}var oS=iS("area",tS["c"]),aS=iS("bounds",nS["a"]),uS=iS("centroid",rS["a"]);function sS(e,t,n){var r=WA(e,(n||this).context);return function(e){return r?r.path.context(e)(t):""}}function cS(e){var t=null;return function(n){return n?Ga(n,t=t||Pa(e)):e}}function lS(e){var t=this.context.data[e];return t?t.values.value:[]}function fS(e,t,n,r){t[0].type!==IA&&Object(H["o"])("First argument to data functions must be a string literal.");var i=t[0].value,o=qA+i;r.hasOwnProperty(o)||(r[o]=n.getData(i).tuplesRef())}function dS(e,t,n){var r=this.context.data[e]["index:"+t],i=r?r.value.get(n):void 0;return i?i.count:i}function hS(e,t,n,r){t[0].type!==IA&&Object(H["o"])("First argument to indata must be a string literal."),t[1].type!==IA&&Object(H["o"])("Second argument to indata must be a string literal.");var i=t[0].value,o=t[1].value,a=$A+o;r.hasOwnProperty(a)||(r[a]=n.getData(i).indataRef(n,o))}function pS(e,t){var n=this.context.dataflow,r=this.context.data[e],i=r.input;return n.pulse(i,n.changeset().remove(H["hb"]).insert(t)),1}var gS={};function mS(e){return e.data}function vS(e,t){var n=lS.call(t,e);return n.root&&n.root.lookup||gS}function bS(e,t,n){var r=vS(e,this),i=r[t],o=r[n];return i&&o?i.path(o).map(mS):void 0}function yS(e,t){var n=vS(e,this)[t];return n?n.ancestors().map(mS):void 0}var xS=function(e,t,n){if(e){var r=this.context.dataflow,i=e.mark.source;r.pulse(i,r.changeset().encode(e,t))}return void 0!==n?n:e};function wS(e,t){return e===t||e!==e&&t!==t||!(!Object(H["B"])(e)||!Object(H["B"])(t)||e.length!==t.length)&&OS(e,t)}function OS(e,t){for(var n=0,r=e.length;n<r;++n)if(!wS(e[n],t[n]))return!1;return!0}function ES(e){return function(t){for(var n in e)if(!wS(t[n],e[n]))return!1;return!0}}var kS=function(e,t,n,r,i,o){var a,u,s=this.context.dataflow,c=this.context.data[e],l=c.input,f=c.changes,d=s.stamp();if(!1===s._trigger||!(l.value.length||t||r))return 0;if((!f||f.stamp<d)&&(c.changes=f=s.changeset(),f.stamp=d,s.runAfter((function(){c.modified=!0,s.pulse(l,f).run()}),!0,1)),n&&(a=!0===n?H["hb"]:Object(H["B"])(n)||X(n)?n:ES(n),f.remove(a)),t&&f.insert(t),r&&(a=ES(r),l.value.some(a)?f.remove(a):f.insert(r)),i)for(u in o)f.modify(i,u,o[u]);return 1},_S="E",AS="R",SS="R-E",jS="R-LE",CS="R-RE",DS="intersect",FS="union",MS="index:unit";function zS(e,t){for(var n,r,i=t.fields,o=t.values,a=i.length,u=0;u<a;++u)if(r=i[u],r.getter=H["u"].getter||Object(H["u"])(r.field),n=r.getter(e),Object(H["D"])(n)&&(n=Object(H["db"])(n)),Object(H["D"])(o[u])&&(o[u]=Object(H["db"])(o[u])),Object(H["D"])(o[u][0])&&(o[u]=o[u].map(H["db"])),r.type===_S){if(Object(H["B"])(o[u])?o[u].indexOf(n)<0:n!==o[u])return!1}else if(r.type===AS){if(!wA(n,o[u]))return!1}else if(r.type===CS){if(!wA(n,o[u],!0,!1))return!1}else if(r.type===SS){if(!wA(n,o[u],!1,!1))return!1}else if(r.type===jS&&!wA(n,o[u],!1,!0))return!1;return!0}function NS(e,t,n){for(var r,i,o,a,u,s=this.context.data[e],c=s?s.values.value:[],l=s?s[MS]&&s[MS].value:void 0,f=n===DS,d=c.length,h=0;h<d;++h)if(r=c[h],l&&f){if(i=i||{},o=i[a=r.unit]||0,-1===o)continue;if(u=zS(t,r),i[a]=u?-1:++o,u&&1===l.size)return!0;if(!u&&o===l.get(a).count)return!1}else if(u=zS(t,r),f^u)return u;return d&&f}function TS(e,t,n,r){t[0].type!==IA&&Object(H["o"])("First argument to indata must be a string literal.");var i=t[0].value,o=t.length>=2&&t[t.length-1].value,a="unit",u=$A+a;o!==DS||r.hasOwnProperty(u)||(r[u]=n.getData(i).indataRef(n,a)),fS(e,t,n,r)}function RS(e,t){for(var n,r,i,o,a,u,s,c,l,f,d,h=this.context.data[e],p=h?h.values.value:[],g={},m={},v=p.length,b=0;b<v;++b)for(n=p[b],o=n.unit,r=n.fields,i=n.values,f=0,d=r.length;f<d;++f)a=r[f],u=g[a.field]||(g[a.field]={}),s=u[o]||(u[o]=[]),m[a.field]=c=a.type.charAt(0),l=BS[c+"_union"],u[o]=l(s,Object(H["i"])(i[f]));return t=t||FS,Object.keys(g).forEach((function(e){g[e]=Object.keys(g[e]).map((function(t){return g[e][t]})).reduce((function(n,r){return void 0===n?r:BS[m[e]+"_"+t](n,r)}))})),g}var BS={E_union:function(e,t){if(!e.length)return t;for(var n=0,r=t.length;n<r;++n)e.indexOf(t[n])<0&&e.push(t[n]);return e},E_intersect:function(e,t){return e.length?e.filter((function(e){return t.indexOf(e)>=0})):t},R_union:function(e,t){var n=Object(H["db"])(t[0]),r=Object(H["db"])(t[1]);return n>r&&(n=t[1],r=t[0]),e.length?(e[0]>n&&(e[0]=n),e[1]<r&&(e[1]=r),e):[n,r]},R_intersect:function(e,t){var n=Object(H["db"])(t[0]),r=Object(H["db"])(t[1]);return n>r&&(n=t[1],r=t[0]),e.length?r<e[0]||e[1]<n?[]:(e[0]<n&&(e[0]=n),e[1]>r&&(e[1]=r),e):[n,r]}},PS="bin_",IS="intersect",LS="union",$S="index:unit";function US(e,t){for(var n,r=t.fields,i=t.values,o=t.getter||(t.getter=[]),a=r.length,u=0;u<a;++u)if(o[u]=o[u]||Object(H["u"])(r[u]),n=o[u](e),Object(H["D"])(n)&&(n=Object(H["db"])(n)),Object(H["D"])(i[u])&&(i[u]=Object(H["db"])(i[u])),t[PS+r[u]]){if(Object(H["D"])(i[u][0])&&(i[u]=i[u].map(H["db"])),!wA(n,i[u],!0,!1))return!1}else if(n!==i[u])return!1;return!0}function qS(e,t){for(var n,r,i,o=t.intervals,a=o.length,u=0;u<a;++u){if(r=o[u].extent,n=o[u].getter||(o[u].getter=Object(H["u"])(o[u].field)),i=n(e),!r||r[0]===r[1])return!1;if(Object(H["D"])(i)&&(i=Object(H["db"])(i)),Object(H["D"])(r[0])&&(r=o[u].extent=r.map(H["db"])),Object(H["F"])(r[0])&&!wA(i,r))return!1;if(Object(H["I"])(r[0])&&r.indexOf(i)<0)return!1}return!0}function WS(e,t,n,r){for(var i,o,a,u,s,c=this.context.data[e],l=c?c.values.value:[],f=c?c[$S]&&c[$S].value:void 0,d=n===IS,h=l.length,p=0;p<h;++p)if(i=l[p],f&&d){if(o=o||{},a=o[u=i.unit]||0,-1===a)continue;if(s=r(t,i),o[u]=s?-1:++a,s&&1===f.size)return!0;if(!s&&a===f.get(u).count)return!1}else if(s=r(t,i),d^s)return s;return h&&d}function HS(e,t,n){return WS.call(this,e,t,n,US)}function GS(e,t,n){return WS.call(this,e,t,n,qS)}function YS(e,t,n,r){t[0].type!==IA&&Object(H["o"])("First argument to indata must be a string literal.");var i=t[0].value,o=t.length>=2&&t[t.length-1].value,a="unit",u=$A+a;o!==IS||r.hasOwnProperty(u)||(r[u]=n.getData(i).indataRef(n,a)),fS(e,t,n,r)}function VS(e,t,n,r){var i,o,a,u,s,c=this.context.data[e],l=c?c.values.value:[],f=c?c[$S]&&c[$S].value:void 0,d=l[0],h=0;if(d){for(i=t?d.encodings.length:d.fields.length;h<i;++h)if(t&&d.encodings[h]===t||n&&d.fields[h]===n){o=h,u=d[PS+d.fields[h]];break}return f&&1===f.size&&(r=LS),f&&r===IS?(s=l.reduce((function(e,t){var n=e[t.unit]||(e[t.unit]=[]);return n.push({unit:t.unit,value:t.values[o]}),e}),{}),a=Object.keys(s).map((function(e){return{unit:e,value:u?QS(s[e],LS):JS(s[e],LS)}}))):a=l.map((function(e){return{unit:e.unit,value:e.values[o]}})),u?QS(a,r):JS(a,r)}}function XS(e,t,n,r){var i,o,a,u,s,c=this.context.data[e],l=c?c.values.value:[],f=l[0],d=0;if(f){for(i=f.intervals.length;d<i;++d)if(o=f.intervals[d],t&&o.encoding===t||n&&o.field===n){if(!o.extent)return;a=d,s=o.extent.length>2;break}return u=l.reduce((function(e,t){var n=t.intervals[a].extent,r=s?n.map((function(e){return{unit:t.unit,value:e}})):{unit:t.unit,value:n};return s?e.push.apply(e,r):e.push(r),e}),[]),s?JS(u,r):QS(u,r)}}function JS(e,t){for(var n,r,i,o,a={},u=0,s={},c=[],l=0,f=e.length;l<f;++l)n=e[l],r=n.unit,o=n.value,a[r]||(a[r]=++u),(i=s[o])||(s[o]=i={value:o,units:{},count:0}),i.units[r]||(i.units[r]=++i.count);for(o in s)i=s[o],t===IS&&i.count!==u||c.push(i.value);return c.length?c:void 0}function QS(e,t){for(var n,r,i,o,a=t===IS?ZS:KS,u=0,s=e.length;u<s;++u)n=e[u].value,Object(H["D"])(n[0])&&(n=n.map(H["db"])),i=n[0],o=n[1],i>o&&(o=n[0],i=n[1]),r=r?a(r,i,o):[i,o];return r&&r.length&&+r[0]!==+r[1]?r:void 0}function KS(e,t,n){return e[0]>t&&(e[0]=t),e[1]<n&&(e[1]=n),e}function ZS(e,t,n){return n<e[0]||e[1]<t?[]:(e[0]<t&&(e[0]=t),e[1]>n&&(e[1]=n),e)}var ej={random:function(){return Dn()},isArray:H["B"],isBoolean:H["C"],isDate:H["D"],isNumber:H["F"],isObject:H["G"],isRegExp:H["H"],isString:H["I"],isTuple:X,toBoolean:H["bb"],toDate:H["cb"],toNumber:H["db"],toString:H["fb"],pad:H["Q"],peek:H["V"],truncate:H["gb"],rgb:oA["g"],lab:aA["a"],hcl:aA["c"],hsl:oA["f"],sequence:Xr,format:cA,utcFormat:fA,utcParse:hA,timeFormat:lA,timeParse:dA,monthFormat:mA,monthAbbrevFormat:vA,dayFormat:bA,dayAbbrevFormat:yA,quarter:kA,utcquarter:_A,warn:SA,info:jA,debug:CA,extent:xA,inScope:DA,clampRange:OA,pinchDistance:FA,pinchAngle:MA,screen:NA,containerSize:RA,windowSize:TA,span:EA,merge:PA,flush:BA,bandspace:JA,inrange:wA,setdata:pS,pathShape:cS,panLinear:H["R"],panLog:H["S"],panPow:H["T"],zoomLinear:H["mb"],zoomLog:H["nb"],zoomPow:H["ob"],encode:xS,modify:kS},tj=["view","item","group","xy","x","y"],nj="event.vega.",rj="this.",ij={};function oj(e,t,n){return 1===arguments.length?ej[e]:(ej[e]=t,n&&(ij[e]=n),sj&&(sj.functions[e]=rj+e),this)}function aj(e){var t=nA(e);for(var n in tj.forEach((function(e){t[e]=nj+e})),ej)t[n]=rj+n;return t}oj("bandwidth",XA,GA),oj("copy",QA,GA),oj("domain",VA,GA),oj("range",YA,GA),oj("invert",ZA,GA),oj("scale",KA,GA),oj("gradient",eS,GA),oj("geoArea",oS,GA),oj("geoBounds",aS,GA),oj("geoCentroid",uS,GA),oj("geoShape",sS,GA),oj("indata",dS,hS),oj("data",lS,fS),oj("treePath",bS,fS),oj("treeAncestors",yS,fS),oj("vlSelectionTest",NS,TS),oj("vlSelectionResolve",RS,TS),oj("vlSingle",HS,fS),oj("vlSingleDomain",VS,fS),oj("vlMulti",HS,YS),oj("vlMultiDomain",VS,YS),oj("vlInterval",GS,fS),oj("vlIntervalDomain",XS,fS);var uj={blacklist:["_"],whitelist:["datum","event","item"],fieldvar:"datum",globalvar:function(e){return"_["+Object(H["ab"])("$"+e)+"]"},functions:aj,constants:tA,visitors:ij},sj=iA(uj),cj="$",lj=function(e,t,n){var r,i,o={};try{e=Object(H["I"])(e)?e:Object(H["ab"])(e)+"",r=eA(e)}catch(a){Object(H["o"])("Expression parse error: "+e)}return r.visit((function(e){if("CallExpression"===e.type){var n=e.callee.name,r=uj.visitors[n];r&&r(n,e.arguments,t,o)}})),i=sj(r),i.globals.forEach((function(e){var n=cj+e;!o.hasOwnProperty(n)&&t.getSignal(e)&&(o[n]=t.signalRef(e))})),{$expr:n?n+"return("+i.code+");":i.code,$fields:i.fields,$params:o}};function fj(e,t,n,r){this.id=-1,this.type=e,this.value=t,this.params=n,r&&(this.parent=r)}function dj(e,t,n,r){return new fj(e,t,n,r)}function hj(e,t){return dj("operator",e,t)}function pj(e){var t={$ref:e.id};return e.id<0&&(e.refs=e.refs||[]).push(t),t}var gj={$tupleid:1,toString:function(){return":_tupleid_:"}};function mj(e,t){return t?{$field:e,$name:t}:{$field:e}}var vj=mj("key");function bj(e,t){return{$compare:e,$order:t}}function yj(e,t){var n={$key:e};return t&&(n.$flat=!0),n}var xj="ascending",wj="descending";function Oj(e){return Object(H["G"])(e)?(e.order===wj?"-":"+")+Ej(e.op,e.field):""}function Ej(e,t){return(e&&e.signal?"$"+e.signal:e||"")+(e&&t?"_":"")+(t&&t.signal?"$"+t.signal:t||"")}var kj="scope",_j="view";function Aj(e){return e&&e.signal}function Sj(e){if(Aj(e))return!0;if(Object(H["G"])(e))for(var t in e)if(Sj(e[t]))return!0;return!1}function jj(e,t){return null!=e?e:t}function Cj(e){return e&&e.signal||e}var Dj="timer";function Fj(e,t){var n=e.merge?zj:e.stream?Nj:e.type?Tj:Object(H["o"])("Invalid stream specification: "+Object(H["ab"])(e));return n(e,t)}function Mj(e){return e===kj?_j:e||_j}function zj(e,t){var n=e.merge.map((function(e){return Fj(e,t)})),r=Rj({merge:n},e,t);return t.addStream(r).id}function Nj(e,t){var n=Fj(e.stream,t),r=Rj({stream:n},e,t);return t.addStream(r).id}function Tj(e,t){var n,r;return e.type===Dj?(n=t.event(Dj,e.throttle),e={between:e.between,filter:e.filter}):n=t.event(Mj(e.source),e.type),r=Rj({stream:n},e,t),1===Object.keys(r).length?n:t.addStream(r).id}function Rj(e,t,n){var r=t.between;return r&&(2!==r.length&&Object(H["o"])('Stream "between" parameter must have 2 entries: '+Object(H["ab"])(t)),e.between=[Fj(r[0],n),Fj(r[1],n)]),r=t.filter?Object(H["i"])(t.filter):[],(t.marktype||t.markname||t.markrole)&&r.push(Bj(t.marktype,t.markname,t.markrole)),t.source===kj&&r.push("inScope(event.item)"),r.length&&(e.filter=lj("("+r.join(")&&(")+")").$expr),null!=(r=t.throttle)&&(e.throttle=+r),null!=(r=t.debounce)&&(e.debounce=+r),t.consume&&(e.consume=!0),e}function Bj(e,t,n){var r="event.item";return r+(e&&"*"!==e?"&&"+r+".mark.marktype==='"+e+"'":"")+(n?"&&"+r+".mark.role==='"+n+"'":"")+(t?"&&"+r+".mark.name==='"+t+"'":"")}const Pj="view",Ij="[",Lj="]",$j="{",Uj="}",qj=":",Wj=",",Hj="@",Gj=">",Yj=/[[\]{}]/,Vj={"*":1,arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1};let Xj,Jj;var Qj=function(e,t,n){return Xj=t||Pj,Jj=n||Vj,eC(e.trim()).map(tC)};function Kj(e){return Jj[e]}function Zj(e,t,n,r,i){const o=e.length;let a,u=0;for(;t<o;++t){if(a=e[t],!u&&a===n)return t;i&&i.indexOf(a)>=0?--u:r&&r.indexOf(a)>=0&&++u}return t}function eC(e){const t=[],n=e.length;let r=0,i=0;while(i<n)i=Zj(e,i,Wj,Ij+$j,Lj+Uj),t.push(e.substring(r,i).trim()),r=++i;if(0===t.length)throw"Empty event selector: "+e;return t}function tC(e){return"["===e[0]?nC(e):rC(e)}function nC(e){const t=e.length;let n,r=1;if(r=Zj(e,r,Lj,Ij,Lj),r===t)throw"Empty between selector: "+e;if(n=eC(e.substring(1,r)),2!==n.length)throw"Between selector must have two elements: "+e;if(e=e.slice(r+1).trim(),e[0]!==Gj)throw"Expected '>' after between selector: "+e;n=n.map(tC);const i=tC(e.slice(1).trim());return i.between?{between:n,stream:i}:(i.between=n,i)}function rC(e){const t={source:Xj},n=[];let r,i,o=[0,0],a=0,u=0,s=e.length,c=0;if(e[s-1]===Uj){if(c=e.lastIndexOf($j),!(c>=0))throw"Unmatched right brace: "+e;try{o=iC(e.substring(c+1,s-1))}catch(l){throw"Invalid throttle specification: "+e}e=e.slice(0,c).trim(),s=e.length,c=0}if(!s)throw e;if(e[0]===Hj&&(a=++c),r=Zj(e,c,qj),r<s&&(n.push(e.substring(u,r).trim()),u=c=++r),c=Zj(e,c,Ij),c===s)n.push(e.substring(u,s).trim());else if(n.push(e.substring(u,c).trim()),i=[],u=++c,u===s)throw"Unmatched left bracket: "+e;while(c<s){if(c=Zj(e,c,Lj),c===s)throw"Unmatched left bracket: "+e;if(i.push(e.substring(u,c).trim()),c<s-1&&e[++c]!==Ij)throw"Expected left bracket: "+e;u=++c}if(!(s=n.length)||Yj.test(n[s-1]))throw"Invalid event selector: "+e;return s>1?(t.type=n[1],a?t.markname=n[0].slice(1):Kj(n[0])?t.marktype=n[0]:t.source=n[0]):t.type=n[0],"!"===t.type.slice(-1)&&(t.consume=!0,t.type=t.type.slice(0,-1)),null!=i&&(t.filter=i),o[0]&&(t.throttle=o[0]),o[1]&&(t.debounce=o[1]),t}function iC(e){const t=e.split(Wj);if(!e.length||t.length>2)throw e;return t.map(t=>{const n=+t;if(n!==n)throw e;return n})}var oC="var datum=event.item&&event.item.datum;",aC=function(e,t,n){var r,i=e.events,o=e.update,a=e.encode,u=[],s="";i||Object(H["o"])("Signal update missing events specification."),Object(H["I"])(i)&&(i=Qj(i,t.isSubscope()?kj:_j)),i=Object(H["i"])(i).filter((function(e){return e.signal||e.scale?(u.push(e),0):1})),i.length&&u.push(i.length>1?{merge:i}:i[0]),null!=a&&(o&&Object(H["o"])("Signal encode and update are mutually exclusive."),o="encode(item(),"+Object(H["ab"])(a)+")"),s=Object(H["I"])(o)?lj(o,t,oC):null!=o.expr?lj(o.expr,t,oC):null!=o.value?o.value:null!=o.signal?{$expr:"_.value",$params:{value:t.signalRef(o.signal)}}:Object(H["o"])("Invalid signal update specification."),r={target:n,update:s},e.force&&(r.options={force:!0}),u.forEach((function(e){t.addUpdate(Object(H["p"])(uC(e,t),r))}))};function uC(e,t){return{source:e.signal?t.signalRef(e.signal):e.scale?t.scaleRef(e.scale):Fj(e,t)}}var sC=function(e,t){var n=t.getSignal(e.name),r=e.update;e.init&&(r?Object(H["o"])("Signals can not include both init and update expressions."):(r=e.init,n.initonly=!0)),r&&(r=lj(r,t),n.update=r.$expr,n.params=r.$params),e.on&&e.on.forEach((function(e){aC(e,t,n.id)}))};function cC(e){return function(t,n,r){return dj(e,n,t||void 0,r)}}var lC=cC("aggregate"),fC=cC("axisticks"),dC=cC("bound"),hC=cC("collect"),pC=cC("compare"),gC=cC("datajoin"),mC=cC("encode"),vC=cC("expression"),bC=(cC("extent"),cC("facet")),yC=cC("field"),xC=cC("key"),wC=cC("legendentries"),OC=cC("load"),EC=cC("mark"),kC=cC("multiextent"),_C=cC("multivalues"),AC=cC("overlap"),SC=cC("params"),jC=cC("prefacet"),CC=cC("projection"),DC=cC("proxy"),FC=cC("relay"),MC=cC("render"),zC=cC("scale"),NC=cC("sieve"),TC=cC("sortitems"),RC=cC("viewlayout"),BC=cC("values"),PC=0,IC=["identity","ordinal","band","point","bin-linear","bin-ordinal","quantize","quantile","threshold","linear","pow","sqrt","log","sequential","time","utc"],LC=Object(H["eb"])(IC),$C=Object(H["eb"])(IC.slice(4,9)),UC=Object(H["eb"])(IC.slice(9)),qC=Object(H["eb"])(IC.slice(1,6));function WC(e){return qC.hasOwnProperty(e)}function HC(e){return $C.hasOwnProperty(e)}function GC(e){return UC.hasOwnProperty(e)}function YC(e){return"quantile"===e}function VC(e,t){var n=e.type||"linear";LC.hasOwnProperty(n)||Object(H["o"])("Unrecognized scale type: "+Object(H["ab"])(n)),t.addScale(e.name,{type:n,domain:void 0})}function XC(e,t){var n,r=t.getScale(e.name).params;for(n in r.domain=ZC(e.domain,e,t),null!=e.range&&(r.range=lD(e,t,r)),null!=e.interpolate&&cD(e.interpolate,r),null!=e.nice&&sD(e.nice,r),e)r.hasOwnProperty(n)||"name"===n||(r[n]=JC(e[n],t))}function JC(e,t){return Object(H["G"])(e)?e.signal?t.signalRef(e.signal):Object(H["o"])("Unsupported object: "+Object(H["ab"])(e)):e}function QC(e,t){return e.signal?t.signalRef(e.signal):e.map((function(e){return JC(e,t)}))}function KC(e){Object(H["o"])("Can not find data set: "+Object(H["ab"])(e))}function ZC(e,t,n){if(e)return e.signal?n.signalRef(e.signal):(Object(H["B"])(e)?eD:e.fields?nD:tD)(e,t,n);null==t.domainMin&&null==t.domainMax||Object(H["o"])("No scale domain defined for domainMin/domainMax to override.")}function eD(e,t,n){return e.map((function(e){return JC(e,n)}))}function tD(e,t,n){var r=n.getData(e.data);return r||KC(e.data),WC(t.type)?r.valuesRef(n,e.field,oD(e.sort,!1)):YC(t.type)?r.domainRef(n,e.field):r.extentRef(n,e.field)}function nD(e,t,n){var r=e.data,i=e.fields.reduce((function(e,t){return t=Object(H["I"])(t)?{data:r,field:t}:Object(H["B"])(t)||t.signal?rD(t,n):t,e.push(t),e}),[]);return(WC(t.type)?iD:YC(t.type)?aD:uD)(e,n,i)}function rD(e,t){var n="_:vega:_"+PC++,r=hC({});if(Object(H["B"])(e))r.value={$ingest:e};else if(e.signal){var i="setdata("+Object(H["ab"])(n)+","+e.signal+")";r.params.input=t.signalRef(i)}return t.addDataPipeline(n,[r,NC({})]),{data:n,field:"data"}}function iD(e,t,n){var r,i,o,a;return r=n.map((function(e){var n=t.getData(e.data);return n||KC(e.data),n.countsRef(t,e.field)})),i=t.add(lC({groupby:vj,ops:["sum"],fields:[t.fieldRef("count")],as:["count"],pulse:r})),o=t.add(hC({pulse:pj(i)})),a=t.add(BC({field:vj,sort:t.sortRef(oD(e.sort,!0)),pulse:pj(o)})),pj(a)}function oD(e,t){return e&&(e.field||e.op?e.field||"count"===e.op?t&&e.field?Object(H["o"])("Multiple domain scales can not sort by field."):t&&e.op&&"count"!==e.op&&Object(H["o"])("Multiple domain scales support op count only."):Object(H["o"])("No field provided for sort aggregate op: "+e.op):Object(H["G"])(e)?e.field="key":e={field:"key"}),e}function aD(e,t,n){var r=n.map((function(e){var n=t.getData(e.data);return n||KC(e.data),n.domainRef(t,e.field)}));return pj(t.add(_C({values:r})))}function uD(e,t,n){var r=n.map((function(e){var n=t.getData(e.data);return n||KC(e.data),n.extentRef(t,e.field)}));return pj(t.add(kC({extents:r})))}function sD(e,t){t.nice=Object(H["G"])(e)?{interval:JC(e.interval),step:JC(e.step)}:JC(e)}function cD(e,t){t.interpolate=JC(e.type||e),null!=e.gamma&&(t.interpolateGamma=JC(e.gamma))}function lD(e,t,n){var r=e.range,i=t.config.range;if(r.signal)return t.signalRef(r.signal);if(Object(H["I"])(r)){if(i&&i.hasOwnProperty(r))return e=Object(H["p"])({},e,{range:i[r]}),lD(e,t,n);"width"===r?r=[0,{signal:"width"}]:"height"===r?r=WC(e.type)?[0,{signal:"height"}]:[{signal:"height"},0]:Object(H["o"])("Unrecognized scale range value: "+Object(H["ab"])(r))}else{if(r.scheme)return n.scheme=JC(r.scheme,t),r.extent&&(n.schemeExtent=QC(r.extent,t)),void(r.count&&(n.schemeCount=JC(r.count,t)));if(r.step)return void(n.rangeStep=JC(r.step,t));if(WC(e.type)&&!Object(H["B"])(r))return ZC(r,e,t);Object(H["B"])(r)||Object(H["o"])("Unsupported range type: "+Object(H["ab"])(r))}return r.map((function(e){return JC(e,t)}))}var fD=function(e,t){var n={};for(var r in e)"name"!==r&&(n[r]=dD(e[r],r,t));t.addProjection(e.name,n)};function dD(e,t,n){return Object(H["B"])(e)?e.map((function(e){return dD(e,t,n)})):Object(H["G"])(e)?e.signal?n.signalRef(e.signal):"fit"===t?e:Object(H["o"])("Unsupported parameter object: "+Object(H["ab"])(e)):e}var hD="top",pD="left",gD="right",mD="bottom",vD="center",bD="vertical",yD="start",xD="end",wD="index",OD="label",ED="offset",kD="perc",_D="perc2",AD="size",SD="value",jD="guide-label",CD="guide-title",DD="group-title",FD="symbol",MD="gradient",zD="discrete",ND=["size","shape","fill","stroke","strokeDash","opacity"],TD={name:1,interactive:1},RD=Object(H["eb"])(["rule"]),BD=Object(H["eb"])(["group","image","rect"]),PD=function(e,t){var n="";return RD[t]||(e.x2&&(e.x?(BD[t]&&(n+="if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;"),n+="o.width=o.x2-o.x;"):n+="o.x=o.x2-(o.width||0);"),e.xc&&(n+="o.x=o.xc-(o.width||0)/2;"),e.y2&&(e.y?(BD[t]&&(n+="if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;"),n+="o.height=o.y2-o.y;"):n+="o.y=o.y2-(o.height||0);"),e.yc&&(n+="o.y=o.yc-(o.height||0)/2;")),n},ID=function(e,t,n,r){function i(e,i,o,a){var u=VD(null,i,t,n,r),s=VD(null,o,t,n,r),c=VD(null,a,t,n,r);return"this."+e+"("+[u,s,c].join(",")+").toString()"}return e.c?i("hcl",e.h,e.c,e.l):e.h||e.s?i("hsl",e.h,e.s,e.l):e.l||e.a?i("lab",e.l,e.a,e.b):e.r||e.g||e.b?i("rgb",e.r,e.g,e.b):null},LD=function(e,t,n,r){var i=lj(e,t);return i.$fields.forEach((function(e){r[e]=1})),Object(H["p"])(n,i.$params),i.$expr},$D=function(e,t,n,r){return UD(Object(H["G"])(e)?e:{datum:e},t,n,r)};function UD(e,t,n,r){var i,o,a;if(e.signal)i="datum",a=LD(e.signal,t,n,r);else if(e.group||e.parent){o=Math.max(1,e.level||1),i="item";while(o-- >0)i+=".mark.group";e.parent?(a=e.parent,i+=".datum"):a=e.group}else e.datum?(i="datum",a=e.datum):Object(H["o"])("Invalid field reference: "+Object(H["ab"])(e));return e.signal||(Object(H["I"])(a)?(r[a]=1,a=Object(H["Z"])(a).map(H["ab"]).join("][")):a=UD(a,t,n,r)),i+"["+a+"]"}var qD=function(e,t,n,r,i){var o,a,u,s=HD(e.scale,n,r,i);return null!=e.range?(o=+e.range,a=s+".range()",t=0===o?a+"[0]":"($="+a+","+(1===o?"$[$.length-1]":"$[0]+"+o+"*($[$.length-1]-$[0])")+")"):(void 0!==t&&(t=s+"("+t+")"),e.band&&(u=WD(e.scale,n))&&(a=s+".bandwidth",o=+e.band,o=a+"()"+(1===o?"":"*"+o),u<0&&(o="("+a+"?"+o+":0)"),t=(t?t+"+":"")+o,e.extra&&(t="(datum.extra?"+s+"(datum.extra.value):"+t+")")),null==t&&(t="0")),t};function WD(e,t){if(!Object(H["I"])(e))return-1;var n=t.scaleType(e);return"band"===n||"point"===n?1:0}function HD(e,t,n,r){var i;if(Object(H["I"])(e))i=UA+e,n.hasOwnProperty(i)||(n[i]=t.scaleRef(e)),i=Object(H["ab"])(i);else{for(i in t.scales)n[UA+i]=t.scaleRef(i);i=Object(H["ab"])(UA)+"+"+(e.signal?"("+LD(e.signal,t,n,r)+")":$D(e,t,n,r))}return"_["+i+"]"}var GD=function(e,t,n,r){return"this.gradient("+HD(e.gradient,t,n,r)+","+Object(H["ab"])(e.start)+","+Object(H["ab"])(e.stop)+","+Object(H["ab"])(e.count)+")"},YD=function(e,t,n,r){return Object(H["G"])(e)?"("+VD(null,e,t,n,r)+")":e},VD=function(e,t,n,r,i){if(null!=t.gradient)return GD(t,n,r,i);var o=t.signal?LD(t.signal,n,r,i):t.color?ID(t.color,n,r,i):null!=t.field?$D(t.field,n,r,i):void 0!==t.value?Object(H["ab"])(t.value):void 0;return null!=t.scale&&(o=qD(t,o,n,r,i)),void 0===o&&(o=null),null!=t.exponent&&(o="Math.pow("+o+","+YD(t.exponent,n,r,i)+")"),null!=t.mult&&(o+="*"+YD(t.mult,n,r,i)),null!=t.offset&&(o+="+"+YD(t.offset,n,r,i)),t.round&&(o="Math.round("+o+")"),o},XD=function(e,t,n){return e+"["+Object(H["ab"])(t)+"]="+n+";"},JD=function(e,t,n,r,i){var o="";return t.forEach((function(t){var a=VD(e,t,n,r,i);o+=t.test?LD(t.test,n,r,i)+"?"+a+":":a})),":"===Object(H["V"])(o)&&(o+="null"),XD("o",e,o)};function QD(e,t,n,r){var i,o,a,u={},s="var o=item,datum=o.datum,$;";for(i in e)o=e[i],Object(H["B"])(o)?s+=JD(i,o,r,n,u):(a=VD(i,o,r,n,u),s+=XD("o",i,a));return s+=PD(e,t),s+="return 1;",{$expr:s,$fields:Object.keys(u),$output:Object.keys(e)}}var KD="mark",ZD="frame",eF="scope",tF="axis",nF="axis-domain",rF="axis-grid",iF="axis-label",oF="axis-tick",aF="axis-title",uF="legend",sF="legend-band",cF="legend-entry",lF="legend-gradient",fF="legend-label",dF="legend-symbol",hF="legend-title",pF="title";function gF(e){return Object(H["G"])(e)?Object(H["p"])({},e):{value:e}}function mF(e,t,n,r){return null!=n?(Object(H["G"])(n)&&!Object(H["B"])(n)?e.update[t]=n:e[r||"enter"][t]={value:n},1):0}function vF(e,t,n){for(var r in t)n&&n.hasOwnProperty(r)||(e[r]=Object(H["p"])(e[r]||{},t[r]));return e}function bF(e,t,n,r,i,o){var a,u;for(u in o=o||{},o.encoders={$encode:a={}},e=yF(e,t,n,r,i.config),e)a[u]=QD(e[u],t,o,i);return o}function yF(e,t,n,r,i){var o,a,u,s={};for(o in"legend"!=n&&0!==String(n).indexOf("axis")||(n=null),u=n===ZD?i.group:n===KD?Object(H["p"])({},i.mark,i[t]):null,u)a=wF(o,e)||("fill"===o||"stroke"===o)&&(wF("fill",e)||wF("stroke",e)),a||(s[o]=xF(u[o]));return Object(H["i"])(r).forEach((function(t){var n=i.style&&i.style[t];for(var r in n)wF(r,e)||(s[r]=xF(n[r]))})),e=Object(H["p"])({},e),e.enter=Object(H["p"])(s,e.enter),e}function xF(e){return e&&e.signal?{signal:e.signal}:{value:e}}function wF(e,t){return t&&(t.enter&&t.enter[e]||t.update&&t.update[e])}var OF=function(e,t,n,r,i,o,a){return{type:e,name:a?a.name:void 0,role:t,style:a&&a.style||n,key:r,from:i,interactive:!(!a||!a.interactive),encode:vF(o,a,TD)}};function EF(e,t,n){return jj(t[e],n[e])}function kF(e,t){return jj(e.direction,t)===bD}function _F(e,t){return jj(e.gradientLength,t.gradientLength||t.gradientWidth)}function AF(e,t){return jj(e.gradientThickness,t.gradientThickness||t.gradientHeight)}function SF(e,t){return jj(e.columns,jj(t.columns,+kF(e,t.symbolDirection)))}function jF(e,t){var n=t&&(t.update&&t.update[e]||t.enter&&t.enter[e]);return n&&n.signal?n:n?n.value:null}function CF(e,t,n){var r=t.config.style[n];return r&&r[e]}var DF="group",FF="rect",MF="rule",zF="symbol",NF="text",TF=function(e,t,n,r){var i,o,a,u,s,c,l={value:0},f=kF(e,n.gradientDirection),d=AF(e,n),h=_F(e,n);return f?(a=[0,1],u=[0,0],s=d,c=h):(a=[0,0],u=[1,0],s=h,c=d),i={enter:o={opacity:l,x:l,y:l,width:gF(s),height:gF(c)},update:Object(H["p"])({},o,{opacity:{value:1},fill:{gradient:t,start:a,stop:u}}),exit:{opacity:l}},mF(i,"stroke",EF("gradientStrokeColor",e,n)),mF(i,"strokeWidth",EF("gradientStrokeWidth",e,n)),mF(i,"opacity",EF("gradientOpacity",e,n),"update"),OF(FF,lF,null,void 0,void 0,i,r)},RF=function(e,t,n,r,i){var o,a,u,s,c,l,f={value:0},d=kF(e,n.gradientDirection),h=AF(e,n),p=_F(e,n),g="";return d?(u="y",c="y2",s="x",l="width",g="1-"):(u="x",c="x2",s="y",l="height"),a={opacity:f,fill:{scale:t,field:SD}},a[u]={signal:g+"datum."+kD,mult:p},a[s]=f,a[c]={signal:g+"datum."+_D,mult:p},a[l]=gF(h),o={enter:a,update:Object(H["p"])({},a,{opacity:{value:1}}),exit:{opacity:f}},mF(o,"stroke",EF("gradientStrokeColor",e,n)),mF(o,"strokeWidth",EF("gradientStrokeWidth",e,n)),mF(o,"opacity",EF("gradientOpacity",e,n),"update"),OF(FF,sF,null,SD,i,o,r)},BF="datum."+kD+'<=0?"left":datum.'+kD+'>=1?"right":"center"',PF="datum."+kD+'<=0?"bottom":datum.'+kD+'>=1?"top":"middle"',IF=function(e,t,n,r){var i,o,a,u,s,c={value:0},l=kF(e,t.gradientDirection),f=gF(AF(e,t)),d=_F(e,t),h=EF("labelOverlap",e,t),p="";return i={enter:o={opacity:c},update:a={opacity:{value:1},text:{field:OD}},exit:{opacity:c}},mF(i,"fill",EF("labelColor",e,t)),mF(i,"font",EF("labelFont",e,t)),mF(i,"fontSize",EF("labelFontSize",e,t)),mF(i,"fontWeight",EF("labelFontWeight",e,t)),mF(i,"fillOpacity",EF("labelOpacity",e,t)),mF(i,"limit",jj(e.labelLimit,t.gradientLabelLimit)),l?(o.align={value:"left"},o.baseline=a.baseline={signal:PF},u="y",s="x",p="1-"):(o.align=a.align={signal:BF},o.baseline={value:"top"},u="x",s="y"),o[u]=a[u]={signal:p+"datum."+kD,mult:d},o[s]=a[s]=f,f.offset=jj(e.labelOffset,t.gradientLabelOffset)||0,e=OF(NF,fF,jD,SD,r,i,n),h&&(e.overlap={method:h,order:"datum."+wD}),e},LF=function(e,t,n,r,i,o,a,u){return{type:DF,name:n,role:e,style:t,from:r,interactive:i||!1,encode:o,marks:a,layout:u}},$F={value:0},UF=function(e,t,n,r,i){var o,a,u,s,c,l,f,d=n.entries,h=!(!d||!d.interactive),p=d?d.name:void 0,g=EF("clipHeight",e,t),m=EF("symbolOffset",e,t),v={data:"value"},b={},y=i+"?datum."+ED+":datum."+AD,x=g?gF(g):{field:AD},w="datum."+wD,O="max(1,"+i+")";return x.mult=.5,b={enter:o={opacity:$F,x:{signal:y,mult:.5,offset:m},y:x},update:a={opacity:{value:1},x:o.x,y:o.y},exit:{opacity:$F}},e.fill||(mF(b,"fill",t.symbolBaseFillColor),mF(b,"stroke",t.symbolBaseStrokeColor)),mF(b,"shape",EF("symbolType",e,t)),mF(b,"size",EF("symbolSize",e,t)),mF(b,"strokeWidth",EF("symbolStrokeWidth",e,t)),mF(b,"fill",EF("symbolFillColor",e,t)),mF(b,"stroke",EF("symbolStrokeColor",e,t)),mF(b,"opacity",EF("symbolOpacity",e,t),"update"),ND.forEach((function(t){e[t]&&(a[t]=o[t]={scale:e[t],field:SD})})),s=OF(zF,dF,null,SD,v,b,n.symbols),g&&(s.clip=!0),u=gF(m),u.offset=EF("labelOffset",e,t),b={enter:o={opacity:$F,x:{signal:y,offset:u},y:x},update:a={opacity:{value:1},text:{field:OD},x:o.x,y:o.y},exit:{opacity:$F}},mF(b,"align",EF("labelAlign",e,t)),mF(b,"baseline",EF("labelBaseline",e,t)),mF(b,"fill",EF("labelColor",e,t)),mF(b,"font",EF("labelFont",e,t)),mF(b,"fontSize",EF("labelFontSize",e,t)),mF(b,"fontWeight",EF("labelFontWeight",e,t)),mF(b,"limit",EF("labelLimit",e,t)),mF(b,"fillOpacity",EF("labelOpacity",e,t)),c=OF(NF,fF,jD,SD,v,b,n.labels),b={enter:{noBound:{value:!0},width:$F,height:g?gF(g):$F,opacity:$F},exit:{opacity:$F},update:a={opacity:{value:1},row:{signal:null},column:{signal:null}}},kF(e,t.symbolDirection)?(l="ceil(item.mark.items.length/"+O+")",a.row.signal=w+"%"+l,a.column.signal="floor("+w+"/"+l+")",f={field:["row",w]}):(a.row.signal="floor("+w+"/"+O+")",a.column.signal=w+"%"+O,f={field:w}),a.column.signal=i+"?"+a.column.signal+":"+w,r={facet:{data:r,name:"value",groupby:wD}},e=LF(eF,null,p,r,h,vF(b,d,TD),[s,c]),e.sort=f,e};function qF(e,t){return{align:EF("gridAlign",e,t),center:{row:!0,column:!1},columns:SF(e,t),padding:{row:EF("rowPadding",e,t),column:EF("columnPadding",e,t)}}}var WF=function(e,t,n,r){var i,o,a={value:0};return i={enter:o={opacity:a,x:{field:{group:"padding"}},y:{field:{group:"padding"}}},update:{opacity:{value:1},text:gF(e.title),x:o.x,y:o.y},exit:{opacity:a}},mF(i,"align",EF("titleAlign",e,t)),mF(i,"baseline",EF("titleBaseline",e,t)),mF(i,"fill",EF("titleColor",e,t)),mF(i,"font",EF("titleFont",e,t)),mF(i,"fontSize",EF("titleFontSize",e,t)),mF(i,"fontWeight",EF("titleFontWeight",e,t)),mF(i,"limit",EF("titleLimit",e,t)),mF(i,"fillOpacity",EF("titleOpacity",e,t)),OF(NF,hF,CD,null,r,i,n)},HF=function(e,t){var n;return Object(H["G"])(e)&&(e.signal?n=e.signal:e.path?n="pathShape("+GF(e.path)+")":e.sphere&&(n="geoShape("+GF(e.sphere)+', {type: "Sphere"})')),n?t.signalRef(n):!!e};function GF(e){return Object(H["G"])(e)&&e.signal?e.signal:Object(H["ab"])(e)}var YF=function(e){var t=e.role||"";return t.indexOf("axis")&&t.indexOf("legend")?e.type===DF?eF:t||KD:t},VF=function(e){return{marktype:e.type,name:e.name||void 0,role:e.role||YF(e),zindex:+e.zindex||void 0}},XF=function(e,t){return e&&e.signal?t.signalRef(e.signal):!1!==e},JF=function(e,t){var n=tn(e.type);n||Object(H["o"])("Unrecognized transform type: "+Object(H["ab"])(e.type));var r=dj(n.type.toLowerCase(),null,QF(n,e,t));return e.signal&&t.addSignal(e.signal,t.proxy(r)),r.metadata=n.metadata||{},r};function QF(e,t,n){var r,i,o,a={};for(i=0,o=e.params.length;i<o;++i)r=e.params[i],a[r.name]=KF(r,t,n);return a}function KF(e,t,n){var r=e.type,i=t[e.name];return"index"===r?eM(e,t,n):void 0!==i?"param"===r?tM(e,t,n):"projection"===r?n.projectionRef(t[e.name]):e.array&&!Aj(i)?i.map((function(t){return ZF(e,t,n)})):ZF(e,i,n):void(e.required&&Object(H["o"])("Missing required "+Object(H["ab"])(t.type)+" parameter: "+Object(H["ab"])(e.name)))}function ZF(e,t,n){var r=e.type;if(Aj(t))return aM(r)?Object(H["o"])("Expression references can not be signals."):uM(r)?n.fieldRef(t):sM(r)?n.compareRef(t):n.signalRef(t.signal);var i=e.expr||uM(r);return i&&rM(t)?n.exprRef(t.expr,t.as):i&&iM(t)?mj(t.field,t.as):aM(r)?lj(t,n):oM(r)?pj(n.getData(t).values):uM(r)?mj(t):sM(r)?n.compareRef(t):t}function eM(e,t,n){return Object(H["I"])(t.from)||Object(H["o"])('Lookup "from" parameter must be a string literal.'),n.getData(t.from).lookupRef(n,t.key)}function tM(e,t,n){var r=t[e.name];return e.array?(Object(H["B"])(r)||Object(H["o"])("Expected an array of sub-parameters. Instead: "+Object(H["ab"])(r)),r.map((function(t){return nM(e,t,n)}))):nM(e,r,n)}function nM(e,t,n){var r,i,o,a,u;for(a=0,u=e.params.length;a<u;++a){for(o in i=e.params[a],i.key)if(i.key[o]!==t[o]){i=null;break}if(i)break}return i||Object(H["o"])("Unsupported parameter: "+Object(H["ab"])(t)),r=Object(H["p"])(QF(i,t,n),i.key),pj(n.add(SC(r)))}function rM(e){return e&&e.expr}function iM(e){return e&&e.field}function oM(e){return"data"===e}function aM(e){return"expr"===e}function uM(e){return"field"===e}function sM(e){return"compare"===e}var cM=function(e,t,n){var r,i,o,a,u;return e?(r=e.facet)&&(t||Object(H["o"])("Only group marks can be faceted."),null!=r.field?a=u=lM(r,n):(e.data?u=pj(n.getData(e.data).aggregate):(o=JF(Object(H["p"])({type:"aggregate",groupby:Object(H["i"])(r.groupby)},r.aggregate),n),o.params.key=n.keyRef(r.groupby),o.params.pulse=lM(r,n),a=u=pj(n.add(o))),i=n.keyRef(r.groupby,!0))):a=pj(n.add(hC(null,[{}]))),a||(a=lM(e,n)),{key:i,pulse:a,parent:u}};function lM(e,t){return e.$ref?e:e.data&&e.data.$ref?e.data:pj(t.getData(e.data).output)}function fM(e,t,n,r,i){this.scope=e,this.input=t,this.output=n,this.values=r,this.aggregate=i,this.index={}}fM.fromEntries=function(e,t){var n=t.length,r=1,i=t[0],o=t[n-1],a=t[n-2],u=null;for(e.add(t[0]);r<n;++r)t[r].params.pulse=pj(t[r-1]),e.add(t[r]),"aggregate"===t[r].type&&(u=t[r]);return new fM(e,i,a,o,u)};var dM=fM.prototype;function hM(e){return Object(H["I"])(e)?e:null}function pM(e,t,n){var r,i=Ej(n.op,n.field);if(t.ops){for(var o=0,a=t.as.length;o<a;++o)if(t.as[o]===i)return}else t.ops=["count"],t.fields=[null],t.as=["count"];n.op&&(t.ops.push((r=n.op.signal)?e.signalRef(r):n.op),t.fields.push(e.fieldRef(n.field)),t.as.push(i))}function gM(e,t,n,r,i,o,a){var u,s,c=t[n]||(t[n]={}),l=Oj(o),f=hM(i);if(null!=f&&(e=t.scope,f+=l?"|"+l:"",u=c[f]),!u){var d=o?{field:vj,pulse:t.countsRef(e,i,o)}:{field:e.fieldRef(i),pulse:pj(t.output)};l&&(d.sort=e.sortRef(o)),s=e.add(dj(r,void 0,d)),a&&(t.index[i]=s),u=pj(s),null!=f&&(c[f]=u)}return u}dM.countsRef=function(e,t,n){var r,i,o,a=this,u=a.counts||(a.counts={}),s=hM(t);return null!=s&&(e=a.scope,r=u[s]),r?n&&n.field&&pM(e,r.agg.params,n):(o={groupby:e.fieldRef(t,"key"),pulse:pj(a.output)},n&&n.field&&pM(e,o,n),i=e.add(lC(o)),r=e.add(hC({pulse:pj(i)})),r={agg:i,ref:pj(r)},null!=s&&(u[s]=r)),r.ref},dM.tuplesRef=function(){return pj(this.values)},dM.extentRef=function(e,t){return gM(e,this,"extent","extent",t,!1)},dM.domainRef=function(e,t){return gM(e,this,"domain","values",t,!1)},dM.valuesRef=function(e,t,n){return gM(e,this,"vals","values",t,n||!0)},dM.lookupRef=function(e,t){return gM(e,this,"lookup","tupleindex",t,!1)},dM.indataRef=function(e,t){return gM(e,this,"indata","tupleindex",t,!0,!0)};var mM=function(e,t,n){var r,i,o,a,u=e.from.facet,s=u.name,c=lM(u,t);u.name||Object(H["o"])("Facet must have a name: "+Object(H["ab"])(u)),u.data||Object(H["o"])("Facet must reference a data set: "+Object(H["ab"])(u)),u.field?a=t.add(jC({field:t.fieldRef(u.field),pulse:c})):u.groupby?a=t.add(bC({key:t.keyRef(u.groupby),group:pj(t.proxy(n.parent)),pulse:c})):Object(H["o"])("Facet must specify groupby or field: "+Object(H["ab"])(u)),r=t.fork(),i=r.add(hC()),o=r.add(NC({pulse:pj(i)})),r.addData(s,new fM(r,i,i,o)),r.addSignal("parent",null),a.params.subflow={$subflow:HM(e,r).toRuntime()}},vM=function(e,t,n){var r=t.add(jC({pulse:n.pulse})),i=t.fork();i.add(NC()),i.addSignal("parent",null),r.params.subflow={$subflow:HM(e,i).toRuntime()}},bM=function(e,t,n){var r,i,o=e.remove,a=e.insert,u=e.toggle,s=e.modify,c=e.values,l=t.add(hj());r="if("+e.trigger+',modify("'+n+'",'+[a,o,u,s,c].map((function(e){return null==e?"null":e})).join(",")+"),0)",i=lj(r,t),l.update=i.$expr,l.params=i.$params},yM=function(e,t){var n,r,i,o,a,u,s,c,l,f,d,h,p,g=YF(e),m=e.type===DF,v=e.from&&e.from.facet,b=e.layout||g===eF||g===ZD,y=g===KD||b||v,x=e.overlap;i=cM(e.from,m,t),r=t.add(gC({key:i.key||(e.key?mj(e.key):void 0),pulse:i.pulse,clean:!m})),l=pj(r),r=o=t.add(hC({pulse:l})),r=t.add(EC({markdef:VF(e),interactive:XF(e.interactive,t),clip:HF(e.clip,t),context:{$context:!0},groups:t.lookup(),parent:t.signals.parent?t.signalRef("parent"):null,index:t.markpath(),pulse:pj(r)})),f=pj(r),r=t.add(mC(bF(e.encode,e.type,g,e.style,t,{pulse:f}))),r.params.parent=t.encode(),e.transform&&e.transform.forEach((function(e){var n=JF(e,t);(n.metadata.generates||n.metadata.changes)&&Object(H["o"])("Mark transforms should not generate new data."),n.params.pulse=pj(r),t.add(r=n)})),e.sort&&(r=t.add(TC({sort:t.compareRef(e.sort,!0),pulse:pj(r)}))),d=pj(r),(v||b)&&(b=t.add(RC({layout:t.objectProperty(e.layout),legendMargin:t.config.legendMargin,mark:f,pulse:d})),h=pj(b)),a=t.add(dC({mark:f,pulse:h||d})),p=pj(a),m&&(y&&(n=t.operators,n.pop(),b&&n.pop()),t.pushState(d,h||p,l),v?mM(e,t,i):y?vM(e,t,i):HM(e,t),t.popState(),y&&(b&&n.push(b),n.push(a))),x&&(p=xM(x,p,t)),u=t.add(MC({pulse:p})),s=t.add(NC({pulse:pj(u)},void 0,t.parent())),null!=e.name&&(c=e.name,t.addData(c,new fM(t,o,u,s)),e.on&&e.on.forEach((function(e){(e.insert||e.remove||e.toggle)&&Object(H["o"])("Marks only support modify triggers."),bM(e,t,c)})))};function xM(e,t,n){var r,i=e.method,o=e.bound,a={method:Aj(i)?n.signalRef(i.signal):i,pulse:t};return e.order&&(a.sort=n.compareRef({field:e.order})),o&&(r=o.tolerance,a.boundTolerance=Aj(r)?n.signalRef(r.signal):+r,a.boundScale=n.scaleRef(o.scale),a.boundOrient=o.orient),pj(n.add(AC(a)))}var wM=function(e,t){var n,r,i,o,a,u,s,c,l,f=t.config.legend,d=e.encode||{},h=d.legend||{},p=h.name||void 0,g=h.interactive,m=h.style,v=ND.reduce((function(t,n){return t||e[n]}),0);return v||Object(H["o"])("Missing valid scale for legend."),a=OM(e,t.scaleType(v)),u={orient:EF("orient",e,f),title:null!=e.title,type:a},s=pj(t.add(hC(null,[u]))),h=vF(kM(e,f),h,TD),n={enter:{x:{value:0},y:{value:0}}},c=pj(t.add(wC(i={type:a,scale:t.scaleRef(v),count:t.objectProperty(e.tickCount),values:t.objectProperty(e.values),formatSpecifier:t.property(e.format)}))),a===MD?(o=[TF(e,v,f,d.gradient),IF(e,f,d.labels,c)],i.count=i.count||t.signalRef("max(2,2*floor(("+Cj(_F(e,f))+")/100))")):a===zD?o=[RF(e,v,f,d.gradient,c),IF(e,f,d.labels,c)]:(r=qF(e,f),o=[UF(e,f,d,c,Cj(r.columns))],i.size=_M(e,t,o[0].marks)),o=[LF(cF,null,null,s,g,n,o,r)],u.title&&o.push(WF(e,f,d.title,s)),l=LF(uF,m,p,s,g,h,o),e.zindex&&(l.zindex=e.zindex),yM(l,t)};function OM(e,t){var n=e.type||FD;return e.type||1!==EM(e)||!e.fill&&!e.stroke||(n=GC(t)?MD:HC(t)?zD:FD),n!==MD?n:HC(t)?zD:MD}function EM(e){return ND.reduce((function(t,n){return t+(e[n]?1:0)}),0)}function kM(e,t){var n={enter:{},update:{}};return mF(n,"offset",EF("offset",e,t)),mF(n,"padding",EF("padding",e,t)),mF(n,"titlePadding",EF("titlePadding",e,t)),mF(n,"fill",EF("fillColor",e,t)),mF(n,"stroke",EF("strokeColor",e,t)),mF(n,"strokeWidth",EF("strokeWidth",e,t)),mF(n,"cornerRadius",EF("cornerRadius",e,t)),mF(n,"strokeDash",t.strokeDash),n}function _M(e,t,n){var r,i,o,a;return o=jF("strokeWidth",n[0].encode),i=e.size?'scale("'+e.size+'",datum)':jF("size",n[0].encode,t),r=AM(n[1].encode,t,jD),a="max(ceil(sqrt("+Cj(i)+")+"+Cj(o)+"),"+Cj(r)+")",lj(a,t)}function AM(e,t,n){return jF("fontSize",e)||CF("fontSize",t,n)}function SM(e,t,n){return'item.anchor==="'+yD+'"?'+e+':item.anchor==="'+xD+'"?'+t+":"+n}var jM=SM(Object(H["ab"])(pD),Object(H["ab"])(gD),Object(H["ab"])(vD)),CM=SM('+(item.orient==="'+gD+'")','+(item.orient!=="'+pD+'")',"0.5"),DM=function(e,t){e=Object(H["I"])(e)?{text:e}:e;var n,r,i,o=t.config.title,a=Object(H["p"])({},e.encode);return n={orient:EF("orient",e,o)},r=pj(t.add(hC(null,[n]))),a.name=e.name,a.interactive=e.interactive,i=FM(e,o,a,r),e.zindex&&(i.zindex=e.zindex),yM(i,t)};function FM(e,t,n,r){var i,o,a,u,s,c={value:0},l=e.text,f=EF("orient",e,t),d=EF("anchor",e,t),h=f===pD||f===hD?-1:1,p=f===hD||f===mD,g={group:p?"width":"height"};return u={field:g,mult:{signal:CM}},s=h<0?c:p?{field:{group:"height"}}:{field:{group:"width"}},i={enter:o={opacity:c},update:a={opacity:{value:1},text:gF(l),anchor:gF(d),orient:gF(f),extent:{field:g},align:{signal:jM}},exit:{opacity:c}},p?(a.x=u,a.y=s,o.angle=c,o.baseline={value:f===hD?mD:hD}):(a.x=s,a.y=u,o.angle={value:90*h},o.baseline={value:mD}),mF(i,"align",EF("align",e,t),"update"),mF(i,"angle",EF("angle",e,t)),mF(i,"baseline",EF("baseline",e,t)),mF(i,"fill",EF("color",e,t)),mF(i,"font",EF("font",e,t)),mF(i,"fontSize",EF("fontSize",e,t)),mF(i,"fontWeight",EF("fontWeight",e,t)),mF(i,"frame",EF("frame",e,t)),mF(i,"limit",EF("limit",e,t)),mF(i,"offset",EF("offset",e,t)||0),OF(NF,pF,e.style||DD,null,r,i,n)}function MM(e,t){var n=[];e.transform&&e.transform.forEach((function(e){n.push(JF(e,t))})),e.on&&e.on.forEach((function(n){bM(n,t,e.name)})),t.addDataPipeline(e.name,zM(e,t,n))}function zM(e,t,n){var r,i,o,a,u,s=[],c=null,l=!1,f=!1;for(e.values?s.push(c=NM({$ingest:e.values,$format:e.format})):e.url?(c=Sj(e.url)||Sj(e.format)?{$load:pj(t.add(TM(t,e,c)))}:{$request:e.url,$format:e.format},s.push(c=NM(c))):e.source&&(c=r=Object(H["i"])(e.source).map((function(e){return pj(t.getData(e).output)})),s.push(null)),i=0,o=n.length;i<o;++i)a=n[i],u=a.metadata,c||u.source||s.push(c=NM()),s.push(a),u.generates&&(f=!0),u.modifies&&!f&&(l=!0),u.source?c=a:u.changes&&(c=null);return r&&(o=r.length-1,s[0]=FC({derive:l,pulse:o?r:r[0]}),(l||o)&&s.splice(1,0,NM())),c||s.push(NM()),s.push(NC({})),s}function NM(e){var t=hC({},e);return t.metadata={source:!0},t}function TM(e,t){return OC({url:e.property(t.url),format:e.objectProperty(t.format)})}var RM=function(e,t){var n=t.config,r=e.orient,i=r===hD||r===mD?n.axisX:n.axisY,o=n["axis"+r[0].toUpperCase()+r.slice(1)],a="band"===t.scaleType(e.scale)&&n.axisBand;return i||o||a?Object(H["p"])({},n.axis,i,o,a):n.axis},BM=function(e,t,n,r){var i,o,a,u,s,c,l=e.orient,f={value:0};return i={enter:o={opacity:f},update:a={opacity:{value:1}},exit:{opacity:f}},mF(i,"stroke",EF("domainColor",e,t)),mF(i,"strokeWidth",EF("domainWidth",e,t)),mF(i,"strokeOpacity",EF("domainOpacity",e,t)),l===hD||l===mD?(u="x",c="y"):(u="y",c="x"),s=u+"2",o[c]=f,a[u]=o[u]=PM(e,0),a[s]=o[s]=PM(e,1),OF(MF,nF,null,null,r,i,n)};function PM(e,t){return{scale:e.scale,range:t}}var IM=function(e,t,n,r){var i,o,a,u,s,c,l,f,d,h=e.orient,p=e.gridScale,g=h===pD||h===hD?1:-1,m=g*e.offset||0,v={value:0};return i={enter:o={opacity:v},update:u={opacity:{value:1}},exit:a={opacity:v}},mF(i,"stroke",EF("gridColor",e,t)),mF(i,"strokeDash",EF("gridDash",e,t)),mF(i,"strokeOpacity",EF("gridOpacity",e,t)),mF(i,"strokeWidth",EF("gridWidth",e,t)),s={scale:e.scale,field:SD,band:EF("bandPosition",e,t),round:EF("tickRound",e,t),extra:EF("tickExtra",e,t),offset:EF("tickOffset",e,t)},h===hD||h===mD?(c="x",l="y",d="height"):(c="y",l="x",d="width"),f=l+"2",u[c]=o[c]=a[c]=s,p?(o[l]={scale:p,range:0,mult:g,offset:m},u[f]=o[f]={scale:p,range:1,mult:g,offset:m}):(o[l]={value:m},u[f]=o[f]={signal:d,mult:g,offset:m}),OF(MF,rF,null,SD,r,i,n)},LM=function(e,t,n,r,i){var o,a,u,s,c,l,f=e.orient,d=f===pD||f===hD?-1:1,h={value:0};return o={enter:a={opacity:h},update:s={opacity:{value:1}},exit:u={opacity:h}},mF(o,"stroke",EF("tickColor",e,t)),mF(o,"strokeOpacity",EF("tickOpacity",e,t)),mF(o,"strokeWidth",EF("tickWidth",e,t)),c=gF(i),c.mult=d,l={scale:e.scale,field:SD,band:EF("bandPosition",e,t),round:EF("tickRound",e,t),extra:EF("tickExtra",e,t),offset:EF("tickOffset",e,t)},f===hD||f===mD?(s.y=a.y=h,s.y2=a.y2=c,s.x=a.x=u.x=l):(s.x=a.x=h,s.x2=a.x2=c,s.y=a.y=u.y=l),OF(MF,oF,null,SD,r,o,n)};function $M(e,t,n,r,i){return{signal:'flush(range("'+e+'"), scale("'+e+'", datum.value), '+t+","+n+","+r+","+i+")"}}var UM=function(e,t,n,r,i){var o,a,u,s,c,l,f,d,h,p=e.orient,g=p===pD||p===hD?-1:1,m=p===hD||p===mD,v=e.scale,b=Cj(EF("labelFlush",e,t)),y=Cj(EF("labelFlushOffset",e,t)),x=0===b||!!b,w=EF("labelAlign",e,t),O=EF("labelBaseline",e,t),E={value:0};return u=gF(i),u.mult=g,u.offset=gF(EF("labelPadding",e,t)||0),u.offset.mult=g,s={scale:v,field:SD,band:.5,offset:EF("tickOffset",e,t)},m?(c=w||(x?$M(v,b,'"left"','"right"','"center"'):"center"),l=O||(p===hD?"bottom":"top"),f=!w):(c=w||(p===gD?"left":"right"),l=O||(x?$M(v,b,'"top"','"bottom"','"middle"'):"middle"),f=!O),f=f&&x&&y?$M(v,b,"-"+y,y,0):null,o={enter:a={opacity:E,x:m?s:u,y:m?u:s},update:{opacity:{value:1},text:{field:OD},x:a.x,y:a.y},exit:{opacity:E,x:a.x,y:a.y}},mF(o,m?"dx":"dy",f),mF(o,"align",c),mF(o,"baseline",l),mF(o,"angle",EF("labelAngle",e,t)),mF(o,"fill",EF("labelColor",e,t)),mF(o,"font",EF("labelFont",e,t)),mF(o,"fontSize",EF("labelFontSize",e,t)),mF(o,"fontWeight",EF("labelFontWeight",e,t)),mF(o,"limit",EF("labelLimit",e,t)),mF(o,"fillOpacity",EF("labelOpacity",e,t)),d=EF("labelBound",e,t),h=EF("labelOverlap",e,t),e=OF(NF,iF,jD,SD,r,o,n),(h||d)&&(e.overlap={method:h,order:"datum.index",bound:d?{scale:v,orient:p,tolerance:d}:null}),e},qM=function(e,t,n,r){var i,o,a,u,s=e.orient,c=s===pD||s===hD?-1:1,l=s===hD||s===mD,f={value:0};return i={enter:o={opacity:f},update:a={opacity:{value:1},text:gF(e.title)},exit:{opacity:f}},u={scale:e.scale,range:.5},l?(a.x=u,o.angle={value:0},o.baseline={value:s===hD?"bottom":"top"}):(a.y=u,o.angle={value:90*c},o.baseline={value:"bottom"}),mF(i,"align",EF("titleAlign",e,t)),mF(i,"angle",EF("titleAngle",e,t)),mF(i,"baseline",EF("titleBaseline",e,t)),mF(i,"fill",EF("titleColor",e,t)),mF(i,"font",EF("titleFont",e,t)),mF(i,"fontSize",EF("titleFontSize",e,t)),mF(i,"fontWeight",EF("titleFontWeight",e,t)),mF(i,"limit",EF("titleLimit",e,t)),mF(i,"fillOpacity",EF("titleOpacity",e,t)),!mF(i,"x",EF("titleX",e,t),"update")&&l&&!wF("x",n)&&(i.enter.auto={value:!0}),!mF(i,"y",EF("titleY",e,t),"update")&&!l&&!wF("y",n)&&(i.enter.auto={value:!0}),OF(NF,aF,CD,null,r,i,n)},WM=function(e,t){var n,r,i,o,a,u,s=RM(e,t),c=e.encode||{},l=c.axis||{},f=l.name||void 0,d=l.interactive,h=l.style;return n={orient:e.orient,ticks:!!EF("ticks",e,s),labels:!!EF("labels",e,s),grid:!!EF("grid",e,s),domain:!!EF("domain",e,s),title:!!jj(e.title,!1)},r=pj(t.add(hC({},[n]))),l=vF({update:{range:{signal:'abs(span(range("'+e.scale+'")))'},offset:gF(jj(e.offset,0)),position:gF(jj(e.position,0)),titlePadding:gF(EF("titlePadding",e,s)),minExtent:gF(EF("minExtent",e,s)),maxExtent:gF(EF("maxExtent",e,s))}},c.axis,TD),i=pj(t.add(fC({scale:t.scaleRef(e.scale),extra:t.property(EF("tickExtra",e,s)),count:t.objectProperty(e.tickCount),values:t.objectProperty(e.values),formatSpecifier:t.property(e.format)}))),u=[],n.grid&&u.push(IM(e,s,c.grid,i)),n.ticks&&(o=EF("tickSize",e,s),u.push(LM(e,s,c.ticks,i,o))),n.labels&&(o=n.ticks?o:0,u.push(UM(e,s,c.labels,i,o))),n.domain&&u.push(BM(e,s,c.domain,r)),n.title&&u.push(qM(e,s,c.title,r)),a=LF(tF,h,f,r,d,l,u),e.zindex&&(a.zindex=e.zindex),yM(a,t)},HM=function(e,t,n){var r=Object(H["i"])(e.signals),i=Object(H["i"])(e.scales);return n||r.forEach((function(e){YE(e,t)})),Object(H["i"])(e.projections).forEach((function(e){fD(e,t)})),i.forEach((function(e){VC(e,t)})),Object(H["i"])(e.data).forEach((function(e){MM(e,t)})),i.forEach((function(e){XC(e,t)})),r.forEach((function(e){sC(e,t)})),Object(H["i"])(e.axes).forEach((function(e){WM(e,t)})),Object(H["i"])(e.marks).forEach((function(e){yM(e,t)})),Object(H["i"])(e.legends).forEach((function(e){wM(e,t)})),e.title&&DM(e.title,t),t.parseLambdas(),t},GM=Object(H["eb"])(["width","height","padding","autosize"]);function YM(e,t){var n,r,i,o,a,u=t.config;return t.background=e.background||u.background,t.eventConfig=u.events,a=pj(t.root=t.add(hj())),t.addSignal("width",e.width||0),t.addSignal("height",e.height||0),t.addSignal("padding",$E(e.padding,u)),t.addSignal("autosize",LE(e.autosize,u)),Object(H["i"])(e.signals).forEach((function(e){GM[e.name]||YE(e,t)})),r=t.add(hC()),i=vF({enter:{x:{value:0},y:{value:0}},update:{width:{signal:"width"},height:{signal:"height"}}},e.encode),i=t.add(mC(bF(i,DF,ZD,e.style,t,{pulse:pj(r)}))),o=t.add(RC({layout:t.objectProperty(e.layout),legendMargin:u.legendMargin,autosize:t.signalRef("autosize"),mark:a,pulse:pj(i)})),t.operators.pop(),t.pushState(pj(i),pj(o),null),HM(e,t,!0),t.operators.push(o),n=t.add(dC({mark:a,pulse:pj(o)})),n=t.add(MC({pulse:pj(n)})),n=t.add(NC({pulse:pj(n)})),t.addData("root",new fM(t,r,r,n)),t}function VM(e){this.config=e,this.bindings=[],this.field={},this.signals={},this.lambdas={},this.scales={},this.events={},this.data={},this.streams=[],this.updates=[],this.operators=[],this.background=null,this.eventConfig=null,this._id=0,this._subid=0,this._nextsub=[0],this._parent=[],this._encode=[],this._lookup=[],this._markpath=[]}function XM(e){this.config=e.config,this.field=Object.create(e.field),this.signals=Object.create(e.signals),this.lambdas=Object.create(e.lambdas),this.scales=Object.create(e.scales),this.events=Object.create(e.events),this.data=Object.create(e.data),this.streams=[],this.updates=[],this.operators=[],this._id=0,this._subid=++e._nextsub[0],this._nextsub=e._nextsub,this._parent=e._parent.slice(),this._encode=e._encode.slice(),this._lookup=e._lookup.slice(),this._markpath=e._markpath}var JM=VM.prototype=XM.prototype;function QM(e){return(Object(H["B"])(e)?KM:ZM)(e)}function KM(e){for(var t,n="[",r=0,i=e.length;r<i;++r)t=e[r],n+=(r>0?",":"")+(Object(H["G"])(t)?t.signal||QM(t):Object(H["ab"])(t));return n+"]"}function ZM(e){var t,n,r="{",i=0;for(t in e)n=e[t],r+=(++i>1?",":"")+Object(H["ab"])(t)+":"+(Object(H["G"])(n)?n.signal||QM(n):Object(H["ab"])(n));return r+"}"}JM.fork=function(){return new XM(this)},JM.isSubscope=function(){return this._subid>0},JM.toRuntime=function(){return this.finish(),{background:this.background,operators:this.operators,streams:this.streams,updates:this.updates,bindings:this.bindings,eventConfig:this.eventConfig}},JM.id=function(){return(this._subid?this._subid+":":0)+this._id++},JM.add=function(e){return this.operators.push(e),e.id=this.id(),e.refs&&(e.refs.forEach((function(t){t.$ref=e.id})),e.refs=null),e},JM.proxy=function(e){var t=e instanceof fj?pj(e):e;return this.add(DC({value:t}))},JM.addStream=function(e){return this.streams.push(e),e.id=this.id(),e},JM.addUpdate=function(e){return this.updates.push(e),e},JM.finish=function(){var e,t;for(e in this.root&&(this.root.root=!0),this.signals)this.signals[e].signal=e;for(e in this.scales)this.scales[e].scale=e;function n(e,t,n){var r,i;e&&(r=e.data||(e.data={}),i=r[t]||(r[t]=[]),i.push(n))}for(e in this.data)for(var r in t=this.data[e],n(t.input,e,"input"),n(t.output,e,"output"),n(t.values,e,"values"),t.index)n(t.index[r],e,"index:"+r);return this},JM.pushState=function(e,t,n){this._encode.push(pj(this.add(NC({pulse:e})))),this._parent.push(t),this._lookup.push(n?pj(this.proxy(n)):null),this._markpath.push(-1)},JM.popState=function(){this._encode.pop(),this._parent.pop(),this._lookup.pop(),this._markpath.pop()},JM.parent=function(){return Object(H["V"])(this._parent)},JM.encode=function(){return Object(H["V"])(this._encode)},JM.lookup=function(){return Object(H["V"])(this._lookup)},JM.markpath=function(){var e=this._markpath;return++e[e.length-1]},JM.fieldRef=function(e,t){if(Object(H["I"])(e))return mj(e,t);e.signal||Object(H["o"])("Unsupported field reference: "+Object(H["ab"])(e));var n,r=e.signal,i=this.field[r];return i||(n={name:this.signalRef(r)},t&&(n.as=t),this.field[r]=i=pj(this.add(yC(n)))),i},JM.compareRef=function(e,t){function n(e){return Aj(e)?(i=!0,r.signalRef(e.signal)):e}var r=this,i=!1,o=Object(H["i"])(e.field).map(n),a=Object(H["i"])(e.order).map(n);return t&&o.push(gj),i?pj(this.add(pC({fields:o,orders:a}))):bj(o,a)},JM.keyRef=function(e,t){function n(e){return Aj(e)?(i=!0,pj(r[e.signal])):e}var r=this.signals,i=!1;return e=Object(H["i"])(e).map(n),i?pj(this.add(xC({fields:e,flat:t}))):yj(e,t)},JM.sortRef=function(e){if(!e)return e;var t=[Ej(e.op,e.field),gj],n=e.order||xj;return n.signal?pj(this.add(pC({fields:t,orders:[n=this.signalRef(n.signal),n]}))):bj(t,[n,n])},JM.event=function(e,t){var n=e+":"+t;if(!this.events[n]){var r=this.id();this.streams.push({id:r,source:e,type:t}),this.events[n]=r}return this.events[n]},JM.addSignal=function(e,t){this.signals.hasOwnProperty(e)&&Object(H["o"])("Duplicate signal name: "+Object(H["ab"])(e));var n=t instanceof fj?t:this.add(hj(t));return this.signals[e]=n},JM.getSignal=function(e){return this.signals[e]||Object(H["o"])("Unrecognized signal name: "+Object(H["ab"])(e)),this.signals[e]},JM.signalRef=function(e){return this.signals[e]?pj(this.signals[e]):(this.lambdas.hasOwnProperty(e)||(this.lambdas[e]=this.add(hj(null))),pj(this.lambdas[e]))},JM.parseLambdas=function(){for(var e=Object.keys(this.lambdas),t=0,n=e.length;t<n;++t){var r=e[t],i=lj(r,this),o=this.lambdas[r];o.params=i.$params,o.update=i.$expr}},JM.property=function(e){return e&&e.signal?this.signalRef(e.signal):e},JM.objectProperty=function(e){return e&&Object(H["G"])(e)?this.signalRef(e.signal||QM(e)):e},JM.exprRef=function(e,t){var n={expr:lj(e,this)};return t&&(n.expr.$name=t),pj(this.add(vC(n)))},JM.addBinding=function(e,t){this.bindings||Object(H["o"])("Nested signals do not support binding: "+Object(H["ab"])(e)),this.bindings.push(Object(H["p"])({signal:e},t))},JM.addScaleProj=function(e,t){this.scales.hasOwnProperty(e)&&Object(H["o"])("Duplicate scale or projection name: "+Object(H["ab"])(e)),this.scales[e]=this.add(t)},JM.addScale=function(e,t){this.addScaleProj(e,zC(t))},JM.addProjection=function(e,t){this.addScaleProj(e,CC(t))},JM.getScale=function(e){return this.scales[e]||Object(H["o"])("Unrecognized scale name: "+Object(H["ab"])(e)),this.scales[e]},JM.projectionRef=JM.scaleRef=function(e){return pj(this.getScale(e))},JM.projectionType=JM.scaleType=function(e){return this.getScale(e).params.type},JM.addData=function(e,t){return this.data.hasOwnProperty(e)&&Object(H["o"])("Duplicate data set name: "+Object(H["ab"])(e)),this.data[e]=t},JM.getData=function(e){return this.data[e]||Object(H["o"])("Undefined data set name: "+Object(H["ab"])(e)),this.data[e]},JM.addDataPipeline=function(e,t){return this.data.hasOwnProperty(e)&&Object(H["o"])("Duplicate data set name: "+Object(H["ab"])(e)),this.addData(e,fM.fromEntries(this,t))};var ez=function(e){var t=sz();return(e||[]).forEach((function(e){var n,r,i;if(e)for(n in e)if("style"===n)for(n in i=t.style||(t.style={}),e.style)i[n]=Object(H["p"])(i[n]||{},e.style[n]);else r=e[n],t[n]=Object(H["G"])(r)&&!Object(H["B"])(r)?Object(H["p"])(Object(H["G"])(t[n])?t[n]:{},r):r})),t},tz="sans-serif",nz=30,rz=2,iz="#4c78a8",oz="#000",az="#888",uz="#ddd";function sz(){return{padding:0,autosize:"pad",background:null,events:{defaults:{allow:["wheel"]}},group:null,mark:null,arc:{fill:iz},area:{fill:iz},image:null,line:{stroke:iz,strokeWidth:rz},path:{stroke:iz},rect:{fill:iz},rule:{stroke:oz},shape:{stroke:iz},symbol:{fill:iz,size:64},text:{fill:oz,font:tz,fontSize:11},style:{"guide-label":{fill:oz,font:tz,fontSize:10},"guide-title":{fill:oz,font:tz,fontSize:11,fontWeight:"bold"},"group-title":{fill:oz,font:tz,fontSize:13,fontWeight:"bold"},point:{size:nz,strokeWidth:rz,shape:"circle"},circle:{size:nz,strokeWidth:rz},square:{size:nz,strokeWidth:rz,shape:"square"},cell:{fill:"transparent",stroke:uz}},axis:{minExtent:0,maxExtent:200,bandPosition:.5,domain:!0,domainWidth:1,domainColor:az,grid:!1,gridWidth:1,gridColor:uz,labels:!0,labelAngle:0,labelLimit:180,labelPadding:2,ticks:!0,tickColor:az,tickOffset:0,tickRound:!0,tickSize:5,tickWidth:1,titleAlign:"center",titlePadding:4},axisBand:{tickOffset:-1},legend:{orient:"right",offset:18,padding:0,gridAlign:"each",columnPadding:10,rowPadding:2,symbolDirection:"vertical",gradientDirection:"vertical",gradientLength:200,gradientThickness:16,gradientStrokeColor:uz,gradientStrokeWidth:0,gradientLabelOffset:2,labelAlign:"left",labelBaseline:"middle",labelLimit:160,labelOffset:4,labelOverlap:!0,symbolType:"circle",symbolSize:100,symbolOffset:0,symbolStrokeWidth:1.5,symbolBaseFillColor:"transparent",symbolBaseStrokeColor:az,titleAlign:"left",titleBaseline:"top",titleLimit:180,titlePadding:5},title:{orient:"top",anchor:"middle",offset:4},range:{category:{scheme:"tableau10"},ordinal:{scheme:"blues",extent:[.2,1]},heatmap:{scheme:"viridis"},ramp:{scheme:"blues",extent:[.2,1]},diverging:{scheme:"blueorange"},symbol:["circle","square","triangle-up","cross","diamond","triangle-right","triangle-down","triangle-left"]}}}var cz=function(e,t){return Object(H["G"])(e)||Object(H["o"])("Input Vega specification must be an object."),YM(e,new VM(ez([t,e.config]))).toRuntime()};function lz(e,t,n){";"!==t[t.length-1]&&(t="return("+t+");");var r=Function.apply(null,e.concat(t));return n&&n.functions?r.bind(n.functions):r}function fz(e,t){return lz(["_"],e,t)}function dz(e,t){return lz(["datum","_"],e,t)}function hz(e,t){return lz(["event"],e,t)}function pz(e,t){return lz(["_","event"],e,t)}function gz(e,t){return lz(["item","_"],e,t)}function mz(e,t,n){var r,i;for(r in n=n||{},e)i=e[r],n[r]=Object(H["B"])(i)?i.map((function(e){return vz(e,t,n)})):vz(i,t,n);return n}function vz(e,t,n){if(!e||!Object(H["G"])(e))return e;for(var r,i=0,o=bz.length;i<o;++i)if(r=bz[i],e.hasOwnProperty(r.key))return r.parse(e,t,n);return e}var bz=[{key:"$ref",parse:yz},{key:"$key",parse:wz},{key:"$expr",parse:xz},{key:"$field",parse:Oz},{key:"$encode",parse:kz},{key:"$compare",parse:Ez},{key:"$context",parse:_z},{key:"$subflow",parse:Az},{key:"$tupleid",parse:Sz}];function yz(e,t){return t.get(e.$ref)||Object(H["o"])("Operator not defined: "+e.$ref)}function xz(e,t,n){e.$params&&mz(e.$params,t,n);var r="e:"+e.$expr+"_"+e.$name;return t.fn[r]||(t.fn[r]=Object(H["f"])(dz(e.$expr,t),e.$fields,e.$name))}function wz(e,t){var n="k:"+e.$key+"_"+!!e.$flat;return t.fn[n]||(t.fn[n]=Object(H["J"])(e.$key,e.$flat))}function Oz(e,t){if(!e.$field)return null;var n="f:"+e.$field+"_"+e.$name;return t.fn[n]||(t.fn[n]=Object(H["u"])(e.$field,e.$name))}function Ez(e,t){var n="c:"+e.$compare+"_"+e.$order,r=Object(H["i"])(e.$compare).map((function(e){return e&&e.$tupleid?J:e}));return t.fn[n]||(t.fn[n]=Object(H["l"])(r,e.$order))}function kz(e,t){var n,r,i=e.$encode,o={};for(n in i)r=i[n],o[n]=Object(H["f"])(gz(r.$expr,t),r.$fields),o[n].output=r.$output;return o}function _z(e,t){return t}function Az(e,t){var n=e.$subflow;return function(e,r,i){var o=Tz(n,t.fork()),a=o.get(n.operators[0].id),u=o.signals.parent;return u&&u.set(i),a}}function Sz(){return J}function jz(e){return(e+"").toLowerCase()}function Cz(e){return"operator"===jz(e)}function Dz(e){return"collect"===jz(e)}var Fz=function(e,t){Cz(e.type)||!e.type?t.operator(e,e.update?fz(e.update,t):null):t.transform(e,e.type)};function Mz(e,t){if(e.params){var n=t.get(e.id);n||Object(H["o"])("Invalid operator id: "+e.id),t.dataflow.connect(n,n.parameters(mz(e.params,t),e.react,e.initonly))}}var zz=function(e,t){var n,r=null!=e.filter?hz(e.filter,t):void 0,i=null!=e.stream?t.get(e.stream):void 0;e.source?i=t.events(e.source,e.type,r):e.merge&&(n=e.merge.map(t.get.bind(t)),i=n[0].merge.apply(n[0],n.slice(1))),e.between&&(n=e.between.map(t.get.bind(t)),i=i.between(n[0],n[1])),e.filter&&(i=i.filter(r)),null!=e.throttle&&(i=i.throttle(+e.throttle)),null!=e.debounce&&(i=i.debounce(+e.debounce)),null==i&&Object(H["o"])("Invalid stream definition: "+JSON.stringify(e)),e.consume&&i.consume(!0),t.stream(e,i)},Nz=function(e,t){var n=Object(H["G"])(n=e.source)?n.$ref:n,r=t.get(n),i=null,o=e.update,a=void 0;r||Object(H["o"])("Source not defined: "+e.source),i=e.target&&e.target.$expr?hz(e.target.$expr,t):t.get(e.target),o&&o.$expr&&(o.$params&&(a=mz(o.$params,t)),o=pz(o.$expr,t)),t.update(e,r,i,o,a)},Tz=function(e,t){var n=e.operators||[];return e.background&&(t.background=e.background),e.eventConfig&&(t.eventConfig=e.eventConfig),n.forEach((function(e){Fz(e,t)})),n.forEach((function(e){Mz(e,t)})),(e.streams||[]).forEach((function(e){zz(e,t)})),(e.updates||[]).forEach((function(e){Nz(e,t)})),t.resolve()},Rz={skip:!0};function Bz(e){var t=this,n={};if(e.signals){var r=n.signals={};Object.keys(t.signals).forEach((function(n){var i=t.signals[n];e.signals(n,i)&&(r[n]=i.value)}))}if(e.data){var i=n.data={};Object.keys(t.data).forEach((function(n){var r=t.data[n];e.data(n,r)&&(i[n]=r.input.value)}))}return t.subcontext&&!1!==e.recurse&&(n.subcontext=t.subcontext.map((function(t){return t.getState(e)}))),n}function Pz(e){var t=this,n=t.dataflow,r=e.data,i=e.signals;Object.keys(i||{}).forEach((function(e){n.update(t.signals[e],i[e],Rz)})),Object.keys(r||{}).forEach((function(e){n.pulse(t.data[e].input,n.changeset().remove(H["hb"]).insert(r[e]))})),(e.subcontext||[]).forEach((function(e,n){var r=t.subcontext[n];r&&r.setState(e)}))}var Iz=function(e,t,n){return new Lz(e,t,n)};function Lz(e,t,n){this.dataflow=e,this.transforms=t,this.events=e.events.bind(e),this.signals={},this.scales={},this.nodes={},this.data={},this.fn={},n&&(this.functions=Object.create(n),this.functions.context=this)}function $z(e){this.dataflow=e.dataflow,this.transforms=e.transforms,this.functions=e.functions,this.events=e.events,this.signals=Object.create(e.signals),this.scales=Object.create(e.scales),this.nodes=Object.create(e.nodes),this.data=Object.create(e.data),this.fn=Object.create(e.fn),e.functions&&(this.functions=Object.create(e.functions),this.functions.context=this)}Lz.prototype=$z.prototype={fork:function(){var e=new $z(this);return(this.subcontext||(this.subcontext=[])).push(e),e},get:function(e){return this.nodes[e]},set:function(e,t){return this.nodes[e]=t},add:function(e,t){var n,r=this,i=r.dataflow;if(r.set(e.id,t),Dz(e.type)&&(n=e.value)&&(n.$ingest?i.ingest(t,n.$ingest,n.$format):n.$load?r.get(n.$load.$ref).target=t:n.$request?i.request(t,n.$request,n.$format):i.pulse(t,i.changeset().insert(n))),e.root&&(r.root=t),e.parent){var o=r.get(e.parent.$ref);o?(i.connect(o,[t]),t.targets().add(o)):(r.unresolved=r.unresolved||[]).push((function(){o=r.get(e.parent.$ref),i.connect(o,[t]),t.targets().add(o)}))}if(e.signal&&(r.signals[e.signal]=t),e.scale&&(r.scales[e.scale]=t),e.data)for(var a in e.data)n=r.data[a]||(r.data[a]={}),e.data[a].forEach((function(e){n[e]=t}))},resolve:function(){return(this.unresolved||[]).forEach((function(e){e()})),delete this.unresolved,this},operator:function(e,t){this.add(e,this.dataflow.add(e.value,t))},transform:function(e,t){this.add(e,this.dataflow.add(this.transforms[jz(t)]))},stream:function(e,t){this.set(e.id,t)},update:function(e,t,n,r,i){this.dataflow.on(t,n,r,i,e.options)},getState:Bz,setState:Pz};var Uz=function(e,t,n){var r=n||ej;return Tz(t,Iz(e,en,r))};function qz(e){var t=this._runtime.scales;return t.hasOwnProperty(e)||Object(H["o"])("Unrecognized scale or projection: "+e),t[e].value}var Wz="width",Hz="height",Gz="padding",Yz={skip:!0};function Vz(e,t){var n=e.autosize(),r=e.padding();return t-(n&&n.contains===Gz?r.left+r.right:0)}function Xz(e,t){var n=e.autosize(),r=e.padding();return t-(n&&n.contains===Gz?r.top+r.bottom:0)}function Jz(e){var t=e._signals,n=t[Wz],r=t[Hz],i=t[Gz];function o(){e._autosize=e._resize=1}e._resizeWidth=e.add(null,(function(t){e._width=t.size,e._viewWidth=Vz(e,t.size),o()}),{size:n}),e._resizeHeight=e.add(null,(function(t){e._height=t.size,e._viewHeight=Xz(e,t.size),o()}),{size:r});var a=e.add(null,o,{pad:i});e._resizeWidth.rank=n.rank+1,e._resizeHeight.rank=r.rank+1,a.rank=i.rank+1}function Qz(e,t,n,r,i,o){this.runAfter((function(a){var u=0;a._autosize=0,a.width()!==n&&(u=1,a.signal(Wz,n,Yz),a._resizeWidth.skip(!0)),a.height()!==r&&(u=1,a.signal(Hz,r,Yz),a._resizeHeight.skip(!0)),a._viewWidth!==e&&(a._resize=1,a._viewWidth=e),a._viewHeight!==t&&(a._resize=1,a._viewHeight=t),a._origin[0]===i[0]&&a._origin[1]===i[1]||(a._resize=1,a._origin=i),u&&a.run("enter"),o&&a.runAfter((function(){a.resize()}))}),!1,1)}function Kz(e){return this._runtime.getState(e||{data:Zz,signals:eN,recurse:!0})}function Zz(e,t){return t.modified&&Object(H["B"])(t.input.value)&&e.indexOf("_:vega:_")}function eN(e,t){return!("parent"===e||t instanceof en.proxy)}function tN(e){var t=this;return t.runAfter((function(){t._trigger=!1,t._runtime.setState(e),t.run().runAfter((function(){t._trigger=!0}))})),this}var nN=n("d5bc"),rN=function(e,t){function n(t){e({timestamp:Date.now(),elapsed:t})}this._timers.push(Object(nN["a"])(n,t))},iN=function(e,t,n,r){var i=e.element();i&&i.setAttribute("title",oN(r))};function oN(e){return null==e?"":Object(H["B"])(e)?uN(e):Object(H["G"])(e)&&!Object(H["D"])(e)?aN(e):e+""}function aN(e){return Object.keys(e).map((function(t){var n=e[t];return t+": "+(Object(H["B"])(n)?uN(n):sN(n))})).join("\n")}function uN(e){return"["+e.map(sN).join(", ")+"]"}function sN(e){return Object(H["B"])(e)?"[…]":Object(H["G"])(e)&&!Object(H["D"])(e)?"{…}":e}function cN(e,t){var n=this;t=t||{},Xt.call(n),n.loader(t.loader||n._loader),n.logLevel(t.logLevel||0),n._el=null,n._renderType=t.renderer||Jl.Canvas,n._scenegraph=new Rc;var r=n._scenegraph.root;n._renderer=null,n._tooltip=t.tooltip||iN,n._redraw=!0,n._handler=(new tl).scene(r),n._preventDefault=!1,n._timers=[],n._eventListeners=[],n._resizeListeners=[];var i=Uz(n,e,t.functions);n._runtime=i,n._signals=i.signals,n._bind=(e.bindings||[]).map((function(e){return{state:null,param:Object(H["p"])({},e)}})),i.root&&i.root.set(r),r.source=i.data.root.input,n.pulse(i.data.root.input,n.changeset().insert(r.items)),n._background=i.background||null,n._eventConfig=oE(i.eventConfig),n._width=n.width(),n._height=n.height(),n._viewWidth=Vz(n,n._width),n._viewHeight=Xz(n,n._height),n._origin=[0,0],n._resize=0,n._autosize=1,Jz(n),UO(n)}var lN=Object(H["z"])(cN,Xt);function fN(e,t){return e._signals.hasOwnProperty(t)?e._signals[t]:Object(H["o"])("Unrecognized signal name: "+Object(H["ab"])(t))}function dN(e,t){var n=e._targets||[],r=n.filter((function(e){var n=e._update;return n&&n.handler===t}));return r.length?r[0]:null}function hN(e,t,n,r){var i=dN(n,r);return i||(i=FE(this,(function(){r(t,n.value)})),i.handler=r,e.on(n,null,i)),e}function pN(e,t,n){var r=dN(t,n);return r&&t._targets.remove(r),e}lN.run=function(e){if(Xt.prototype.run.call(this,e),this._pending)this.resize();else if(this._redraw||this._resize)try{this.render()}catch(t){this.error(t)}return this},lN.render=function(){return this._renderer&&(this._resize&&(this._resize=0,KO(this)),this._renderer.render(this._scenegraph.root)),this._redraw=!1,this},lN.dirty=function(e){this._redraw=!0,this._renderer&&this._renderer.dirty(e)},lN.container=function(){return this._el},lN.scenegraph=function(){return this._scenegraph},lN.origin=function(){return this._origin.slice()},lN.signal=function(e,t,n){var r=fN(this,e);return 1===arguments.length?r.value:this.update(r,t,n)},lN.background=function(e){return arguments.length?(this._background=e,this._resize=1,this):this._background},lN.width=function(e){return arguments.length?this.signal("width",e):this.signal("width")},lN.height=function(e){return arguments.length?this.signal("height",e):this.signal("height")},lN.padding=function(e){return arguments.length?this.signal("padding",e):this.signal("padding")},lN.autosize=function(e){return arguments.length?this.signal("autosize",e):this.signal("autosize")},lN.renderer=function(e){return arguments.length?(Kl(e)||Object(H["o"])("Unrecognized renderer type: "+e),e!==this._renderType&&(this._renderType=e,this._resetRenderer()),this):this._renderType},lN.tooltip=function(e){return arguments.length?(e!==this._tooltip&&(this._tooltip=e,this._resetRenderer()),this):this._tooltip},lN.loader=function(e){return arguments.length?(e!==this._loader&&(Xt.prototype.loader.call(this,e),this._resetRenderer()),this):this._loader},lN.resize=function(){return this._autosize=1,this.touch(fN(this,"autosize"))},lN._resetRenderer=function(){this._renderer&&(this._renderer=null,this.initialize(this._el))},lN._resizeView=Qz,lN.addEventListener=function(e,t,n){var r=t;return n&&!1===n.trap||(r=FE(this,t),r.raw=t),this._handler.on(e,r),this},lN.removeEventListener=function(e,t){var n,r,i=this._handler.handlers(e),o=i.length;while(--o>=0)if(r=i[o].type,n=i[o].handler,e===r&&(t===n||t===n.raw)){this._handler.off(r,n);break}return this},lN.addResizeListener=function(e){var t=this._resizeListeners;return t.indexOf(e)<0&&t.push(e),this},lN.removeResizeListener=function(e){var t=this._resizeListeners,n=t.indexOf(e);return n>=0&&t.splice(n,1),this},lN.addSignalListener=function(e,t){return hN(this,e,fN(this,e),t)},lN.removeSignalListener=function(e,t){return pN(this,fN(this,e),t)},lN.addDataListener=function(e,t){return hN(this,e,WO(this,e).values,t)},lN.removeDataListener=function(e,t){return pN(this,WO(this,e).values,t)},lN.preventDefault=function(e){return arguments.length?(this._preventDefault=e,this):this._preventDefault},lN.timer=rN,lN.events=uE,lN.finalize=dE,lN.hover=fE,lN.data=HO,lN.change=GO,lN.insert=YO,lN.remove=VO,lN.scale=qz,lN.initialize=zE,lN.toImageURL=RE,lN.toCanvas=PE,lN.toSVG=IE,lN.getState=Kz,lN.setState=tN,Object(H["p"])(en,r,i,o,a,u,s,c,l,f);var gN=n("f64a"),mN=n("2410"),vN=n.n(mN),bN=n("694b"),yN=n.n(bN),xN=n("f71e"),wN=n.n(xN);function ON(e){return!!e.or}function EN(e){return!!e.and}function kN(e){return!!e.not}function _N(e,t){if(kN(e))_N(e.not,t);else if(EN(e))for(const n of e.and)_N(n,t);else if(ON(e))for(const n of e.or)_N(n,t);else t(e)}function AN(e,t){return kN(e)?{not:AN(e.not,t)}:EN(e)?{and:e.and.map(e=>AN(e,t))}:ON(e)?{or:e.or.map(e=>AN(e,t))}:t(e)}const SN=yN.a,jN=vN.a;function CN(e){return new RegExp(`\\b${e}\\b`,"g")}function DN(e,t){const n={};for(const r of t)e.hasOwnProperty(r)&&(n[r]=e[r]);return n}function FN(e,t){const n=Object.assign({},e);for(const r of t)delete n[r];return n}Set.prototype["toJSON"]=function(){return`Set(${[...this].map(wN.a).join(",")})`};const MN=wN.a;function zN(e){if(Object(H["F"])(e))return e;const t=Object(H["I"])(e)?e:wN()(e);if(t.length<250)return t;let n=0;for(let r=0;r<t.length;r++){const e=t.charCodeAt(r);n=(n<<5)-n+e,n&=n}return n}function NN(e,t){return e.indexOf(t)>-1}function TN(e,t){return e.filter(e=>!NN(t,e))}function RN(e,t){return e.concat(TN(t,e))}function BN(e,t){let n=0;for(let r=0;r<e.length;r++)if(t(e[r],r,n++))return!0;return!1}function PN(e,t){let n=0;for(let r=0;r<e.length;r++)if(!t(e[r],r,n++))return!1;return!0}function IN(e){return[].concat(...e)}function LN(e,t){const n=new Array(t);for(let r=0;r<t;++r)n[r]=e;return n}function $N(e,...t){for(const n of t)e=UN(e,n);return e}function UN(e,t){if("object"!==typeof t||null===t)return e;for(const n in t)t.hasOwnProperty(n)&&void 0!==t[n]&&("object"!==typeof t[n]||Object(H["B"])(t[n])||null===t[n]?e[n]=t[n]:"object"!==typeof e[n]||null===e[n]?e[n]=$N(Object(H["B"])(t[n].constructor)?[]:{},t[n]):$N(e[n],t[n]));return e}function qN(e,t){const n=[],r={};let i;for(const o of e)i=t(o),i in r||(r[i]=1,n.push(o));return n}function WN(e,t){const n=QN(e),r=QN(t);if(n.length!==r.length)return!1;for(const i of n)if(e[i]!==t[i])return!1;return!0}function HN(e,t){if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0}function GN(e,t){for(const n of e)if(t.has(n))return!0;return!1}function YN(e){const t=new Set;for(const n of e){const e=Object(H["Z"])(n),r=e.map((e,t)=>0===t?e:`[${e}]`),i=r.map((e,t)=>r.slice(0,t+1).join(""));i.forEach(e=>t.add(e))}return t}function VN(e,t){return GN(YN(e),YN(t))}function XN(e){return!isNaN(e)}function JN(e,t){if(e.length!==t.length)return!0;e.sort(),t.sort();for(let n=0;n<e.length;n++)if(t[n]!==e[n])return!0;return!1}const QN=Object.keys;function KN(e){const t=[];for(const n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t}function ZN(e){const t=[];for(const n in e)e.hasOwnProperty(n)&&t.push({key:n,value:e[n]});return t}function eT(e){return QN(e)}function tT(e){return!0===e||!1===e}function nT(e){const t=e.replace(/\W/g,"_");return(e.match(/^\d+/)?"_":"")+t}function rT(e,t){return kN(e)?"!("+rT(e.not,t)+")":EN(e)?"("+e.and.map(e=>rT(e,t)).join(") && (")+")":ON(e)?"("+e.or.map(e=>rT(e,t)).join(") || (")+")":t(e)}function iT(e,t){if(0===t.length)return!0;const n=t.shift();return iT(e[n],t)&&delete e[n],0===QN(e).length}function oT(e){return e.charAt(0).toUpperCase()+e.substr(1)}function aT(e,t="datum"){const n=Object(H["Z"])(e),r=[];for(let i=1;i<=n.length;i++){const e=`[${n.slice(0,i).map(H["ab"]).join("][")}]`;r.push(`${t}${e}`)}return r.join(" && ")}function uT(e,t="datum"){return`${t}[${Object(H["ab"])(Object(H["Z"])(e).join("."))}]`}function sT(e){return""+Object(H["Z"])(e).map(e=>e.replace(".","\\.")).join("\\.")}function cT(e){return""+Object(H["Z"])(e).join(".")}function lT(e){return e?Object(H["Z"])(e).length:0}function fT(...e){for(const t of e)if(void 0!==t)return t}let dT=42;function hT(e){const t=++dT;return e?String(e)+t:t}function pT(){dT=42}const gT={argmax:1,argmin:1,average:1,count:1,distinct:1,max:1,mean:1,median:1,min:1,missing:1,q1:1,q3:1,ci0:1,ci1:1,stderr:1,stdev:1,stdevp:1,sum:1,valid:1,values:1,variance:1,variancep:1},mT=eT(gT);function vT(e){return!!gT[e]}const bT=["count","valid","missing","distinct"];function yT(e){return e&&NN(bT,e)}function xT(e){return e&&NN(["min","max"],e)}const wT=["count","sum","distinct","valid","missing"],OT=["mean","average","median","q1","q3","min","max"],ET=Object(H["eb"])(OT),kT=["domain","grid","labels","ticks","title"],_T={grid:"grid",gridColor:"grid",gridDash:"grid",gridOpacity:"grid",gridScale:"grid",gridWidth:"grid",orient:"main",bandPosition:"both",domain:"main",domainColor:"main",domainOpacity:"main",domainWidth:"main",format:"main",labelAlign:"main",labelAngle:"main",labelBaseline:"main",labelBound:"main",labelColor:"main",labelFlush:"main",labelFlushOffset:"main",labelFont:"main",labelFontSize:"main",labelFontWeight:"main",labelLimit:"main",labelOpacity:"main",labelOverlap:"main",labelPadding:"main",labels:"main",maxExtent:"main",minExtent:"main",offset:"main",position:"main",tickColor:"main",tickExtra:"main",tickOffset:"both",tickOpacity:"main",tickRound:"main",ticks:"main",tickSize:"main",title:"main",titleAlign:"main",titleAngle:"main",titleBaseline:"main",titleColor:"main",titleFont:"main",titleFontSize:"main",titleFontWeight:"main",titleLimit:"main",titleOpacity:"main",titlePadding:"main",titleX:"main",titleY:"main",tickWidth:"both",tickCount:"both",values:"both",scale:"both",zindex:"both"},AT={orient:1,bandPosition:1,domain:1,domainColor:1,domainOpacity:1,domainWidth:1,format:1,grid:1,gridColor:1,gridDash:1,gridOpacity:1,gridWidth:1,labelAlign:1,labelAngle:1,labelBaseline:1,labelBound:1,labelColor:1,labelFlush:1,labelFlushOffset:1,labelFont:1,labelFontSize:1,labelFontWeight:1,labelLimit:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labels:1,maxExtent:1,minExtent:1,offset:1,position:1,tickColor:1,tickCount:1,tickExtra:1,tickOffset:1,tickOpacity:1,tickRound:1,ticks:1,tickSize:1,tickWidth:1,title:1,titleAlign:1,titleAngle:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontWeight:1,titleLimit:1,titleOpacity:1,titlePadding:1,titleX:1,titleY:1,values:1,zindex:1},ST=Object.assign({},AT,{encoding:1,labelAngle:1,tickStep:1}),jT=Object.assign({gridScale:1,scale:1},AT,{encode:1});function CT(e){return!!ST[e]}const DT=eT(jT),FT=eT(ST);var MT;(function(e){e.ROW="row",e.COLUMN="column",e.X="x",e.Y="y",e.X2="x2",e.Y2="y2",e.XERROR="xError",e.YERROR="yError",e.XERROR2="xError2",e.YERROR2="yError2",e.LATITUDE="latitude",e.LONGITUDE="longitude",e.LATITUDE2="latitude2",e.LONGITUDE2="longitude2",e.COLOR="color",e.FILL="fill",e.STROKE="stroke",e.SHAPE="shape",e.SIZE="size",e.OPACITY="opacity",e.FILLOPACITY="fillOpacity",e.STROKEOPACITY="strokeOpacity",e.STROKEWIDTH="strokeWidth",e.TEXT="text",e.ORDER="order",e.DETAIL="detail",e.KEY="key",e.TOOLTIP="tooltip",e.HREF="href"})(MT||(MT={}));const zT=MT.X,NT=MT.Y,TT=MT.X2,RT=MT.Y2,BT=MT.XERROR,PT=MT.YERROR,IT=MT.XERROR2,LT=MT.YERROR2,$T=MT.LATITUDE,UT=MT.LATITUDE2,qT=MT.LONGITUDE,WT=MT.LONGITUDE2,HT=MT.ROW,GT=MT.COLUMN,YT=MT.SHAPE,VT=MT.SIZE,XT=MT.COLOR,JT=MT.FILL,QT=MT.STROKE,KT=MT.TEXT,ZT=MT.DETAIL,eR=MT.KEY,tR=MT.ORDER,nR=MT.OPACITY,rR=MT.FILLOPACITY,iR=MT.STROKEOPACITY,oR=MT.STROKEWIDTH,aR=MT.TOOLTIP,uR=MT.HREF,sR={longitude:1,longitude2:1,latitude:1,latitude2:1},cR=eT(sR),lR=Object.assign({x:1,y:1,x2:1,y2:1,xError:1,yError:1,xError2:1,yError2:1},sR,{color:1,fill:1,stroke:1,opacity:1,fillOpacity:1,strokeOpacity:1,strokeWidth:1,size:1,shape:1,order:1,text:1,detail:1,key:1,tooltip:1,href:1});function fR(e){return"color"===e||"fill"===e||"stroke"===e}const dR={row:1,column:1},hR=Object.assign({},lR,dR),pR=eT(hR),{order:gR,detail:mR}=hR,vR=P(hR,["order","detail"]),bR=eT(vR);function yR(e){return!!hR[e]}function xR(e){const t=wR(e);return t!==e}function wR(e){switch(e){case"x2":return"x";case"y2":return"y";case"latitude2":return"latitude";case"longitude2":return"longitude"}return e}const OR=eT(lR),{x:ER,y:kR,x2:_R,y2:AR,xError:SR,yError:jR,xError2:CR,yError2:DR,latitude:FR,longitude:MR,latitude2:zR,longitude2:NR}=lR,TR=P(lR,["x","y","x2","y2","xError","yError","xError2","yError2","latitude","longitude","latitude2","longitude2"]),RR=eT(TR),BR={x:1,y:1},PR=eT(BR),{text:IR,tooltip:LR,href:$R,detail:UR,key:qR,order:WR}=TR,HR=P(TR,["text","tooltip","href","detail","key","order"]),GR=eT(HR);function YR(e){return!!TR[e]}const VR=Object.assign({},BR,HR),XR=eT(VR);function JR(e){return!!VR[e]}function QR(e,t){return KR(e)[t]}function KR(e){switch(e){case XT:case JT:case QT:case ZT:case eR:case aR:case uR:case tR:case nR:case rR:case iR:case oR:case HT:case GT:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",rect:"always",line:"always",trail:"always",area:"always",text:"always",geoshape:"always"};case zT:case NT:case $T:case qT:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",rect:"always",line:"always",trail:"always",area:"always",text:"always"};case TT:case RT:case UT:case WT:return{rule:"always",bar:"always",rect:"always",area:"always",circle:"binned",point:"binned",square:"binned",tick:"binned"};case VT:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",text:"always",line:"always",trail:"always"};case YT:return{point:"always",geoshape:"always"};case KT:return{text:"always"};case BT:case PT:case IT:case LT:return{}}}function ZR(e){switch(e){case zT:case NT:case VT:case oR:case nR:case rR:case iR:case TT:case RT:case BT:case PT:case IT:case LT:return;case HT:case GT:case YT:case KT:case aR:case uR:return"discrete";case XT:case JT:case QT:return"flexible";case $T:case qT:case UT:case WT:case ZT:case eR:case tR:return}throw new Error("rangeType not implemented for "+e)}function eB(e){return Object(H["C"])(e)?"bin":"bin"+QN(e).map(t=>nT(`_${t}_${e[t]}`)).join("")}function tB(e){return!0===e||rB(e)}function nB(e){return"binned"===e}function rB(e){return Object(H["G"])(e)}function iB(e){switch(e){case HT:case GT:case VT:case XT:case JT:case QT:case oR:case nR:case rR:case iR:case YT:return 6;default:return 10}}var oB;(function(e){e.AREA="area",e.BAR="bar",e.LINE="line",e.POINT="point",e.RECT="rect",e.RULE="rule",e.TEXT="text",e.TICK="tick",e.TRAIL="trail",e.CIRCLE="circle",e.SQUARE="square",e.GEOSHAPE="geoshape"})(oB||(oB={}));const aB=oB.AREA,uB=oB.BAR,sB=oB.LINE,cB=oB.POINT,lB=oB.TEXT,fB=oB.TICK,dB=oB.TRAIL,hB=oB.RECT,pB=oB.RULE,gB=oB.GEOSHAPE,mB=oB.CIRCLE,vB=oB.SQUARE,bB={area:1,bar:1,line:1,point:1,text:1,tick:1,trail:1,rect:1,geoshape:1,rule:1,circle:1,square:1};function yB(e){return!!bB[e]}function xB(e){return NN(["line","area","trail"],e)}const wB=eT(bB);function OB(e){return e["type"]}const EB=Object(H["eb"])(wB);function kB(e){const t=OB(e)?e.type:e;return t in EB}const _B=["stroke","strokeWidth","strokeDash","strokeDashOffset","strokeOpacity","strokeJoin","strokeMiterLimit"],AB=["fill","fillOpacity"],SB=[].concat(_B,AB),jB=["filled","color","tooltip"],CB={area:["line","point"],bar:["binSpacing","continuousBandSize","discreteBandSize"],line:["point"],text:["shortTimeLabels"],tick:["bandSize","thickness"]},DB={color:"#4c78a8",tooltip:{content:"encoding"}},FB={binSpacing:1,continuousBandSize:5},MB={thickness:1},zB=Object(H["L"])(H["e"]);let NB=zB;function TB(e){return NB=e,NB}function RB(){return NB=zB,NB}function BB(...e){NB.warn.apply(NB,arguments)}function PB(...e){NB.debug.apply(NB,arguments)}var IB;(function(e){function t(e){return`Cannot project a selection on encoding channel "${e}", which has no field.`}function n(e){return`The "nearest" transform is not supported for ${e} marks.`}function r(e){return`Selection not supported for ${e} yet`}function i(e){return`Cannot find a selection named "${e}"`}function o(e){return`Unknown repeated value "${e}".`}function a(e){return`Cannot set title "anchor" for a ${e} spec`}function u(e){return`Unrecognized parse "${e}".`}function s(e,t,n){return`An ancestor parsed field "${e}" as ${n} but a child wants to parse the field as ${t}.`}function c(e){return`Ignoring an invalid transform: ${MN(e)}.`}function l(e){return`Layer's shared ${e.join(",")} channel ${1===e.length?"is":"are"} overriden`}function f(e){const{parentProjection:t,projection:n}=e;return`Layer's shared projection ${MN(t)} is overridden by a child projection ${MN(n)}.`}function d(e,t,n){return`Channel ${e} is a ${t}. Converted to {value: ${MN(n)}}.`}function h(e){return`Invalid field type "${e}"`}function p(e,t,n){const r=n.scaleType?n.scaleType+" scale":n.zeroFalse?"scale with zero=false":"scale with custom domain that excludes zero";return`A ${r} is used to encode ${e}'s ${t}. This can be misleading as the ${"x"===t?"width":"height"} of the ${e} can be arbitrary based on the scale domain. You may want to use point mark instead.`}function g(e,t){return`Invalid field type "${e}" for aggregate: "${t}", using "quantitative" instead.`}function m(e){return`Invalid aggregation operator "${e}"`}function v(e,t){return`Missing type for channel "${e}", using "${t}" instead.`}function b(e,t){const{fill:n,stroke:r}=t;return`Dropping color ${e} as the plot also has `+(n&&r?"fill and stroke":n?"fill":"stroke")}function y(e,t){return`Dropping ${MN(e)} from channel "${t}" since it does not contain data field or value.`}function x(e,t,n){return`${e}-encoding with type ${t} is deprecated. Replacing with ${n}-encoding.`}function w(e,t,n){return`${e} dropped as it is incompatible with "${t}"${n?" when "+n:""}.`}function O(e){return`${e}-encoding is dropped as ${e} is not a valid encoding channel.`}function E(e){return e+" encoding should be discrete (ordinal / nominal / binned)."}function k(e,t){return`Using discrete channel "${e}" to encode "${t}" field can be misleading as it does not encode ${"ordinal"===t?"order":"magnitude"}.`}function _(e,t){const n=e&&t?"x2 and y2":e?"x2":"y2";return`Line mark is for continuous lines and thus cannot be used with ${n}. We will use the rule mark (line segments) instead.`}function A(e,t){return`Specified orient "${e}" overridden with "${t}"`}function S(e){return`Cannot use the scale property "${e}" with non-color channel.`}function j(e){return`Using unaggregated domain with raw field has no effect (${MN(e)}).`}function C(e){return`Unaggregated domain not applicable for "${e}" since it produces values outside the origin domain of the source data.`}function D(e){return`Unaggregated domain is currently unsupported for log scale (${MN(e)}).`}function F(e){return`Cannot apply size to non-oriented mark "${e}".`}function M(e){return`rangeStep for "${e}" is dropped as top-level ${"x"===e?"width":"height"} is provided.`}function z(e,t,n){return`Channel "${e}" does not work with "${t}" scale. We are using "${n}" scale instead.`}function N(e,t){return`FieldDef does not work with "${e}" scale. We are using "${t}" scale instead.`}function T(e,t,n){return`${n}-scale's "${t}" is dropped as it does not work with ${e} scale.`}function R(e,t){return`Scale type "${t}" does not work with mark "${e}".`}function B(e,t,n,r){return`Conflicting ${t.toString()} property "${e.toString()}" (${MN(n)} and ${MN(r)}).  Using ${MN(n)}.`}function P(e){return`Setting the scale to be independent for "${e}" means we also have to set the guide (axis or legend) to be independent.`}function I(e){return`Dropping sort property ${MN(e)} as unioned domains only support boolean or op 'count'.`}function L(e){return`Cannot stack "${e}" if there is already "${e}2"`}function $(e){return`Cannot stack non-linear scale (${e})`}function U(e){return`Stacking is applied even though the aggregate function is non-summative ("${e}")`}function q(e,t){return`Invalid ${e}: ${MN(t)}`}function W(e){return`Time unit "${e}" is not supported. We are replacing it with ${e.replace("day","date")}.`}function H(e){return`Dropping day from datetime ${MN(e)} as day cannot be combined with other units.`}function G(e,t){return`${t?"extent ":""}${t&&e?"and ":""}${e?"center ":""}${t&&e?"are ":"is "}not needed when data are aggregated.`}function Y(e,t,n){return`${e} is not usually used with ${t} for ${n}.`}function V(e,t){return`Continuous axis should not have customized aggregation function ${e}; ${t} already agregates the axis.`}function X(e,t){return`Center is not needed to be specified in ${t} when extent is ${e}.`}function J(e){return"1D error band does not support "+e}function Q(e){return`Channel ${e} is required for "binned" bin`}function K(e){return`Domain for ${e} is required for threshold scale`}e.INVALID_SPEC="Invalid spec",e.FIT_NON_SINGLE='Autosize "fit" only works for single views and layered views.',e.CANNOT_FIX_RANGE_STEP_WITH_FIT='Cannot use a fixed value of "rangeStep" when "autosize" is "fit".',e.cannotProjectOnChannelWithoutField=t,e.nearestNotSupportForContinuous=n,e.selectionNotSupported=r,e.selectionNotFound=i,e.SCALE_BINDINGS_CONTINUOUS="Scale bindings are currently only supported for scales with unbinned, continuous domains.",e.noSuchRepeatedValue=o,e.CONCAT_CANNOT_SHARE_AXIS="Axes cannot be shared in concatenated views.",e.REPEAT_CANNOT_SHARE_AXIS="Axes cannot be shared in repeated views.",e.cannotSetTitleAnchor=a,e.unrecognizedParse=u,e.differentParse=s,e.invalidTransformIgnored=c,e.NO_FIELDS_NEEDS_AS='If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.',e.encodingOverridden=l,e.projectionOverridden=f,e.primitiveChannelDef=d,e.invalidFieldType=h,e.nonZeroScaleUsedWithLengthMark=p,e.invalidFieldTypeForCountAggregate=g,e.invalidAggregate=m,e.missingFieldType=v,e.droppingColor=b,e.emptyFieldDef=y,e.latLongDeprecated=x,e.LINE_WITH_VARYING_SIZE="Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.",e.incompatibleChannel=w,e.invalidEncodingChannel=O,e.facetChannelShouldBeDiscrete=E,e.discreteChannelCannotEncode=k,e.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL="Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.",e.lineWithRange=_,e.orientOverridden=A,e.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN="custom domain scale cannot be unioned with default field-based domain",e.cannotUseScalePropertyWithNonColor=S,e.unaggregateDomainHasNoEffectForRawField=j,e.unaggregateDomainWithNonSharedDomainOp=C,e.unaggregatedDomainWithLogScale=D,e.cannotApplySizeToNonOrientedMark=F,e.rangeStepDropped=M,e.scaleTypeNotWorkWithChannel=z,e.scaleTypeNotWorkWithFieldDef=N,e.scalePropertyNotWorkWithScaleType=T,e.scaleTypeNotWorkWithMark=R,e.mergeConflictingProperty=B,e.independentScaleMeansIndependentGuide=P,e.domainSortDropped=I,e.UNABLE_TO_MERGE_DOMAINS="Unable to merge domains",e.MORE_THAN_ONE_SORT="Domains that should be unioned has conflicting sort properties. Sort will be set to true.",e.INVALID_CHANNEL_FOR_AXIS="Invalid channel for axis.",e.cannotStackRangedMark=L,e.cannotStackNonLinearScale=$,e.stackNonSummativeAggregate=U,e.invalidTimeUnit=q,e.dayReplacedWithDate=W,e.droppedDay=H,e.errorBarCenterAndExtentAreNotNeeded=G,e.errorBarCenterIsUsedWithWrongExtent=Y,e.errorBarContinuousAxisHasCustomizedAggregate=V,e.errorBarCenterIsNotNeeded=X,e.errorBand1DNotSupport=J,e.channelRequiredForBinned=Q,e.domainRequiredForThresholdScale=K})(IB||(IB={}));const LB=2006;function $B(e){return!!e&&(!!e.year||!!e.quarter||!!e.month||!!e.date||!!e.day||!!e.hours||!!e.minutes||!!e.seconds||!!e.milliseconds)}const UB=["january","february","march","april","may","june","july","august","september","october","november","december"],qB=UB.map(e=>e.substr(0,3)),WB=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"],HB=WB.map(e=>e.substr(0,3));function GB(e){if(Object(H["F"])(e))return e>4&&BB(IB.invalidTimeUnit("quarter",e)),(e-1).toString();throw new Error(IB.invalidTimeUnit("quarter",e))}function YB(e){if(Object(H["F"])(e))return(e-1).toString();{const t=e.toLowerCase(),n=UB.indexOf(t);if(-1!==n)return n+"";const r=t.substr(0,3),i=qB.indexOf(r);if(-1!==i)return i+"";throw new Error(IB.invalidTimeUnit("month",e))}}function VB(e){if(Object(H["F"])(e))return e%7+"";{const t=e.toLowerCase(),n=WB.indexOf(t);if(-1!==n)return n+"";const r=t.substr(0,3),i=HB.indexOf(r);if(-1!==i)return i+"";throw new Error(IB.invalidTimeUnit("day",e))}}function XB(e,t=!1){const n=[];if(t&&void 0!==e.day&&QN(e).length>1&&(BB(IB.droppedDay(e)),e=jN(e),delete e.day),void 0!==e.year?n.push(e.year):void 0!==e.day?n.push(LB):n.push(0),void 0!==e.month){const r=t?YB(e.month):e.month;n.push(r)}else if(void 0!==e.quarter){const r=t?GB(e.quarter):e.quarter;n.push(r+"*3")}else n.push(0);if(void 0!==e.date)n.push(e.date);else if(void 0!==e.day){const r=t?VB(e.day):e.day;n.push(r+"+1")}else n.push(1);for(const r of["hours","minutes","seconds","milliseconds"])void 0!==e[r]?n.push(e[r]):n.push(0);return e.utc?`utc(${n.join(", ")})`:`datetime(${n.join(", ")})`}function JB(e){return!!e&&!!e["header"]}function QB(e){return void 0!==e["facet"]}var KB;(function(e){e.YEAR="year",e.MONTH="month",e.DAY="day",e.DATE="date",e.HOURS="hours",e.MINUTES="minutes",e.SECONDS="seconds",e.MILLISECONDS="milliseconds",e.YEARMONTH="yearmonth",e.YEARMONTHDATE="yearmonthdate",e.YEARMONTHDATEHOURS="yearmonthdatehours",e.YEARMONTHDATEHOURSMINUTES="yearmonthdatehoursminutes",e.YEARMONTHDATEHOURSMINUTESSECONDS="yearmonthdatehoursminutesseconds",e.MONTHDATE="monthdate",e.MONTHDATEHOURS="monthdatehours",e.HOURSMINUTES="hoursminutes",e.HOURSMINUTESSECONDS="hoursminutesseconds",e.MINUTESSECONDS="minutesseconds",e.SECONDSMILLISECONDS="secondsmilliseconds",e.QUARTER="quarter",e.YEARQUARTER="yearquarter",e.QUARTERMONTH="quartermonth",e.YEARQUARTERMONTH="yearquartermonth",e.UTCYEAR="utcyear",e.UTCMONTH="utcmonth",e.UTCDAY="utcday",e.UTCDATE="utcdate",e.UTCHOURS="utchours",e.UTCMINUTES="utcminutes",e.UTCSECONDS="utcseconds",e.UTCMILLISECONDS="utcmilliseconds",e.UTCYEARMONTH="utcyearmonth",e.UTCYEARMONTHDATE="utcyearmonthdate",e.UTCYEARMONTHDATEHOURS="utcyearmonthdatehours",e.UTCYEARMONTHDATEHOURSMINUTES="utcyearmonthdatehoursminutes",e.UTCYEARMONTHDATEHOURSMINUTESSECONDS="utcyearmonthdatehoursminutesseconds",e.UTCMONTHDATE="utcmonthdate",e.UTCMONTHDATEHOURS="utcmonthdatehours",e.UTCHOURSMINUTES="utchoursminutes",e.UTCHOURSMINUTESSECONDS="utchoursminutesseconds",e.UTCMINUTESSECONDS="utcminutesseconds",e.UTCSECONDSMILLISECONDS="utcsecondsmilliseconds",e.UTCQUARTER="utcquarter",e.UTCYEARQUARTER="utcyearquarter",e.UTCQUARTERMONTH="utcquartermonth",e.UTCYEARQUARTERMONTH="utcyearquartermonth"})(KB||(KB={}));const ZB={year:1,quarter:1,month:1,day:1,date:1,hours:1,minutes:1,seconds:1,milliseconds:1},eP=eT(ZB);function tP(e){return!!ZB[e]}const nP={utcyear:1,utcquarter:1,utcmonth:1,utcday:1,utcdate:1,utchours:1,utcminutes:1,utcseconds:1,utcmilliseconds:1};function rP(e){return!!nP[e]}const iP={yearquarter:1,yearquartermonth:1,yearmonth:1,yearmonthdate:1,yearmonthdatehours:1,yearmonthdatehoursminutes:1,yearmonthdatehoursminutesseconds:1,quartermonth:1,monthdate:1,monthdatehours:1,hoursminutes:1,hoursminutesseconds:1,minutesseconds:1,secondsmilliseconds:1},oP={utcyearquarter:1,utcyearquartermonth:1,utcyearmonth:1,utcyearmonthdate:1,utcyearmonthdatehours:1,utcyearmonthdatehoursminutes:1,utcyearmonthdatehoursminutesseconds:1,utcquartermonth:1,utcmonthdate:1,utcmonthdatehours:1,utchoursminutes:1,utchoursminutesseconds:1,utcminutesseconds:1,utcsecondsmilliseconds:1},aP=Object.assign({},nP,oP);function uP(e){return!!aP[e]}function sP(e){return e.substr(3)}const cP=Object.assign({},ZB,nP,iP,oP),lP=eT(cP);function fP(e){return!!cP[e]}const dP={year:"setFullYear",month:"setMonth",date:"setDate",hours:"setHours",minutes:"setMinutes",seconds:"setSeconds",milliseconds:"setMilliseconds",quarter:null,day:null};function hP(e,t){const n=uP(e),r=n?new Date(Date.UTC(1972,0,1,0,0,0,0)):new Date(1972,0,1,0,0,0,0);for(const i of eP)if(mP(e,i))switch(i){case KB.DAY:throw new Error("Cannot convert to TimeUnits containing 'day'");case KB.QUARTER:{const{getDateMethod:e,setDateMethod:i}=pP("month",n);r[i](3*Math.floor(t[e]()/3));break}default:const{getDateMethod:e,setDateMethod:o}=pP(i,n);r[o](t[e]())}return r}function pP(e,t){const n=dP[e],r=t?"setUTC"+n.substr(3):n,i="get"+(t?"UTC":"")+n.substr(3);return{setDateMethod:r,getDateMethod:i}}function gP(e){return eP.reduce((t,n)=>mP(e,n)?t.concat(n):t,[])}function mP(e,t){const n=e.indexOf(t);return n>-1&&(t!==KB.SECONDS||0===n||"i"!==e.charAt(n-1))}function vP(e,t){const n=aT(t),r=uP(e)?"utc":"";function i(e){return e===KB.QUARTER?`(${r}quarter(${n})-1)`:`${r}${e}(${n})`}const o=eP.reduce((t,n)=>(mP(e,n)&&(t[n]=i(n)),t),{});return XB(o)}function bP(e,t){if(!e)return;const n=[],r=mP(e,KB.YEAR);mP(e,KB.MONTH)&&n.push(!1!==t?"%b":"%B"),mP(e,KB.DAY)?n.push(t?"%a":"%A"):mP(e,KB.DATE)&&n.push("%d"+(r?",":"")),r&&n.push(t?"%y":"%Y");const i=[];mP(e,KB.HOURS)&&i.push("%H"),mP(e,KB.MINUTES)&&i.push("%M"),mP(e,KB.SECONDS)&&i.push("%S"),mP(e,KB.MILLISECONDS)&&i.push("%L");const o=[];return n.length>0&&o.push(n.join(" ")),i.length>0&&o.push(i.join(":")),o}function yP(e,t,n,r){if(!e)return;const i=bP(e,n);let o="";return mP(e,KB.QUARTER)&&(o=`'Q' + quarter(${t})`),i.length>0&&(o&&(o+=" + ' ' + "),o+=r?`utcFormat(${t}, '${i.join(" ")}')`:`timeFormat(${t}, '${i.join(" ")}')`),o||void 0}function xP(e){return"day"!==e&&e.indexOf("day")>=0?(BB(IB.dayReplacedWithDate(e)),e.replace("day","date")):e}var wP;(function(e){e.QUANTITATIVE="quantitative",e.ORDINAL="ordinal",e.TEMPORAL="temporal",e.NOMINAL="nominal",e.GEOJSON="geojson"})(wP||(wP={}));const OP={quantitative:1,ordinal:1,temporal:1,nominal:1,geojson:1};function EP(e){return!!OP[e]}const kP=wP.QUANTITATIVE,_P=wP.ORDINAL,AP=wP.TEMPORAL,SP=wP.NOMINAL,jP=wP.GEOJSON;function CP(e){if(e)switch(e=e.toLowerCase(),e){case"q":case kP:return"quantitative";case"t":case AP:return"temporal";case"o":case _P:return"ordinal";case"n":case SP:return"nominal";case jP:return"geojson"}}function DP(e){return e["selection"]}function FP(e){return e&&!Object(H["I"])(e)&&"repeat"in e}function MP(e){const{field:t,timeUnit:n,bin:r,aggregate:i}=e;return Object.assign({},n?{timeUnit:n}:{},r?{bin:r}:{},i?{aggregate:i}:{},{field:t})}function zP(e){return PP(e)&&!!e["sort"]}function NP(e){return!!e&&!!e.condition}function TP(e){return!!e&&!!e.condition&&!Object(H["B"])(e.condition)&&BP(e.condition)}function RP(e){return!!e&&!!e.condition&&(Object(H["B"])(e.condition)||LP(e.condition))}function BP(e){return!!e&&(!!e["field"]||"count"===e["aggregate"])}function PP(e){return!!e&&(!!e["field"]&&!!e["type"]||"count"===e["aggregate"])}function IP(e){return BP(e)&&Object(H["I"])(e.field)}function LP(e){return e&&"value"in e&&void 0!==e["value"]}function $P(e){return!!e&&(!!e["scale"]||!!e["sort"])}function UP(e){return!!e&&(!!e["axis"]||!!e["stack"]||!!e["impute"])}function qP(e){return!!e&&!!e["legend"]}function WP(e){return!!e&&!!e["format"]}function HP(e){return!!e["op"]}function GP(e,t={}){let n=e.field;const r=t.prefix;let i=t.suffix;if(XP(e))n="count_*";else{let r;t.nofn||(HP(e)?r=e.op:tB(e.bin)?(r=eB(e.bin),i=(t.binSuffix||"")+(t.suffix||"")):e.aggregate?r=String(e.aggregate):e.timeUnit&&(r=String(e.timeUnit))),r&&(n=n?`${r}_${n}`:r)}return i&&(n=`${n}_${i}`),r&&(n=`${r}_${n}`),t.forAs?n:t.expr?uT(n,t.expr):sT(n)}function YP(e){switch(e.type){case"nominal":case"ordinal":case"geojson":return!0;case"quantitative":return!!e.bin;case"temporal":return!1}throw new Error(IB.invalidFieldType(e.type))}function VP(e){return!YP(e)}function XP(e){return"count"===e.aggregate}function JP(e,t){const{field:n,bin:r,timeUnit:i,aggregate:o}=e;if("count"===o)return t.countTitle;if(tB(r))return n+" (binned)";if(i){const e=gP(i).join("-");return`${n} (${e})`}return o?`${oT(o)} of ${n}`:n}function QP(e,t){const n=e.aggregate||e.timeUnit||tB(e.bin)&&"bin";return n?n.toUpperCase()+"("+e.field+")":e.field}const KP=(e,t)=>{switch(t.fieldTitle){case"plain":return e.field;case"functional":return QP(e,t);default:return JP(e,t)}};let ZP=KP;function eI(e){ZP=e}function tI(){eI(KP)}function nI(e,t,{allowDisabling:n}){const r=rI(e)||{},i=r.title;return n?fT(i,e.title,iI(e,t)):i||e.title||iI(e,t)}function rI(e){return UP(e)&&e.axis?e.axis:qP(e)&&e.legend?e.legend:JB(e)&&e.header?e.header:void 0}function iI(e,t){return ZP(e,t)}function oI(e){if(WP(e)&&e.format)return e.format;{const t=rI(e)||{};return t.format}}function aI(e,t){if(e.timeUnit)return"temporal";if(tB(e.bin))return"quantitative";switch(ZR(t)){case"continuous":return"quantitative";case"discrete":return"nominal";case"flexible":return"nominal";default:return"quantitative"}}function uI(e){return BP(e)?e:TP(e)?e.condition:void 0}function sI(e){return BP(e)?e:TP(e)?e.condition:void 0}function cI(e,t){if(Object(H["I"])(e)||Object(H["F"])(e)||Object(H["C"])(e)){const n=Object(H["I"])(e)?"string":Object(H["F"])(e)?"number":"boolean";return BB(IB.primitiveChannelDef(t,n,e)),{value:e}}return BP(e)?lI(e,t):TP(e)?Object.assign({},e,{condition:lI(e.condition,t)}):e}function lI(e,t){if(e.aggregate&&!vT(e.aggregate)){const{aggregate:t}=e,n=P(e,["aggregate"]);BB(IB.invalidAggregate(e.aggregate)),e=n}if(e.timeUnit&&(e=Object.assign({},e,{timeUnit:xP(e.timeUnit)})),tB(e.bin)&&(e=Object.assign({},e,{bin:fI(e.bin,t)})),nB(e.bin)&&!NN(PR,t)&&BB(`Channel ${t} should not be used with "binned" bin`),PP(e)){const t=CP(e.type);e.type!==t&&(e=Object.assign({},e,{type:t})),"quantitative"!==e.type&&yT(e.aggregate)&&(BB(IB.invalidFieldTypeForCountAggregate(e.type,e.aggregate)),e=Object.assign({},e,{type:"quantitative"}))}else if(!xR(t)){const n=aI(e,t);BB(IB.missingFieldType(t,n)),e=Object.assign({},e,{type:n})}if(PP(e)){const{compatible:n,warning:r}=hI(e,t);n||BB(r)}return e}function fI(e,t){return Object(H["C"])(e)?{maxbins:iB(t)}:e.maxbins||e.step?e:Object.assign({},e,{maxbins:iB(t)})}const dI={compatible:!0};function hI(e,t){const n=e.type;if("geojson"===n&&"shape"!==t)return{compatible:!1,warning:`Channel ${t} should not be used with a geojson data.`};switch(t){case"row":case"column":return VP(e)?{compatible:!1,warning:IB.facetChannelShouldBeDiscrete(t)}:dI;case"x":case"y":case"color":case"fill":case"stroke":case"text":case"detail":case"key":case"tooltip":case"href":return dI;case"longitude":case"longitude2":case"latitude":case"latitude2":return n!==kP?{compatible:!1,warning:`Channel ${t} should be used with a quantitative field only, not ${e.type} field.`}:dI;case"opacity":case"fillOpacity":case"strokeOpacity":case"strokeWidth":case"size":case"x2":case"y2":return"nominal"!==n||e["sort"]?dI:{compatible:!1,warning:`Channel ${t} should not be used with an unsorted discrete field.`};case"shape":return NN(["ordinal","nominal","geojson"],e.type)?dI:{compatible:!1,warning:"Shape channel should be used with only either discrete or geojson data."};case"order":return"nominal"!==e.type||"sort"in e?dI:{compatible:!1,warning:"Channel order is inappropriate for nominal field, which has no inherent order."}}throw new Error("channelCompatability not implemented for channel "+t)}function pI(e){return"quantitative"===e.type||tB(e.bin)}function gI(e){return"temporal"===e.type||!!e.timeUnit}function mI(e,{timeUnit:t,type:n,time:r,undefinedIfExprNotRequired:i}){let o;return $B(e)?o=XB(e,!0):(Object(H["I"])(e)||Object(H["F"])(e))&&(t||"temporal"===n)&&(o=tP(t)?XB({[t]:e},!0):rP(t)?mI(e,{timeUnit:sP(t)}):`datetime(${JSON.stringify(e)})`),o?r?`time(${o})`:o:i?void 0:JSON.stringify(e)}function vI(e,t){const{timeUnit:n,type:r}=e;return t.map(e=>{const t=mI(e,{timeUnit:n,type:r,undefinedIfExprNotRequired:!0});return void 0!==t?{signal:t}:e})}function bI(e,t){return tB(e.bin)?JR(t)&&NN(["ordinal","nominal"],e.type):(console.warn("Only use this method with binned field defs"),!1)}function yI(e,t){const n=e&&e[t];return!!n&&(Object(H["B"])(n)?BN(n,e=>!!e.field):BP(n)||TP(n))}function xI(e){return BN(pR,t=>{if(yI(e,t)){const n=e[t];if(Object(H["B"])(n))return BN(n,e=>!!e.aggregate);{const e=uI(n);return e&&!!e.aggregate}}return!1})}function wI(e,t){const n=[],r=[],i=[],o=[],a={};return AI(e,(u,s)=>{if(BP(u)){const{field:c,aggregate:l,timeUnit:f,bin:d}=u,h=P(u,["field","aggregate","timeUnit","bin"]);if(l||f||d){const e=rI(u),p=e&&e.title,g=GP(u,{forAs:!0}),m=Object.assign({},p?[]:{title:nI(u,t,{allowDisabling:!0})},h,{field:g}),v=s===MT.X||s===MT.Y;if(l&&vT(l)){const e={op:l,as:g};c&&(e.field=c),o.push(e)}else if(PP(u)&&tB(d)){if(r.push({bin:d,field:c,as:g}),n.push(GP(u,{binSuffix:"end"})),bI(u,s)&&n.push(GP(u,{binSuffix:"range"})),v){const e={field:g+"_end",type:wP.QUANTITATIVE};a[s+"2"]=e}m["bin"]="binned",xR(s)||(m["type"]=wP.QUANTITATIVE)}else if(f){i.push({timeUnit:f,field:c,as:g});const e=bP(f,t.axis.shortTimeLabels).join(" ");YR(s)?m["legend"]=Object.assign({format:e},m["legend"]):v?m["axis"]=Object.assign({format:e},m["axis"]):"text"!==s&&"tooltip"!==s||(m["format"]=m["format"]||e)}l||n.push(g),a[s]=m}else n.push(c),a[s]=e[s]}else a[s]=e[s]}),{bins:r,timeUnits:i,aggregate:o,groupby:n,encoding:a}}function OI(e,t,n){const r=QR(t,n);if(!r)return!1;if("binned"===r){const n=e["x2"===t?"x":"y"];return!(!BP(n)||!BP(e[t])||"binned"!==n.bin)}return!0}function EI(e,t){return QN(e).reduce((n,r)=>{if(!yR(r))return BB(IB.invalidEncodingChannel(r)),n;if(!OI(e,r,t))return BB(IB.incompatibleChannel(r,t)),n;if("size"===r&&"line"===t){const t=sI(e[r]);if(t&&t.aggregate)return BB(IB.LINE_WITH_VARYING_SIZE),n}if("color"===r&&("fill"in e||"stroke"in e))return BB(IB.droppingColor("encoding",{fill:"fill"in e,stroke:"stroke"in e})),n;const i=e[r];if("detail"===r||"order"===r&&!Object(H["B"])(i)&&!LP(i)||"tooltip"===r&&Object(H["B"])(i))i&&(n[r]=(Object(H["B"])(i)?i:[i]).reduce((e,t)=>(BP(t)?e.push(lI(t,r)):BB(IB.emptyFieldDef(t,r)),e),[]));else{if("tooltip"===r&&null===i)n[r]=null;else if(!BP(i)&&!LP(i)&&!NP(i))return BB(IB.emptyFieldDef(i,r)),n;n[r]=cI(i,r)}return n},{})}function kI(e){return e&&(!!e.x&&!!e.x2||!!e.y&&!!e.y2)}function _I(e){const t=[];for(const n of QN(e))if(yI(e,n)){const r=e[n];(Object(H["B"])(r)?r:[r]).forEach(e=>{BP(e)?t.push(e):TP(e)&&t.push(e.condition)})}return t}function AI(e,t,n){if(e)for(const r of QN(e))Object(H["B"])(e[r])?e[r].forEach(e=>{t.call(n,e,r)}):t.call(n,e[r],r)}function SI(e,t,n,r){return e?QN(e).reduce((n,i)=>{const o=e[i];return Object(H["B"])(o)?o.reduce((e,n)=>t.call(r,e,n,i),n):t.call(r,n,o,i)},n):n}function jI(e,t,n,r=!0){const i=e.map(({fieldPrefix:e,titlePrefix:n})=>({field:e+t.field,type:t.type,title:n+(r?" of "+t.field:"")}));return{tooltip:[...i,..._I(n)]}}function CI(e,t,n,r,i){const{scale:o,axis:a}=n;return({partName:u,mark:s,positionPrefix:c,endPositionPrefix:l,extraEncoding:f={}})=>{const d=a&&void 0!==a.title?void 0:void 0!==n.title?n.title:n.field;return DI(e,u,i,{mark:s,encoding:Object.assign({[t]:Object.assign({field:c+"_"+n.field,type:n.type},d?{title:d}:{},o?{scale:o}:{},a?{axis:a}:{})},Object(H["I"])(l)?{[t+"2"]:{field:l+"_"+n.field,type:n.type}}:{},r,f)})}}function DI(e,t,n,r){const{clip:i,color:o,opacity:a}=e,u=e.type;return e[t]||void 0===e[t]&&n[t]?[Object.assign({},r,{mark:Object.assign({},n[t],i?{clip:i}:{},o?{color:o}:{},a?{opacity:a}:{},OB(r.mark)?r.mark:{type:r.mark},{style:`${u}-${t}`},Object(H["C"])(e[t])?{}:e[t])})]:[]}function FI(e,t,n){const{encoding:r}=e,i="vertical"===t?"y":"x",o=r[i],a=r[i+"2"],u=r[i+"Error"],s=r[i+"Error2"];return{continuousAxisChannelDef:MI(o,n),continuousAxisChannelDef2:MI(a,n),continuousAxisChannelDefError:MI(u,n),continuousAxisChannelDefError2:MI(s,n),continuousAxis:i}}function MI(e,t){if(BP(e)&&e&&e.aggregate){const{aggregate:n}=e,r=P(e,["aggregate"]);return n!==t&&BB(IB.errorBarContinuousAxisHasCustomizedAggregate(n,t)),r}return e}function zI(e,t){const{mark:n,encoding:r}=e;if(BP(r.x)&&VP(r.x)){if(BP(r.y)&&VP(r.y)){if(void 0===r.x.aggregate&&r.y.aggregate===t)return"vertical";if(void 0===r.y.aggregate&&r.x.aggregate===t)return"horizontal";if(r.x.aggregate===t&&r.y.aggregate===t)throw new Error("Both x and y cannot have aggregate");return OB(n)&&n.orient?n.orient:"vertical"}return"horizontal"}if(BP(r.y)&&VP(r.y))return"vertical";throw new Error("Need a valid continuous axis for "+t+"s")}function NI(e,t,n){return Object.assign({},e,{encoding:SI(e.encoding,(e,r,i)=>(t.indexOf(i)>-1?e[i]=r:BB(IB.incompatibleChannel(i,n)),e),{})})}const TI="boxplot",RI={box:1,median:1,outliers:1,rule:1,ticks:1},BI=QN(RI),PI=["x","y","color","detail","opacity","size"];function II(e,t){e=NI(e,PI,TI);const{mark:n,encoding:r,selection:i,projection:o}=e,a=P(e,["mark","encoding","selection","projection"]),u=OB(n)?n:{type:n};i&&BB(IB.selectionNotSupported("boxplot"));const s=u.extent||t.boxplot.extent,c=fT(u.size,t.boxplot.size),l=!Object(H["F"])(s),{transform:f,continuousAxisChannelDef:d,continuousAxis:h,groupby:p,encodingWithoutContinuousAxis:g,ticksOrient:m,tooltipEncoding:v}=$I(e,s,t),{color:b,size:y}=g,x=P(g,["color","size"]),w=e=>CI(u,h,d,e,t.boxplot),O=w(x),E=w(g),k=w(Object.assign({},x,y?{size:y}:{})),_={type:"tick",color:"black",opacity:1,orient:m},A=Object.assign({type:"bar"},c?{size:c}:{}),S=Object.assign({type:"tick"},Object(H["G"])(t.boxplot.median)&&t.boxplot.median.color?{color:t.boxplot.median.color}:{},c?{size:c}:{},{orient:m}),j=[...O({partName:"rule",mark:"rule",positionPrefix:"lower_whisker",endPositionPrefix:"lower_box",extraEncoding:v}),...O({partName:"rule",mark:"rule",positionPrefix:"upper_box",endPositionPrefix:"upper_whisker",extraEncoding:v}),...O({partName:"ticks",mark:_,positionPrefix:"lower_whisker",extraEncoding:v}),...O({partName:"ticks",mark:_,positionPrefix:"upper_whisker",extraEncoding:v}),...E({partName:"box",mark:A,positionPrefix:"lower_box",endPositionPrefix:"upper_box",extraEncoding:v}),...k({partName:"median",mark:S,positionPrefix:"mid_box",extraEncoding:v})];let C=[];if(!l){const e="datum.lower_box_"+d.field,n="datum.upper_box_"+d.field,r=`(${n} - ${e})`,i=`${e} - ${s} * ${r}`,o=`${n} + ${s} * ${r}`,a="datum."+d.field;C=DI(u,"outliers",t.boxplot,{transform:[{window:LI(d.field),frame:[null,null],groupby:p},{filter:`(${a} < ${i}) || (${a} > ${o})`}],mark:"point",encoding:Object.assign({[h]:{field:d.field,type:d.type}},x)})}return C.length>0?Object.assign({},a,{layer:[{transform:f,layer:j},...C]}):Object.assign({},a,{transform:(a.transform||[]).concat(f),layer:j})}function LI(e){return[{op:"q1",field:e,as:"lower_box_"+e},{op:"q3",field:e,as:"upper_box_"+e}]}function $I(e,t,n){const r=zI(e,TI),{continuousAxisChannelDef:i,continuousAxis:o}=FI(e,r,TI),a=i.field,u=!Object(H["F"])(t),s=[...LI(a),{op:"median",field:a,as:"mid_box_"+a},{op:"min",field:a,as:(u?"lower_whisker_":"min_")+a},{op:"max",field:a,as:(u?"upper_whisker_":"max_")+a}],c=u?[]:[{calculate:`datum.upper_box_${a} - datum.lower_box_${a}`,as:"iqr_"+a},{calculate:`min(datum.upper_box_${a} + datum.iqr_${a} * ${t}, datum.max_${a})`,as:"upper_whisker_"+a},{calculate:`max(datum.lower_box_${a} - datum.iqr_${a} * ${t}, datum.min_${a})`,as:"lower_whisker_"+a}],l=e.encoding,f=o,d=(l[f],P(l,["symbol"===typeof f?f:f+""])),{bins:h,timeUnits:p,aggregate:g,groupby:m,encoding:v}=wI(d,n),b="vertical"===r?"horizontal":"vertical",y=[{fieldPrefix:"upper_whisker_",titlePrefix:u?"Max":"Upper Whisker"},{fieldPrefix:"upper_box_",titlePrefix:"Q3"},{fieldPrefix:"mid_box_",titlePrefix:"Median"},{fieldPrefix:"lower_box_",titlePrefix:"Q1"},{fieldPrefix:"lower_whisker_",titlePrefix:u?"Min":"Lower Whisker"}],x=jI(y,i,v);return{transform:[...h,...p,{aggregate:[...g,...s],groupby:m},...c],groupby:m,continuousAxisChannelDef:i,continuousAxis:o,encodingWithoutContinuousAxis:v,ticksOrient:b,tooltipEncoding:x}}const UI="errorbar",qI={ticks:1,rule:1},WI=QN(qI);function HI(e,t){const{transform:n,continuousAxisChannelDef:r,continuousAxis:i,encodingWithoutContinuousAxis:o,ticksOrient:a,markDef:u,outerSpec:s,tooltipEncoding:c}=QI(e,UI,t),l=CI(u,i,r,o,t.errorbar),f={type:"tick",orient:a};return Object.assign({},s,{transform:n,layer:[...l({partName:"ticks",mark:f,positionPrefix:"lower",extraEncoding:c}),...l({partName:"ticks",mark:f,positionPrefix:"upper",extraEncoding:c}),...l({partName:"rule",mark:"rule",positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:c})]})}function GI(e,t){const{encoding:n}=e;if(YI(n))return{orient:zI(e,t),inputType:"raw"};const r=VI(n),i=XI(n),o=n.x,a=n.y;if(r){if(i)throw new Error(t+" cannot be both type aggregated-upper-lower and aggregated-error");const e=n.x2,r=n.y2;if(BP(e)&&BP(r))throw new Error(t+" cannot have both x2 and y2");if(BP(e)){if(BP(o)&&VP(o))return{orient:"horizontal",inputType:"aggregated-upper-lower"};throw new Error("Both x and x2 have to be quantitative in "+t)}if(BP(r)){if(BP(a)&&VP(a))return{orient:"vertical",inputType:"aggregated-upper-lower"};throw new Error("Both y and y2 have to be quantitative in "+t)}throw new Error("No ranged axis")}{const e=n.xError,r=n.xError2,i=n.yError,u=n.yError2;if(BP(r)&&!BP(e))throw new Error(t+" cannot have xError2 without xError");if(BP(u)&&!BP(i))throw new Error(t+" cannot have yError2 without yError");if(BP(e)&&BP(i))throw new Error(t+" cannot have both xError and yError with both are quantiative");if(BP(e)){if(BP(o)&&VP(o))return{orient:"horizontal",inputType:"aggregated-error"};throw new Error("All x, xError, and xError2 (if exist) have to be quantitative")}if(BP(i)){if(BP(a)&&VP(a))return{orient:"vertical",inputType:"aggregated-error"};throw new Error("All y, yError, and yError2 (if exist) have to be quantitative")}throw new Error("No ranged axis")}}function YI(e){return(BP(e.x)||BP(e.y))&&!BP(e.x2)&&!BP(e.y2)&&!BP(e.xError)&&!BP(e.xError2)&&!BP(e.yError)&&!BP(e.yError2)}function VI(e){return BP(e.x2)||BP(e.y2)}function XI(e){return BP(e.xError)||BP(e.xError2)||BP(e.yError)||BP(e.yError2)}const JI=["x","y","x2","y2","xError","yError","xError2","yError2","color","detail","opacity"];function QI(e,t,n){e=NI(e,JI,t);const{mark:r,encoding:i,selection:o,projection:a}=e,u=P(e,["mark","encoding","selection","projection"]),s=OB(r)?r:{type:r};o&&BB(IB.selectionNotSupported(t));const{orient:c,inputType:l}=GI(e,t),{continuousAxisChannelDef:f,continuousAxisChannelDef2:d,continuousAxisChannelDefError:h,continuousAxisChannelDefError2:p,continuousAxis:g}=FI(e,c,t),{errorBarSpecificAggregate:m,postAggregateCalculates:v,tooltipSummary:b,tooltipTitleWithFieldName:y}=KI(s,f,d,h,p,l,t,n),x=g,w=(i[x],"x"===g?"x2":"y2"),O=(i[w],"x"===g?"xError":"yError"),E=(i[O],"x"===g?"xError2":"yError2"),k=(i[E],P(i,["symbol"===typeof x?x:x+"","symbol"===typeof w?w:w+"","symbol"===typeof O?O:O+"","symbol"===typeof E?E:E+""])),{bins:_,timeUnits:A,aggregate:S,groupby:j,encoding:C}=wI(k,n),D=[...S,...m],F="raw"!==l?[]:j,M=jI(b,f,C,y);return{transform:[...u.transform||[],..._,...A,...D.length?[{aggregate:D,groupby:F}]:[],...v],groupby:F,continuousAxisChannelDef:f,continuousAxis:g,encodingWithoutContinuousAxis:C,ticksOrient:"vertical"===c?"horizontal":"vertical",markDef:s,outerSpec:u,tooltipEncoding:M}}function KI(e,t,n,r,i,o,a,u){let s=[],c=[];const l=t.field;let f,d=!1;if("raw"===o){const t=e.center?e.center:e.extent?"iqr"===e.extent?"median":"mean":u.errorbar.center,n=e.extent?e.extent:"mean"===t?"stderr":"iqr";if("median"===t!==("iqr"===n)&&BB(IB.errorBarCenterIsUsedWithWrongExtent(t,n,a)),"stderr"===n||"stdev"===n)s=[{op:n,field:l,as:"extent_"+l},{op:t,field:l,as:"center_"+l}],c=[{calculate:`datum.center_${l} + datum.extent_${l}`,as:"upper_"+l},{calculate:`datum.center_${l} - datum.extent_${l}`,as:"lower_"+l}],f=[{fieldPrefix:"center_",titlePrefix:oT(t)},{fieldPrefix:"upper_",titlePrefix:ZI(t,n,"+")},{fieldPrefix:"lower_",titlePrefix:ZI(t,n,"-")}],d=!0;else{let t,r,i;e.center&&e.extent&&BB(IB.errorBarCenterIsNotNeeded(e.extent,a)),"ci"===n?(t="mean",r="ci0",i="ci1"):(t="median",r="q1",i="q3"),s=[{op:r,field:l,as:"lower_"+l},{op:i,field:l,as:"upper_"+l},{op:t,field:l,as:"center_"+l}],f=[{fieldPrefix:"upper_",titlePrefix:nI({field:l,aggregate:i,type:"quantitative"},u,{allowDisabling:!1})},{fieldPrefix:"lower_",titlePrefix:nI({field:l,aggregate:r,type:"quantitative"},u,{allowDisabling:!1})},{fieldPrefix:"center_",titlePrefix:nI({field:l,aggregate:t,type:"quantitative"},u,{allowDisabling:!1})}]}}else{(e.center||e.extent)&&BB(IB.errorBarCenterAndExtentAreNotNeeded(e.center,e.extent)),"aggregated-upper-lower"===o?(f=[],c=[{calculate:"datum."+n.field,as:"upper_"+l},{calculate:"datum."+l,as:"lower_"+l}]):"aggregated-error"===o&&(f=[{fieldPrefix:"",titlePrefix:l}],c=[{calculate:`datum.${l} + datum.${r.field}`,as:"upper_"+l}],i?c.push({calculate:`datum.${l} + datum.${i.field}`,as:"lower_"+l}):c.push({calculate:`datum.${l} - datum.${r.field}`,as:"lower_"+l}));for(const e of c)f.push({fieldPrefix:e.as.substring(0,6),titlePrefix:e.calculate.replace(new RegExp("datum.","g"),"")})}return{postAggregateCalculates:c,errorBarSpecificAggregate:s,tooltipSummary:f,tooltipTitleWithFieldName:d}}function ZI(e,t,n){return oT(e)+" "+n+" "+t}const eL="errorband",tL={band:1,borders:1},nL=QN(tL);function rL(e,t){const{transform:n,continuousAxisChannelDef:r,continuousAxis:i,encodingWithoutContinuousAxis:o,markDef:a,outerSpec:u,tooltipEncoding:s}=QI(e,eL,t),c=CI(a,i,r,o,t.errorband),l=void 0!==e.encoding.x&&void 0!==e.encoding.y;let f={type:l?"area":"rect"},d={type:l?"line":"rule"};const h=Object.assign({},a.interpolate?{interpolate:a.interpolate}:{},a.tension&&a.interpolate?{interpolate:a.tension}:{});return l?(f=Object.assign({},f,h),d=Object.assign({},d,h)):a.interpolate?BB(IB.errorBand1DNotSupport("interpolate")):a.tension&&BB(IB.errorBand1DNotSupport("tension")),Object.assign({},u,{transform:n,layer:[...c({partName:"band",mark:f,positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:s}),...c({partName:"borders",mark:d,positionPrefix:"lower",extraEncoding:s}),...c({partName:"borders",mark:d,positionPrefix:"upper",extraEncoding:s})]})}const iL={};function oL(e,t,n){iL[e]={normalizer:t,parts:n}}function aL(e){delete iL[e]}function uL(){return QN(iL)}function sL(e){if(e in iL)return iL[e].parts;throw new Error("Unregistered composite mark "+e)}function cL(e,t){const n=OB(e.mark)?e.mark.type:e.mark;if(n in iL){const{normalizer:r}=iL[n];return r(e,t)}throw new Error(`Invalid mark type "${n}"`)}oL(TI,II,BI),oL(UI,HI,WI),oL(eL,rL,nL);const lL=["shortTimeLabels"],fL=["gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength"],dL={gradientHorizontalMaxLength:200,gradientHorizontalMinLength:100,gradientVerticalMaxLength:200,gradientVerticalMinLength:64},hL={clipHeight:1,columnPadding:1,columns:1,cornerRadius:1,direction:1,fillColor:1,format:1,gradientLength:1,gradientOpacity:1,gradientStrokeColor:1,gradientStrokeWidth:1,gradientThickness:1,gridAlign:1,labelAlign:1,labelBaseline:1,labelColor:1,labelFont:1,labelFontSize:1,labelFontWeight:1,labelLimit:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,offset:1,orient:1,padding:1,rowPadding:1,strokeColor:1,strokeWidth:1,symbolFillColor:1,symbolOffset:1,symbolOpacity:1,symbolSize:1,symbolStrokeColor:1,symbolStrokeWidth:1,symbolType:1,tickCount:1,title:1,titleAlign:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontWeight:1,titleLimit:1,titleOpacity:1,titlePadding:1,type:1,values:1,zindex:1},pL=Object.assign({},hL,{opacity:1,shape:1,stroke:1,fill:1,size:1,encode:1}),gL=eT(hL),mL=eT(pL);var vL;(function(e){e.LINEAR="linear",e.BIN_LINEAR="bin-linear",e.LOG="log",e.POW="pow",e.SQRT="sqrt",e.TIME="time",e.UTC="utc",e.SEQUENTIAL="sequential",e.QUANTILE="quantile",e.QUANTIZE="quantize",e.THRESHOLD="threshold",e.ORDINAL="ordinal",e.BIN_ORDINAL="bin-ordinal",e.POINT="point",e.BAND="band"})(vL||(vL={}));const bL={linear:"numeric",log:"numeric",pow:"numeric",sqrt:"numeric","bin-linear":"bin-linear",time:"time",utc:"time",sequential:"sequential",ordinal:"ordinal","bin-ordinal":"bin-ordinal",point:"ordinal-position",band:"ordinal-position",quantile:"discretizing",quantize:"discretizing",threshold:"discretizing"},yL=QN(bL);function xL(e,t){const n=bL[e],r=bL[t];return n===r||"ordinal-position"===n&&"time"===r||"ordinal-position"===r&&"time"===n}const wL={linear:0,log:1,pow:1,sqrt:1,time:0,utc:0,point:10,band:11,"bin-linear":0,sequential:0,ordinal:0,"bin-ordinal":0,quantile:0,quantize:0,threshold:0};function OL(e){return wL[e]}const EL=["linear","bin-linear","log","pow","sqrt","time","utc"],kL=Object(H["eb"])(EL),_L=["quantile","quantize","threshold"],AL=Object(H["eb"])(_L),SL=EL.concat(["sequential","quantile","quantize","threshold"]),jL=Object(H["eb"])(SL),CL=["ordinal","bin-ordinal","point","band"],DL=Object(H["eb"])(CL),FL=Object(H["eb"])(["bin-linear","bin-ordinal"]),ML=["time","utc"];function zL(e){return e in DL}function NL(e){return e in FL}function TL(e){return e in jL}function RL(e){return e in kL}function BL(e){return e in AL}const PL={textXRangeStep:90,rangeStep:20,pointPadding:.5,barBandPaddingInner:.1,rectBandPaddingInner:0,facetSpacing:16,minBandSize:2,minFontSize:8,maxFontSize:40,minOpacity:.3,maxOpacity:.8,minSize:9,minStrokeWidth:1,maxStrokeWidth:4,quantileCount:4,quantizeCount:4};function IL(e){return e&&!!e["name"]}function LL(e){return e&&e["selection"]}const $L={type:1,domain:1,range:1,rangeStep:1,scheme:1,reverse:1,round:1,clamp:1,nice:1,base:1,exponent:1,interpolate:1,zero:1,padding:1,paddingInner:1,paddingOuter:1},UL=eT($L),{type:qL,domain:WL,range:HL,rangeStep:GL,scheme:YL}=$L,VL=P($L,["type","domain","range","rangeStep","scheme"]),XL=eT(VL),JL=n$();function QL(e,t){switch(t){case"type":case"domain":case"reverse":case"range":return!0;case"scheme":return NN(["sequential","ordinal","bin-ordinal","quantile","quantize","threshold"],e);case"interpolate":return NN(["linear","bin-linear","pow","log","sqrt","utc","time"],e);case"round":return RL(e)||"band"===e||"point"===e;case"padding":return RL(e)||NN(["point","band"],e);case"paddingOuter":case"rangeStep":return NN(["point","band"],e);case"paddingInner":return"band"===e;case"clamp":return RL(e)||"sequential"===e;case"nice":return RL(e)||"sequential"===e||"quantize"===e;case"exponent":return"pow"===e;case"base":return"log"===e;case"zero":return TL(e)&&!NN(["log","time","utc","bin-linear","threshold","quantile"],e)}throw new Error(`Invalid scale property ${t}.`)}function KL(e,t){switch(t){case"interpolate":case"scheme":return fR(e)?void 0:IB.cannotUseScalePropertyWithNonColor(e);case"type":case"domain":case"range":case"base":case"exponent":case"nice":case"padding":case"paddingInner":case"paddingOuter":case"rangeStep":case"reverse":case"round":case"clamp":case"zero":return}throw new Error(`Invalid scale property "${t}".`)}function ZL(e,t,n){return NN([wP.ORDINAL,wP.NOMINAL],t)?void 0===e||zL(e):t===wP.TEMPORAL?NN([vL.TIME,vL.UTC,vL.SEQUENTIAL,void 0],e):t!==wP.QUANTITATIVE||NN(n?[vL.BIN_LINEAR,vL.BIN_ORDINAL,vL.LINEAR]:[vL.LOG,vL.POW,vL.SQRT,vL.QUANTILE,vL.QUANTIZE,vL.THRESHOLD,vL.LINEAR,vL.SEQUENTIAL,void 0],e)}function e$(e,t){switch(e){case MT.X:case MT.Y:return RL(t)||NN(["band","point"],t);case MT.SIZE:case MT.STROKEWIDTH:case MT.OPACITY:case MT.FILLOPACITY:case MT.STROKEOPACITY:return RL(t)||BL(t)||NN(["band","point"],t);case MT.COLOR:case MT.FILL:case MT.STROKE:return"band"!==t;case MT.SHAPE:return"ordinal"===t}return!1}function t$(e,t,n){return JL[r$(e,t,n)]}function n$(){const e={};for(const t of pR)for(const n of QN(OP))for(const r of yL)for(const i of[!1,!0]){const o=r$(t,n,i);e$(t,r)&&ZL(r,n,i)&&(e[o]=e[o]||[],e[o].push(r))}return e}function r$(e,t,n){const r=e+"_"+t;return n?r+"_bin":r}const i$="_vgsid_",o$={single:{on:"click",fields:[i$],resolve:"global",empty:"all"},multi:{on:"click",fields:[i$],toggle:"event.shiftKey",resolve:"global",empty:"all"},interval:{on:"[mousedown, window:mouseup] > window:mousemove!",encodings:["x","y"],translate:"[mousedown, window:mouseup] > window:mousemove!",zoom:"wheel!",mark:{fill:"#333",fillOpacity:.125,stroke:"white"},resolve:"global"}};function a$(e){const{anchor:t,frame:n,offset:r,orient:i,color:o}=e,a=P(e,["anchor","frame","offset","orient","color"]),u=Object.assign({},a,o?{fill:o}:{}),s=Object.assign({},t?{anchor:t}:{},r?{offset:r}:{},i?{orient:i}:{});return{mark:u,nonMark:s}}const u$={width:200,height:200};function s$(e){return e&&!!e["scheme"]}const c$={padding:5,timeFormat:"%b %d, %Y",countTitle:"Count of Records",invalidValues:"filter",view:u$,mark:DB,area:{},bar:FB,circle:{},geoshape:{},line:{},point:{},rect:{},rule:{color:"black"},square:{},text:{color:"black"},tick:MB,trail:{},boxplot:{size:14,extent:1.5,box:{},median:{color:"white"},outliers:{},rule:{},ticks:null},errorbar:{center:"mean",rule:!0,ticks:!1},errorband:{band:{opacity:.3},borders:!1},scale:PL,projection:{},axis:{},axisX:{},axisY:{minExtent:30},axisLeft:{},axisRight:{},axisTop:{},axisBottom:{},axisBand:{},legend:dL,selection:o$,style:{},title:{}};function l$(e){return $N(jN(c$),e)}const f$=["view",...wB],d$=["padding","numberFormat","timeFormat","countTitle","stack","scale","selection","invalidValues","overlay"],h$=Object.assign({view:["width","height"]},CB);function p$(e){e=jN(e);for(const t of d$)delete e[t];if(e.axis)for(const t of lL)delete e.axis[t];if(e.legend){for(const t of lL)delete e.legend[t];for(const t of fL)delete e.legend[t]}if(e.mark)for(const t of jB)delete e.mark[t];for(const t of f$){for(const r of jB)delete e[t][r];const n=h$[t];if(n)for(const r of n)delete e[t][r];g$(e,t)}for(const t of uL())delete e[t];g$(e,"title","group-title");for(const t in e)Object(H["G"])(e[t])&&0===QN(e[t]).length&&delete e[t];return QN(e).length>0?e:void 0}function g$(e,t,n,r){const i="title"===t?a$(e.title).mark:r?e[t][r]:e[t];"view"===t&&(n="cell");const o=Object.assign({},i,e.style[t]);QN(o).length>0&&(e.style[n||t]=o),r||delete e[t]}function m$(e){return!!e["url"]}function v$(e){return!!e["values"]}function b$(e){return!!e["name"]&&!m$(e)&&!v$(e)}const y$="main",x$="raw",w$={titleAnchor:"anchor",titleAngle:"angle",titleBaseline:"baseline",titleColor:"color",titleFont:"font",titleFontSize:"fontSize",titleFontWeight:"fontWeight",titleLimit:"limit",titlePadding:"offset"},O$={labelAngle:"angle",labelColor:"color",labelFont:"font",labelFontSize:"fontSize",labelLimit:"limit",labelPadding:"offset"},E$=QN(w$),k$=QN(O$);function _$(e){return!!e&&("count"===e["op"]||!!e["field"])&&!!e["op"]}function A$(e){return!!e&&Object(H["B"])(e)}const S$={zero:1,center:1,normalize:1};function j$(e){return!!S$[e]}const C$=[uB,aB,pB,cB,mB,vB,sB,lB,fB],D$=[uB,aB];function F$(e){const t=e.x,n=e.y;if(BP(t)&&BP(n))if("quantitative"===t.type&&"quantitative"===n.type){if(t.stack)return"x";if(n.stack)return"y";if(!!t.aggregate!==!!n.aggregate)return t.aggregate?"x":"y"}else{if("quantitative"===t.type)return"x";if("quantitative"===n.type)return"y"}else{if(BP(t)&&"quantitative"===t.type)return"x";if(BP(n)&&"quantitative"===n.type)return"y"}}function M$(e,t,n){const r=OB(e)?e.type:e;if(!NN(C$,r))return null;const i=F$(t);if(!i)return null;const o=t[i],a=IP(o)?GP(o,{}):void 0,u="x"===i?"y":"x",s=t[u],c=IP(s)?GP(s,{}):void 0,l=RR.reduce((e,n)=>{if(yI(t,n)){const r=t[n];(Object(H["B"])(r)?r:[r]).forEach(t=>{const r=sI(t);if(r.aggregate)return;const i=IP(r)?GP(r,{}):void 0;(!i||i!==c&&i!==a)&&e.push({channel:n,fieldDef:r})})}return e},[]);if(0===l.length)return null;let f;return f=void 0!==o.stack?o.stack:NN(D$,r)?fT(n,"zero"):n,f&&j$(f)?(o.scale&&o.scale.type&&o.scale.type!==vL.LINEAR&&BB(IB.cannotStackNonLinearScale(o.scale.type)),yI(t,i===zT?TT:RT)?(void 0!==o.stack&&BB(IB.cannotStackRangedMark(i)),null):(o.aggregate&&!NN(wT,o.aggregate)&&BB(IB.stackNonSummativeAggregate(o.aggregate)),{groupbyChannel:s?u:void 0,fieldChannel:i,impute:xB(r),stackBy:l,offset:f})):null}function z$(e){return N$(e)||T$(e)}function N$(e){return void 0!==e["vconcat"]}function T$(e){return void 0!==e["hconcat"]}function R$(e){return void 0!==e["layer"]}function B$(e){return void 0!==e["repeat"]}function P$(e,t){return I$(e,t)}function I$(e,t){if(QB(e))return L$(e,t);if(R$(e))return q$(e,t);if(B$(e))return W$(e,t);if(N$(e))return H$(e,t);if(T$(e))return G$(e,t);if(eU(e)){const n=yI(e.encoding,HT),r=yI(e.encoding,GT);return n||r?Y$(e,t):Q$(e,t)}throw new Error(IB.INVALID_SPEC)}function L$(e,t){const{spec:n}=e,r=P(e,["spec"]);return Object.assign({},r,{spec:I$(n,t)})}function $$(e){const{parentEncoding:t,encoding:n}=e;if(t&&n){const e=QN(t).reduce((e,t)=>(n[t]&&e.push(t),e),[]);e.length>0&&BB(IB.encodingOverridden(e))}const r=Object.assign({},t||{},n||{});return QN(r).length>0?r:void 0}function U$(e){const{parentProjection:t,projection:n}=e;return t&&n&&BB(IB.projectionOverridden({parentProjection:t,projection:n})),n||t}function q$(e,t,n,r){const{layer:i,encoding:o,projection:a}=e,u=P(e,["layer","encoding","projection"]),s=$$({parentEncoding:n,encoding:o}),c=U$({parentProjection:r,projection:a});return Object.assign({},u,{layer:i.map(e=>R$(e)?q$(e,t,s,c):Q$(e,t,s,c))})}function W$(e,t){const{spec:n}=e,r=P(e,["spec"]);return Object.assign({},r,{spec:I$(n,t)})}function H$(e,t){const{vconcat:n}=e,r=P(e,["vconcat"]);return Object.assign({},r,{vconcat:n.map(e=>I$(e,t))})}function G$(e,t){const{hconcat:n}=e,r=P(e,["hconcat"]);return Object.assign({},r,{hconcat:n.map(e=>I$(e,t))})}function Y$(e,t){const n=e.encoding,{row:r,column:i}=n,o=P(n,["row","column"]),{mark:a,width:u,projection:s,height:c,selection:l,encoding:f}=e,d=P(e,["mark","width","projection","height","selection","encoding"]);return Object.assign({},d,{facet:Object.assign({},r?{row:r}:{},i?{column:i}:{}),spec:Q$(Object.assign({},s?{projection:s}:{},{mark:a},u?{width:u}:{},c?{height:c}:{},{encoding:o},l?{selection:l}:{}),t)})}function V$(e){return kB(e.mark)}function X$(e,t,n){return"transparent"===e.point?{opacity:0}:e.point?Object(H["G"])(e.point)?e.point:{}:void 0!==e.point?null:t.point||n.shape?Object(H["G"])(t.point)?t.point:{}:null}function J$(e,t){return e.line?!0===e.line?{}:e.line:void 0!==e.line?null:t.line?!0===t.line?{}:t.line:null}function Q$(e,t,n,r){const{encoding:i,projection:o}=e,a=OB(e.mark)?e.mark.type:e.mark;if(n||r){const a=U$({parentProjection:r,projection:o}),u=$$({parentEncoding:n,encoding:i});return Q$(Object.assign({},e,a?{projection:a}:{},u?{encoding:u}:{}),t)}return V$(e)?"line"===a&&(i.x2||i.y2)?(BB(IB.lineWithRange(!!i.x2,!!i.y2)),Q$(Object.assign({mark:"rule"},e),t,n,r)):xB(a)?Z$(e,t):e:cL(e,t)}function K$(e){const{point:t,line:n}=e,r=P(e,["point","line"]);return QN(r).length>1?r:r.type}function Z$(e,t={}){const{selection:n,projection:r,encoding:i,mark:o}=e,a=P(e,["selection","projection","encoding","mark"]),u=OB(o)?o:{type:o},s=X$(u,t[u.type],i),c="area"===u.type&&J$(u,t[u.type]);if(!s&&!c)return Object.assign({},e,{mark:K$(u)});const l=[Object.assign({},n?{selection:n}:{},{mark:K$(Object.assign({},u,"area"===u.type?{opacity:.7}:{})),encoding:FN(i,["shape"])})],f=M$(u,i,t?t.stack:void 0);let d=i;if(f){const{fieldChannel:e,offset:t}=f;d=Object.assign({},i,{[e]:Object.assign({},i[e],t?{stack:t}:{})})}return c&&l.push(Object.assign({},r?{projection:r}:{},{mark:Object.assign({type:"line"},DN(u,["clip","interpolate","tension"]),c),encoding:d})),s&&l.push(Object.assign({},r?{projection:r}:{},{mark:Object.assign({type:"point",opacity:1,filled:!0},DN(u,["clip"]),s),encoding:d})),Object.assign({},a,{layer:l})}function eU(e){return!!e["mark"]}function tU(e,t){return t.forEach(t=>{const n=["field","type","value","timeUnit","bin","aggregate"].reduce((e,n)=>(void 0!==t[n]&&(e[n]=t[n]),e),{}),r=zN(n);e[r]=e[r]||t}),e}function nU(e,t={}){if(R$(e))e.layer.forEach(e=>{eU(e)?tU(t,_I(e.encoding)):nU(e,t)});else if(QB(e))tU(t,_I(e.facet)),nU(e.spec,t);else if(B$(e))nU(e.spec,t);else if(z$(e)){const n=N$(e)?e.vconcat:e.hconcat;n.forEach(e=>nU(e,t))}else tU(t,_I(e.encoding));return t}function rU(e){return KN(nU(e))}function iU(e,t){return t=t||e.config,!!kB(e.mark)&&null!==M$(e.mark,e.encoding,t?t.stack:void 0)}function oU(e){if(QB(e)||B$(e))return sU(e);if(R$(e))return uU(e);if(eU(e))return aU(e);throw new Error(IB.INVALID_SPEC)}function aU(e){const t=[];return AI(e.encoding,(e,n)=>{BP(e)&&t.push(e.field)}),t}function uU(e){let t=[];return e.layer.map(e=>{t=t.concat(oU(e))}),t}function sU(e){return oU(e.spec)}function cU(e){return e&&e["selection"]}function lU(e){return e&&!!e.field&&void 0!==e.equal}function fU(e){return e&&!!e.field&&void 0!==e.lt}function dU(e){return e&&!!e.field&&void 0!==e.lte}function hU(e){return e&&!!e.field&&void 0!==e.gt}function pU(e){return e&&!!e.field&&void 0!==e.gte}function gU(e){return!!(e&&e.field&&Object(H["B"])(e.range)&&2===e.range.length)}function mU(e){return e&&!!e.field&&(Object(H["B"])(e.oneOf)||Object(H["B"])(e.in))}function vU(e){return e&&!!e.field&&void 0!==e.valid}function bU(e){return mU(e)||lU(e)||gU(e)||fU(e)||hU(e)||dU(e)||pU(e)}function yU(e,t){return mI(e,{timeUnit:t,time:!0})}function xU(e,t){return e.map(e=>yU(e,t))}function wU(e,t=!0){const{field:n,timeUnit:r}=e,i=r?"time("+vP(r,n)+")":GP(e,{expr:"datum"});if(lU(e))return i+"==="+yU(e.equal,r);if(fU(e)){const t=e.lt;return`${i}<${yU(t,r)}`}if(hU(e)){const t=e.gt;return`${i}>${yU(t,r)}`}if(dU(e)){const t=e.lte;return`${i}<=${yU(t,r)}`}if(pU(e)){const t=e.gte;return`${i}>=${yU(t,r)}`}if(mU(e))return`indexof([${xU(e.oneOf,r).join(",")}], ${i}) !== -1`;if(vU(e))return e.valid?`${i}!==null&&!isNaN(${i})`:`${i}===null||isNaN(${i})`;if(gU(e)){const n=e.range[0],o=e.range[1];if(null!==n&&null!==o&&t)return"inrange("+i+", ["+yU(n,r)+", "+yU(o,r)+"])";const a=[];return null!==n&&a.push(`${i} >= ${yU(n,r)}`),null!==o&&a.push(`${i} <= ${yU(o,r)}`),a.length>0?a.join(" && "):"true"}throw new Error("Invalid field predicate: "+JSON.stringify(e))}function OU(e){return bU(e)&&e.timeUnit?Object.assign({},e,{timeUnit:xP(e.timeUnit)}):e}function EU(e){return void 0!==e["filter"]}function kU(e){return e&&void 0!==e["start"]&&void 0!==e["stop"]}function _U(e){return void 0!==e["lookup"]}function AU(e){return void 0!==e["sample"]}function SU(e){return void 0!==e["window"]}function jU(e){return void 0!==e["flatten"]}function CU(e){return void 0!==e["calculate"]}function DU(e){return!!e["bin"]}function FU(e){return void 0!==e["impute"]}function MU(e){return void 0!==e["timeUnit"]}function zU(e){return void 0!==e["aggregate"]}function NU(e){return void 0!==e["stack"]}function TU(e){return void 0!==e["fold"]}function RU(e){return e.map(e=>EU(e)?{filter:AN(e.filter,OU)}:e)}const BU={text:["text"],line:["x","y"],trail:["x","y"],area:["x","y"]},PU={bar:Object(H["eb"])(["row","column","x","y","size","color","fill","stroke","detail"]),line:Object(H["eb"])(["row","column","x","y","color","fill","stroke","color","detail"]),trail:Object(H["eb"])(["row","column","x","y","color","fill","stroke","color","detail","size"]),area:Object(H["eb"])(["row","column","x","y","color","fill","stroke","detail"]),tick:Object(H["eb"])(["row","column","x","y","color","fill","stroke","detail"]),circle:Object(H["eb"])(["row","column","x","y","color","fill","stroke","size","detail"]),square:Object(H["eb"])(["row","column","x","y","color","fill","stroke","size","detail"]),point:Object(H["eb"])(["row","column","x","y","color","fill","stroke","size","detail","shape"]),geoshape:Object(H["eb"])(["row","column","color","fill","stroke","detail","shape"]),text:Object(H["eb"])(["row","column","size","color","fill","stroke","text"])};function IU(e,t=BU,n=PU){const r=OB(e.mark)?e.mark.type:e.mark,i=e.encoding,o=t[r],a=n[r];for(const u in o)if(!(o[u]in i))return'Missing encoding channel "'+o[u]+'" for mark "'+r+'"';for(const u in i)if(!a[u])return'Encoding channel "'+u+'" is not supported by mark type "'+r+'"';return r!==uB||i.x||i.y?null:"Missing both x and y for bar"}function LU(e){const{align:t,center:n,bounds:r,spacing:i}=e||{};return{align:t,bounds:r,center:n,spacing:i}}function $U(e){return Object(H["I"])(e)?{type:e}:e||{}}function UU(e,t,n=!0){const r=Object.assign({type:"pad"},$U(t),$U(e));return"fit"===r.type&&(n||(BB(IB.FIT_NON_SINGLE),r.type="pad")),r}const qU=["background","padding"];function WU(e){return qU.reduce((t,n)=>(e&&void 0!==e[n]&&(t[n]=e[n]),t),{})}function HU(e){return!!e["signal"]}function GU(e){return!!e["step"]}function YU(e){return!Object(H["B"])(e)&&("fields"in e&&!("data"in e))}function VU(e){return!Object(H["B"])(e)&&("fields"in e&&"data"in e)}function XU(e){return!Object(H["B"])(e)&&("field"in e&&"data"in e)}const JU={opacity:1,fill:1,fillOpacity:1,stroke:1,strokeCap:1,strokeWidth:1,strokeOpacity:1,strokeDash:1,strokeDashOffset:1,strokeJoin:1,strokeMiterLimit:1,size:1,shape:1,interpolate:1,tension:1,orient:1,align:1,baseline:1,text:1,dir:1,dx:1,dy:1,ellipsis:1,limit:1,radius:1,theta:1,angle:1,font:1,fontSize:1,fontWeight:1,fontStyle:1,cursor:1,href:1,tooltip:1,cornerRadius:1},QU=eT(JU);function KU(e,t){return Object(H["B"])(e)?e.map(e=>iI(e,t)).join(", "):e}function ZU(e,t,n,r={header:!1}){const i=e.combine(),{orient:o,scale:a,title:u,zindex:s}=i,c=P(i,["orient","scale","title","zindex"]);if(QN(c).forEach(e=>{const n=_T[e];n&&n!==t&&"both"!==n&&delete c[e]}),"grid"===t){if(!c.grid)return;if(c.encode){const{grid:e}=c.encode;c.encode=Object.assign({},e?{grid:e}:{}),0===QN(c.encode).length&&delete c.encode}return Object.assign({scale:a,orient:o},c,{domain:!1,labels:!1,maxExtent:0,minExtent:0,ticks:!1,zindex:fT(s,0)})}{if(!r.header&&e.mainExtracted)return;if(c.encode){for(const t of kT)e.hasAxisPart(t)||delete c.encode[t];0===QN(c.encode).length&&delete c.encode}const t=KU(u,n);return Object.assign({scale:a,orient:o,grid:!1},t?{title:t}:{},c,{zindex:fT(s,1)})}}function eq(e,t){const{x:n=[],y:r=[]}=e;return[...n.map(e=>ZU(e,"main",t)),...n.map(e=>ZU(e,"grid",t)),...r.map(e=>ZU(e,"main",t)),...r.map(e=>ZU(e,"grid",t))].filter(e=>e)}function tq(e,t,n){for(const r of n){const n=rq(r,t.markDef,t.config);void 0!==n&&(e[r]={value:n})}return e}function nq(e){return[].concat(e.type,e.style||[])}function rq(e,t,n,{skipGeneralMarkConfig:r=!1}={}){return fT(iq(e,t,n.style),n[t.type][e],r?void 0:n.mark[e])}function iq(e,t,n){const r=nq(t);let i;for(const o of r){const t=n[o],r=e;t&&void 0!==t[r]&&(i=t[r])}return i}function oq(e,t,n,r){const i=aq(e,t,r);if(tB(e.bin)){const t=GP(e,{expr:n}),o=GP(e,{expr:n,binSuffix:"end"});return{signal:cq(t,o,i,r)}}if("quantitative"===e.type)return{signal:""+uq(GP(e,{expr:n,binSuffix:"range"}),i)};if(gI(e)){const i=$P(e)&&e["scale"]&&e["scale"].type===vL.UTC;return{signal:lq(GP(e,{expr:n}),e.timeUnit,t,r.text.shortTimeLabels,r.timeFormat,i,!0)}}return{signal:"''+"+GP(e,{expr:n})}}function aq(e,t,n){if(!gI(e))return t||(e.type===kP?n.numberFormat:void 0)}function uq(e,t){return`format(${e}, "${t||""}")`}function sq(e,t,n){return uq(e,t||n.numberFormat)}function cq(e,t,n,r){return`${e} === null || isNaN(${e}) ? "null" : ${sq(e,n,r)} + " - " + ${sq(t,n,r)}`}function lq(e,t,n,r,i,o,a=!1){return!t||n?(n=n||i,n||a?`${o?"utc":"time"}Format(${e}, '${n}')`:void 0):yP(t,e,r,o)}function fq(e,t){return(Object(H["B"])(e)?e:[e]).reduce((e,n)=>(e.field.push(GP(n,t)),e.order.push(n.sort||"ascending"),e),{field:[],order:[]})}function dq(e,t){const n=[...e];return t.forEach(e=>{for(const t of n)if(MN(t)===MN(e))return;n.push(e)}),n}function hq(e,t){return e!==t&&t?e?e+", "+t:t:e}function pq(e,t){if(Object(H["B"])(e.value)&&Object(H["B"])(t.value))return{explicit:e.explicit,value:dq(e.value,t.value)};if(!Object(H["B"])(e.value)&&!Object(H["B"])(t.value))return{explicit:e.explicit,value:hq(e.value,t.value)};throw new Error("It should never reach here")}class gq{constructor(e,t){this.debugName=t,this._children=[],this._parent=null,e&&(this.parent=e)}clone(){throw new Error("Cannot clone node")}hash(){return void 0===this._hash&&(this._hash=hT()),this._hash}producedFields(){return new Set}dependentFields(){return new Set}get parent(){return this._parent}set parent(e){this._parent=e,e.addChild(this)}get children(){return this._children}numChildren(){return this._children.length}addChild(e,t){this._children.indexOf(e)>-1?console.warn("Attempt to add the same child twice."):void 0!==t?this._children.splice(t,0,e):this._children.push(e)}removeChild(e){const t=this._children.indexOf(e);return this._children.splice(t,1),t}remove(){let e=this._parent.removeChild(this);for(const t of this._children)t._parent=this._parent,this._parent.addChild(t,e++)}insertAsParentOf(e){const t=e.parent;t.removeChild(this),this.parent=t,e.parent=this}swapWithParent(){const e=this._parent,t=e.parent;for(const n of this._children)n.parent=e;this._children=[],e.removeChild(this),e.parent.removeChild(e),this.parent=t,e.parent=this}}class mq extends gq{constructor(e,t,n,r){super(e,t),this.type=n,this.refCounts=r,this._source=this._name=t,this.refCounts&&!(this._name in this.refCounts)&&(this.refCounts[this._name]=0)}clone(){const e=new this.constructor;return e.debugName="clone_"+this.debugName,e._source=this._source,e._name="clone_"+this._name,e.type=this.type,e.refCounts=this.refCounts,e.refCounts[e._name]=0,e}getSource(){return this.refCounts[this._name]++,this._source}isRequired(){return!!this.refCounts[this._name]}setSource(e){this._source=e}}function vq(e){let t=[];return"Identifier"===e.type?[e.name]:"Literal"===e.type?[e.value]:("MemberExpression"===e.type&&(t=t.concat(vq(e.object)),t=t.concat(vq(e.property))),t)}function bq(e){return"MemberExpression"===e.object.type?bq(e.object):"datum"===e.object.name}function yq(e){const t=eA(e),n=new Set;return t.visit(e=>{"MemberExpression"===e.type&&bq(e)&&n.add(vq(e).slice(1).join("."))}),n}class xq extends gq{constructor(e,t){super(e),this.transform=t,this._dependentFields=yq(this.transform.calculate)}clone(){return new xq(null,jN(this.transform))}static parseAllForSortIndex(e,t){return t.forEachFieldDef((t,n)=>{if($P(t)&&A$(t.sort)){const{field:r,timeUnit:i}=t,o=t.sort,a=o.map((e,t)=>`${wU({field:r,timeUnit:i,equal:e})} ? ${t} : `).join("")+o.length;e=new xq(e,{calculate:a,as:wq(t,n,{forAs:!0})})}}),e}producedFields(){return new Set([this.transform.as])}dependentFields(){return this._dependentFields}assemble(){return{type:"formula",expr:this.transform.calculate,as:this.transform.as}}hash(){return"Calculate "+zN(this.transform)}}function wq(e,t,n){return GP(e,Object.assign({prefix:t,suffix:"sort_index"},n||{}))}const Oq=["row","column"],Eq=["header","footer"];function kq(e){return"top"===e||"left"===e?"header":"footer"}function _q(e,t){const n=e.component.layoutHeaders[t].title,r=e.config?e.config:void 0,i=e.component.layoutHeaders[t].facetFieldDef?e.component.layoutHeaders[t].facetFieldDef:void 0;return{name:t+"-title",type:"group",role:t+"-title",title:Object.assign({text:n,offset:10},"row"===t?{orient:"left"}:{},{style:"guide-title"},Fq(r,i,E$,w$))}}function Aq(e,t){const n=e.component.layoutHeaders[t],r=[];for(const i of Eq)if(n[i])for(const o of n[i])r.push(Dq(e,t,i,n,o));return r}function Sq(e){return e=(e%360+360)%360,(e+90)%180===0?{}:e<90||270<e?{align:{value:"right"}}:135<=e&&e<225?{align:{value:"left"}}:{}}function jq(e){return e=(e%360+360)%360,45<=e&&e<=135?{baseline:"top"}:{baseline:"middle"}}function Cq(e,t){const{sort:n}=e;return _$(n)?{field:GP(n,{expr:"datum"}),order:n.order||"ascending"}:Object(H["B"])(n)?{field:wq(e,t,{expr:"datum"}),order:"ascending"}:{field:GP(e,{expr:"datum"}),order:n||"ascending"}}function Dq(e,t,n,r,i){if(i){let o=null;const{facetFieldDef:a}=r;if(a&&i.labels){const{header:n={}}=a,{format:r,labelAngle:i}=n,u=e.config?e.config:void 0,s=Object.assign({},Sq(i));o=Object.assign({text:oq(a,r,"parent",e.config),offset:10},"row"===t?{orient:"left"}:{},{style:"guide-label"},void 0!==i?{angle:i}:{},jq(i),Fq(u,a,k$,O$),QN(s).length>0?{encode:{update:s}}:{})}const u=i.axes,s=u&&u.length>0;if(o||s){const c="row"===t?"height":"width";return Object.assign({name:e.getName(`${t}_${n}`),type:"group",role:`${t}-${n}`},r.facetFieldDef?{from:{data:e.getName(t+"_domain")},sort:Cq(a,t)}:{},o?{title:o}:{},i.sizeSignal?{encode:{update:{[c]:i.sizeSignal}}}:{},s?{axes:u}:{})}}return null}function Fq(e,t,n,r){const i={};for(const o of n)e&&e.header&&e.header[o]&&(i[r[o]]=e.header[o]),t&&t.header&&t.header[o]&&(i[r[o]]=t.header[o]);return i}function Mq(e){return[].concat(zq(e,"width"),zq(e,"height"))}function zq(e,t){const n="width"===t?"x":"y",r=e.component.layoutSize.get(t);if(!r||"merged"===r)return[];const i=e.getSizeSignalRef(t).signal;if("range-step"===r){const t=e.getScaleComponent(n);if(t){const r=t.get("type"),o=t.get("range");if(zL(r)&&GU(o)){const r=e.scaleName(n);if($Y(e.parent)){const t=e.parent.component.resolve;if("independent"===t.scale[n])return[Nq(r,o)]}return[Nq(r,o),{name:i,update:Tq(r,t,`domain('${r}').length`)}]}}throw new Error("layout size is range step although there is no rangeStep.")}return[{name:i,value:r}]}function Nq(e,t){return{name:e+"_step",value:t.step}}function Tq(e,t,n){const r=t.get("type"),i=t.get("padding"),o=fT(t.get("paddingOuter"),i);let a=t.get("paddingInner");return a="band"===r?void 0!==a?a:i:1,`bandspace(${n}, ${a}, ${o}) * ${e}_step`}class Rq extends gq{constructor(e,t){super(e),this.formula=t}clone(){return new Rq(null,jN(this.formula))}static makeFromEncoding(e,t){const n=t.reduceFieldDef((e,t)=>{if(t.timeUnit){const n=GP(t,{forAs:!0});e[n]={as:n,timeUnit:t.timeUnit,field:t.field}}return e},{});return 0===QN(n).length?null:new Rq(e,n)}static makeFromTransform(e,t){return new Rq(e,{[t.field]:{as:t.as,timeUnit:t.timeUnit,field:t.field}})}merge(e){this.formula=Object.assign({},this.formula,e.formula),e.remove()}producedFields(){return new Set(KN(this.formula).map(e=>e.as))}dependentFields(){return new Set(KN(this.formula).map(e=>e.field))}hash(){return"TimeUnit "+zN(this.formula)}assemble(){return KN(this.formula).map(e=>({type:"formula",as:e.as,expr:vP(e.timeUnit,e.field)}))}}const Bq="_fields",Pq={has:e=>{const t=e;return void 0!==t.fields||void 0!==t.encodings},parse:(e,t,n)=>{const r={},i={},o=n.project||(n.project=[]);n.fields={},t.fields&&o.push(...t.fields.map(e=>({field:e,type:"E"})));for(const a of t.encodings||[]){const t=e.fieldDef(a);if(t){let u=t.field;if(t.timeUnit&&(u=e.vgField(a),r[u]={as:u,field:t.field,timeUnit:t.timeUnit}),!i[u]){let r="E";if("interval"===n.type){const t=e.getScaleComponent(a).get("type");TL(t)&&!NL(t)&&(r="R")}else t.bin&&(r="R-RE");o.push(i[u]={field:u,channel:a,type:r})}n.fields[a]=u}else BB(IB.cannotProjectOnChannelWithoutField(a))}QN(r).length&&(n.timeUnit=new Rq(null,r))},signals:(e,t,n)=>{const r=t.name+wW+Bq,i=n.filter(e=>e.name===r);return i.length?n:n.concat({name:r,update:""+JSON.stringify(t.project)})}};var Iq=Pq;const Lq={has:e=>"interval"===e.type&&"global"===e.resolve&&e.bind&&"scales"===e.bind,parse:(e,t,n)=>{const r=nT(n.name),i=n.scales=[];for(const o of n.project){const t=o.channel;if(!JR(t))continue;const n=e.getScaleComponent(t),a=n?n.get("type"):void 0;if(n&&TL(a)&&!NL(a)){if(n.set("domainRaw",{signal:aT(o.field,r)},!0),i.push(t),e.repeater&&e.repeater.row===e.repeater.column){const n=e.getScaleComponent(t===zT?NT:zT);n.set("domainRaw",{signal:aT(o.field,r)},!0)}}else BB(IB.SCALE_BINDINGS_CONTINUOUS)}},topLevelSignals:(e,t,n)=>{const r=t.scales.filter(e=>!n.filter(n=>n.name===LW(t,e,"data")).length).map(e=>({channel:e,signal:LW(t,e,"data")}));if(!e.parent||!r.length)return n;const i=n.filter(e=>e.name===t.name)[0],o=i.update;if(o.indexOf(kW)>=0)i.update="{"+r.map(e=>`${Object(H["ab"])(t.fields[e.channel])}: ${e.signal}`).join(", ")+"}";else for(const a of r){const e=`, ${Object(H["ab"])(t.fields[a.channel])}: ${a.signal}`;o.indexOf(e)<0&&(i.update=o.substring(0,o.length-1)+e+"}")}return n.concat(r.map(e=>({name:e.signal})))},signals:(e,t,n)=>{if(e.parent)for(const r of t.scales){const e=n.filter(e=>e.name===LW(t,r,"data"))[0];e.push="outer",delete e.value,delete e.update}return n}};var $q=Lq;function Uq(e,t){const n=Object(H["ab"])(e.scaleName(t));return`domain(${n})`}const qq="_brush",Wq="_scale_trigger",Hq={signals:(e,t)=>{const n=t.name,r=n+wW+Bq,i=$q.has(t),o=[],a=[],u=[];if(t.translate&&!i){const e="!event.item || event.item.mark.name !== "+Object(H["ab"])(n+qq);Vq(t,(t,n)=>{const r=n.between[0].filter||(n.between[0].filter=[]);r.indexOf(e)<0&&r.push(e)})}for(const s of t.project){const n=s.channel;if(n!==zT&&n!==NT){BB("Interval selections only support x and y encoding channels.");continue}const r=Yq(e,t,n),i=LW(t,n,"data"),c=LW(t,n,"visual"),l=Object(H["ab"])(e.scaleName(n)),f=e.getScaleComponent(n).get("type"),d=TL(f)?"+":"";o.push(...r),a.push(i),u.push({scaleName:e.scaleName(n),expr:`(!isArray(${i}) || (${d}invert(${l}, ${c})[0] === ${d}${i}[0] && ${d}invert(${l}, ${c})[1] === ${d}${i}[1]))`})}return i||o.push({name:n+Wq,update:u.map(e=>e.expr).join(" && ")+` ? ${n+Wq} : {}`}),o.concat({name:n+wW,on:[{events:a.map(e=>({signal:e})),update:a.join(" && ")+` ? {unit: ${PW(e)}, fields: ${r}, `+`values: [${a.join(", ")}]} : null`}]})},modifyExpr:(e,t)=>{const n=t.name+wW;return n+", "+("global"===t.resolve?"true":`{unit: ${PW(e)}}`)},marks:(e,t,n)=>{const r=t.name,{xi:i,yi:o}=$W(t),a=`data(${Object(H["ab"])(t.name+xW)})`;if($q.has(t))return n;const u={x:null!==i?{signal:r+"_x[0]"}:{value:0},y:null!==o?{signal:r+"_y[0]"}:{value:0},x2:null!==i?{signal:r+"_x[1]"}:{field:{group:"width"}},y2:null!==o?{signal:r+"_y[1]"}:{field:{group:"height"}}};if("global"===t.resolve)for(const h of QN(u))u[h]=[Object.assign({test:`${a}.length && ${a}[0].unit === ${PW(e)}`},u[h]),{value:0}];const s=t.mark,{fill:c,fillOpacity:l}=s,f=P(s,["fill","fillOpacity"]),d=QN(f).reduce((e,t)=>(e[t]=[{test:[null!==i&&`${r}_x[0] !== ${r}_x[1]`,null!=o&&`${r}_y[0] !== ${r}_y[1]`].filter(e=>e).join(" && "),value:f[t]},{value:null}],e),{});return[{name:r+qq+"_bg",type:"rect",clip:!0,encode:{enter:{fill:{value:c},fillOpacity:{value:l}},update:u}}].concat(n,{name:r+qq,type:"rect",clip:!0,encode:{enter:{fill:{value:"transparent"}},update:Object.assign({},u,d)}})}};var Gq=Hq;function Yq(e,t,n){const r=LW(t,n,"visual"),i=LW(t,n,"data"),o=$q.has(t),a=e.scaleName(n),u=Object(H["ab"])(a),s=e.getScaleComponent(n),c=s?s.get("type"):void 0,l=e.getSizeSignalRef(n===zT?"width":"height").signal,f=n+"(unit)",d=Vq(t,(e,t)=>e.concat({events:t.between[0],update:`[${f}, ${f}]`},{events:t,update:`[${r}[0], clamp(${f}, 0, ${l})]`}));return d.push({events:{signal:t.name+Wq},update:TL(c)&&!NL(c)?`[scale(${u}, ${i}[0]), scale(${u}, ${i}[1])]`:"[0, 0]"}),o?[{name:i,on:[]}]:[{name:r,value:[],on:d},{name:i,on:[{events:{signal:r},update:`${r}[0] === ${r}[1] ? null : invert(${u}, ${r})`}]}]}function Vq(e,t){return e.events.reduce((e,n)=>n.between?t(e,n):(BB(n+" is not an ordered event stream for interval selections"),e),[])}function Xq(e,t){const n=t.name,r=n+wW+Bq,i=t.project,o="(item().isVoronoi ? datum.datum : datum)",a=i.map(t=>{const n=e.fieldDef(t.channel);return n&&n.bin?`[${aT(e.vgField(t.channel,{}),o)}, `+aT(e.vgField(t.channel,{binSuffix:"end"}),o)+"]":""+aT(t.field,o)}).join(", ");return[{name:n+wW,value:{},on:[{events:t.events,update:`datum && item().mark.marktype !== 'group' ? {unit: ${PW(e)}, fields: ${r}, values: [${a}]} : null`,force:!0}]}]}const Jq={signals:Xq,modifyExpr:(e,t)=>{const n=t.name+wW;return n+", "+("global"===t.resolve?"null":`{unit: ${PW(e)}}`)}};var Qq=Jq;const Kq={signals:Xq,modifyExpr:(e,t)=>{const n=t.name+wW;return n+", "+("global"===t.resolve?"true":`{unit: ${PW(e)}}`)}};var Zq=Kq;const eW="voronoi",tW={has:e=>"interval"!==e.type&&e.nearest,marks:(e,t,n)=>{const{x:r,y:i}=$W(t),o=e.mark;if(xB(o))return BB(IB.nearestNotSupportForContinuous(o)),n;const a={name:e.getName(eW),type:"path",from:{data:e.getName("marks")},encode:{enter:{fill:{value:"transparent"},strokeWidth:{value:.35},stroke:{value:"transparent"},isVoronoi:{value:!0}}},transform:[{type:"voronoi",x:{expr:r||!r&&!i?"datum.datum.x || 0":"0"},y:{expr:i||!r&&!i?"datum.datum.y || 0":"0"},size:[e.getSizeSignalRef("width"),e.getSizeSignalRef("height")]}]};let u=0,s=!1;return n.forEach((t,n)=>{const r=t.name||"";r===e.component.mark[0].name?u=n:r.indexOf(eW)>=0&&(s=!0)}),s||n.splice(u+1,0,a),n}};var nW=tW;const rW={has:e=>"single"===e.type&&"global"===e.resolve&&e.bind&&"scales"!==e.bind,topLevelSignals:(e,t,n)=>{const r=t.name,i=t.project,o=t.bind,a=nW.has(t)?"(item().isVoronoi ? datum.datum : datum)":"datum";for(const u of i){const e=nT(`${r}_${u.field}`),i=n.filter(t=>t.name===e);i.length||n.unshift({name:e,value:"",on:[{events:t.events,update:`datum && item().mark.marktype !== 'group' ? ${aT(u.field,a)} : null`}],bind:o[u.field]||o[u.channel]||o})}return n},signals:(e,t,n)=>{const r=t.name,i=t.project,o=n.filter(e=>e.name===r+wW)[0],a=r+wW+Bq,u=i.map(e=>nT(`${r}_${e.field}`)),s=u.map(e=>e+" !== null").join(" && ");return u.length&&(o.update=`${s} ? {fields: ${a}, values: [${u.join(", ")}]} : null`),delete o.value,delete o.on,n}};var iW=rW;const oW="_toggle",aW={has:e=>"multi"===e.type&&e.toggle,signals:(e,t,n)=>n.concat({name:t.name+oW,value:!1,on:[{events:t.events,update:t.toggle}]}),modifyExpr:(e,t,n)=>{const r=t.name+wW,i=t.name+oW;return`${i} ? null : ${r}, `+("global"===t.resolve?i+" ? null : true, ":`${i} ? null : {unit: ${PW(e)}}, `)+`${i} ? ${r} : null`}};var uW=aW;const sW="_translate_anchor",cW="_translate_delta",lW={has:e=>"interval"===e.type&&e.translate,signals:(e,t,n)=>{const r=t.name,i=$q.has(t),o=r+sW,{x:a,y:u}=$W(t);let s=Qj(t.translate,"scope");return i||(s=s.map(e=>(e.between[0].markname=r+qq,e))),n.push({name:o,value:{},on:[{events:s.map(e=>e.between[0]),update:"{x: x(unit), y: y(unit)"+(null!==a?", extent_x: "+(i?Uq(e,zT):`slice(${LW(t,"x","visual")})`):"")+(null!==u?", extent_y: "+(i?Uq(e,NT):`slice(${LW(t,"y","visual")})`):"")+"}"}]},{name:r+cW,value:{},on:[{events:s,update:`{x: ${o}.x - x(unit), y: ${o}.y - y(unit)}`}]}),null!==a&&dW(e,t,zT,"width",n),null!==u&&dW(e,t,NT,"height",n),n}};var fW=lW;function dW(e,t,n,r,i){const o=t.name,a=$q.has(t),u=i.filter(e=>e.name===LW(t,n,a?"data":"visual"))[0],s=o+sW,c=o+cW,l=e.getSizeSignalRef(r).signal,f=e.getScaleComponent(n),d=f.get("type"),h=a&&n===zT?"-":"",p=`${s}.extent_${n}`,g=`${h}${c}.${n} / `+(a?""+l:`span(${p})`),m=a?"log"===d?"panLog":"pow"===d?"panPow":"panLinear":"panLinear",v=`${m}(${p}, ${g}`+(a&&"pow"===d?", "+(f.get("exponent")||1):"")+")";u.on.push({events:{signal:c},update:a?v:`clampRange(${v}, 0, ${l})`})}const hW="_zoom_anchor",pW="_zoom_delta",gW={has:e=>"interval"===e.type&&e.zoom,signals:(e,t,n)=>{const r=t.name,i=$q.has(t),o=r+pW,{x:a,y:u}=$W(t),s=Object(H["ab"])(e.scaleName(zT)),c=Object(H["ab"])(e.scaleName(NT));let l=Qj(t.zoom,"scope");return i||(l=l.map(e=>(e.markname=r+qq,e))),n.push({name:r+hW,on:[{events:l,update:i?"{"+[s?`x: invert(${s}, x(unit))`:"",c?`y: invert(${c}, y(unit))`:""].filter(e=>!!e).join(", ")+"}":"{x: x(unit), y: y(unit)}"}]},{name:o,on:[{events:l,force:!0,update:"pow(1.001, event.deltaY * pow(16, event.deltaMode))"}]}),null!==a&&vW(e,t,"x","width",n),null!==u&&vW(e,t,"y","height",n),n}};var mW=gW;function vW(e,t,n,r,i){const o=t.name,a=$q.has(t),u=i.filter(e=>e.name===LW(t,n,a?"data":"visual"))[0],s=e.getSizeSignalRef(r).signal,c=e.getScaleComponent(n),l=c.get("type"),f=a?Uq(e,n):u.name,d=o+pW,h=`${o}${hW}.${n}`,p=a?"log"===l?"zoomLog":"pow"===l?"zoomPow":"zoomLinear":"zoomLinear",g=`${p}(${f}, ${h}, ${d}`+(a&&"pow"===l?", "+(c.get("exponent")||1):"")+")";u.on.push({events:{signal:d},update:a?g:`clampRange(${g}, 0, ${s})`})}const bW={project:Iq,toggle:uW,scales:$q,translate:fW,zoom:mW,inputs:iW,nearest:nW};function yW(e,t){for(const n in bW)bW[n].has(e)&&t(bW[n])}const xW="_store",wW="_tuple",OW="_modify",EW="_selection_domain_",kW="vlSelectionResolve";function _W(e,t){const n={},r=e.config.selection;t&&(t=jN(t));for(let i in t){if(!t.hasOwnProperty(i))continue;const o=t[i],a=r[o.type];for(const e in a)"encodings"===e&&o.fields||"fields"===e&&o.encodings||("mark"===e&&(o[e]=Object.assign({},a[e],o[e])),void 0!==o[e]&&!0!==o[e]||(o[e]=a[e]||o[e]));i=nT(i);const u=n[i]=Object.assign({},o,{name:i,events:Object(H["I"])(o.on)?Qj(o.on,"scope"):o.on});yW(u,t=>{t.parse&&t.parse(e,o,u)})}return n}function AW(e,t){return TW(e,(n,r)=>{const i=n.name;let o=r.modifyExpr(e,n);t.push(...r.signals(e,n)),yW(n,r=>{r.signals&&(t=r.signals(e,n,t)),r.modifyExpr&&(o=r.modifyExpr(e,n,o))}),t.push({name:i+OW,on:[{events:{signal:i+wW},update:`modify(${Object(H["ab"])(n.name+xW)}, ${o})`}]})}),t}function SW(e,t){if(e.component.selection&&QN(e.component.selection).length){const n=Object(H["ab"])(e.getName("cell"));t.unshift({name:"facet",value:{},on:[{events:Qj("mousemove","scope"),update:`isTuple(facet) ? facet : group(${n}).datum`}]})}return t}function jW(e,t){let n=!1;if(TW(e,(r,i)=>{const o=r.name,a=Object(H["ab"])(o+xW),u=t.filter(e=>e.name===o);u.length||t.push({name:r.name,update:`${kW}(${a}`+("global"===r.resolve?")":`, ${Object(H["ab"])(r.resolve)})`)}),n=!0,i.topLevelSignals&&(t=i.topLevelSignals(e,r,t)),yW(r,n=>{n.topLevelSignals&&(t=n.topLevelSignals(e,r,t))})}),n){const e=t.filter(e=>"unit"===e.name);e.length||t.unshift({name:"unit",value:{},on:[{events:"mousemove",update:"isTuple(group()) ? group() : unit"}]})}return t}function CW(e,t){return TW(e,e=>{const n=t.filter(t=>t.name===e.name+xW);n.length||t.push({name:e.name+xW})}),t}function DW(e,t){return TW(e,(n,r)=>{t=r.marks?r.marks(e,n,t):t,yW(n,r=>{r.marks&&(t=r.marks(e,n,t))})}),t}function FW(e,t){for(const n of e.children)LY(n)&&(t=DW(n,t));return t}function MW(e,t,n){const r=[];function i(t){const i=nT(t),o=e.getSelectionComponent(i,t),a=Object(H["ab"])(i+xW);if(o.timeUnit){const t=n||e.component.data.raw,r=o.timeUnit.clone();t.parent?r.insertAsParentOf(t):t.parent=r}return"none"!==o.empty&&r.push(a),`vlSelectionTest(${a}, datum`+("global"===o.resolve?")":`, ${Object(H["ab"])(o.resolve)})`)}const o=rT(t,i);return(r.length?"!("+r.map(e=>`length(data(${e}))`).join(" || ")+") || ":"")+`(${o})`}function zW(e){return e.signal.indexOf(EW)>=0}function NW(e,t){const n=JSON.parse(t.signal.replace(EW,"")),r=nT(n.selection),i=n.encoding;let o=n.field,a=e.component.selection&&e.component.selection[r];if(!a){if(a=e.getSelectionComponent(r,n.selection),i||o){if(i&&!o){const e=a.project.filter(e=>e.channel===i);!e.length||e.length>1?(o=a.project[0].field,BB((e.length?"Multiple ":"No ")+`matching ${Object(H["ab"])(i)} encoding found for selection ${Object(H["ab"])(n.selection)}. `+`Using "field": ${Object(H["ab"])(o)}.`)):o=e[0].field}}else o=a.project[0].field,a.project.length>1&&BB(`A "field" or "encoding" must be specified when using a selection as a scale domain. Using "field": ${Object(H["ab"])(o)}.`);return{signal:aT(o,r)}}return BB('Use "bind": "scales" to setup a binding for scales and selections within the same view.'),{signal:"null"}}function TW(e,t){const n=e.component.selection;for(const r in n)if(n.hasOwnProperty(r)){const e=n[r];t(e,RW(e.type))}}function RW(e){switch(e){case"single":return Zq;case"multi":return Qq;case"interval":return Gq}return null}function BW(e){let t=e.parent;while(t){if($Y(t))break;t=t.parent}return t}function PW(e){let t=Object(H["ab"])(e.name);const n=BW(e);return n&&(t+=(n.facet.row?` + '_' + (${aT(n.vgField("row"),"facet")})`:"")+(n.facet.column?` + '_' + (${aT(n.vgField("column"),"facet")})`:"")),t}function IW(e){let t=!1;return TW(e,e=>{t=t||e.project.some(e=>e.field===i$)}),t}function LW(e,t,n){const r=e._signalNames||(e._signalNames={});if(r[t]&&r[t][n])return r[t][n];r[t]=r[t]||{};const i=nT(e.name+"_"+("visual"===n?t:e.fields[t]));let o=i,a=1;while(r[o])o=`${i}_${a++}`;return r[o]=r[t][n]=o}function $W(e){let t=null,n=null,r=null,i=null;return e.project.forEach((e,o)=>{e.channel===zT?(t=e,n=o):e.channel===NT&&(r=e,i=o)}),{x:t,xi:n,y:r,yi:i}}function UW(e,t,n){return rT(t,t=>Object(H["I"])(t)?t:cU(t)?MW(e,t.selection,n):wU(t))}function qW(e,t,n,r,i,o,a){return BP(t)&&o&&e===o.fieldChannel?YW(t,r,{suffix:"end"}):JW(e,t,n,r,i,o,a)}function WW(e,t,n,r,i,o,a){return BP(t)&&o&&e.charAt(0)===o.fieldChannel.charAt(0)?YW(t,r,{suffix:"start"}):JW(e,n,void 0,r,i,o,a)}function HW(e,t){const n=e+"Offset",r=t[n];if(r)return r}function GW(e,t,n,r){const i="start"===n?void 0:"end";return YW(e,t,{binSuffix:i},r?{offset:r}:{})}function YW(e,t,n,r){const i=Object.assign({},t?{scale:t}:{},{field:GP(e,n)});return r?Object.assign({},i,r):i}function VW(e,t=!0){return{scale:e,band:t}}function XW(e,t,n){const r=GP(t,{expr:"datum"}),i=void 0!==n?GP(n,{expr:"datum"}):GP(t,{binSuffix:"end",expr:"datum"});return{signal:`scale("${e}", (${r} + ${i}) / 2)`}}function JW(e,t,n,r,i,o,a){if(t){if(BP(t)){if(PP(t)){if(tB(t.bin))return NN([zT,NT],e)&&t.type===kP?o&&o.impute?YW(t,r,{binSuffix:"mid"}):XW(r,t):YW(t,r,bI(t,e)?{binSuffix:"range"}:{});if(nB(t.bin)){if(BP(n))return XW(r,t,n);{const t=e===zT?TT:RT;BB(IB.channelRequiredForBinned(t))}}}if(i){const e=i.get("type");if(zL(e))return"band"===e?YW(t,r,{binSuffix:"range"},{band:.5}):YW(t,r,{binSuffix:"range"})}return YW(t,r,{})}if(LP(t)){const n=t.value;return NN(["x","x2"],e)&&"width"===n?{field:{group:"width"}}:NN(["y","y2"],e)&&"height"===n?{field:{group:"height"}}:{value:n}}}return Object(H["E"])(a)?a():a}function QW(e,t){const n=[],r={};function i(i,o){const a=wR(o);o!==a&&(i=Object.assign({},i,{type:e[a].type}));const u=nI(i,t,{allowDisabling:!1}),s=KW(i,t).signal;r[u]||n.push(`${Object(H["ab"])(u)}: ${s}`),r[u]=!0}return AI(e,(e,t)=>{BP(e)?i(e,t):TP(e)&&i(e.condition,t)}),n.length?{signal:`{${n.join(", ")}}`}:void 0}function KW(e,t){if(e){if(LP(e))return{value:e.value};if(PP(e))return oq(e,oI(e),"datum",t)}}function ZW(e){return Object.assign({},e,{mult:.5})}function eH(e){if(!1!==e.get("zero"))return!0;const t=e.domains;return!!Object(H["B"])(t)&&BN(t,e=>Object(H["B"])(e)&&2===e.length&&e[0]<=0&&e[1]>=0)}function tH(e,t,n,r,i){return()=>{if(Object(H["I"])(e)){if(n){const e=r.get("type");if(NN([vL.LOG,vL.TIME,vL.UTC],e))"bar"!==i&&"area"!==i||BB(IB.nonZeroScaleUsedWithLengthMark(i,t,{scaleType:e}));else{if(eH(r))return{scale:n,value:0};"bar"!==i&&"area"!==i||BB(IB.nonZeroScaleUsedWithLengthMark(i,t,{zeroFalse:!1===r.explicit.zero}))}}return"zeroOrMin"===e?"x"===t?{value:0}:{field:{group:"height"}}:"x"===t?{field:{group:"width"}}:{value:0}}return e}}function nH(e){return"transparent"!==e&&null!==e&&void 0!==e}function rH(e){const{markDef:t,encoding:n,config:r}=e,{filled:i,type:o}=t,a={fill:rq("fill",t,r),stroke:rq("stroke",t,r),color:rq("color",t,r)},u=NN(["bar","point","circle","square","geoshape"],o)?"transparent":void 0,s=fT(t.fill,a.fill,u),c=fT(t.stroke,a.stroke),l=i?"fill":"stroke",f=Object.assign({},s?{fill:{value:s}}:{},c?{stroke:{value:c}}:{});return n.fill||n.stroke?(t.color&&BB(IB.droppingColor("property",{fill:"fill"in n,stroke:"stroke"in n})),Object.assign({},lH("fill",e,{defaultValue:fT(s,u)}),lH("stroke",e,{defaultValue:c}))):n.color?Object.assign({},f,lH("color",e,{vgChannel:l,defaultValue:fT(t[l],t.color,a[l],a.color,i?u:void 0)})):nH(t.fill)||nH(t.stroke)?(t.color&&BB(IB.droppingColor("property",{fill:"fill"in t,stroke:"stroke"in t})),f):t.color?Object.assign({},f,{[l]:{value:t.color}}):nH(a.fill)||nH(a.stroke)?f:a.color?Object.assign({},u?{fill:{value:"transparent"}}:{},{[l]:{value:a.color}}):{}}function iH(e,t){const{fill:n,stroke:r}=rH(e);return Object.assign({},aH(e.markDef,t),oH(e,"fill",n),oH(e,"stroke",r),lH("opacity",e),lH("fillOpacity",e),lH("strokeOpacity",e),lH("strokeWidth",e),dH(e),hH(e,"href"))}function oH(e,t,n){const{config:r,mark:i}=e;if(r.invalidValues&&n&&!xB(i)){const r=sH(e,{invalid:!0,channels:XR});if(r)return{[t]:[{test:r,value:null},...Object(H["i"])(n)]}}return n?{[t]:n}:{}}function aH(e,t){return QU.reduce((n,r)=>(void 0!==e[r]&&"ignore"!==t[r]&&(n[r]={value:e[r]}),n),{})}function uH(e,t){if(void 0!==t)return{[e]:{value:t}}}function sH(e,{invalid:t=!1,channels:n}){const r=n.reduce((t,n)=>{const r=e.getScaleComponent(n);if(r){const i=r.get("type"),o=e.vgField(n,{expr:"datum"});o&&TL(i)&&(t[o]=!0)}return t},{}),i=QN(r);if(i.length>0){const e=t?"||":"&&";return i.map(n=>{const r=t?"===":"!==";return`${n} ${r} null ${e} ${t?"":"!"}isNaN(${n})`}).join(` ${e} `)}}function cH(e){if("filter"===e.config.invalidValues){const t=sH(e,{channels:["x","y"]});if(t)return{defined:{signal:t}}}return{}}function lH(e,t,n={}){const{markDef:r,encoding:i}=t,{vgChannel:o=e}=n,{defaultValue:a=r[o]}=n,u=n.defaultRef||(void 0!==a?{value:a}:void 0),s=i[e];return fH(t,s,o,n=>JW(e,n,void 0,t.scaleName(e),t.getScaleComponent(e),null,u))}function fH(e,t,n,r){const i=t&&t.condition,o=r(t);if(i){const t=Object(H["B"])(i)?i:[i],a=t.map(t=>{const n=r(t),i=DP(t)?MW(e,t.selection):UW(e,t.test);return Object.assign({test:i},n)});return{[n]:[...a,...void 0!==o?[o]:[]]}}return void 0!==o?{[n]:o}:{}}function dH(e){const{encoding:t,markDef:n,config:r}=e,i=t.tooltip;return Object(H["B"])(i)?{tooltip:QW({tooltip:i},r)}:fH(e,i,"tooltip",i=>{const o=KW(i,e.config);if(o)return o;if(null===i)return;const a=fT(n.tooltip,rq("tooltip",n,r));return Object(H["I"])(a)?{value:a}:Object(H["G"])(a)?"encoding"===a.content?QW(t,r):{signal:"datum"}:void 0})}function hH(e,t="text"){const n=e.encoding[t];return fH(e,n,t,t=>KW(t,e.config))}function pH(e,t,n){const r=n.scaleName(t),i="x"===t?"width":"height";if(n.encoding.size||void 0!==n.markDef.size){const o=n.markDef.orient;if(o){const o={[t+"c"]:YW(e,r,{},{band:.5})};if(sI(n.encoding.size))return Object.assign({},o,lH("size",n,{vgChannel:i}));if(LP(n.encoding.size))return Object.assign({},o,lH("size",n,{vgChannel:i}));if(void 0!==n.markDef.size)return Object.assign({},o,{[i]:{value:n.markDef.size}})}else BB(IB.cannotApplySizeToNonOrientedMark(n.markDef.type))}return{[t]:YW(e,r,{binSuffix:"range"}),[i]:VW(r)}}function gH(e,t,n,r){const i="x"===e?"xc":"yc",o="x"===e?"width":"height";return Object.assign({},vH(e,t,n,i),lH("size",t,{defaultRef:r,vgChannel:o}))}function mH(e,t,n,r,i,o){const a={x:o?i:0,x2:o?0:i,y:o?0:i,y2:o?i:0},u=n===zT?TT:RT;return tB(e.bin)?{[u]:GW(e,r,"start",a[n+"2"]),[n]:GW(e,r,"end",a[n])}:nB(e.bin)&&BP(t)?{[u]:YW(e,r,{},{offset:a[n+"2"]}),[n]:YW(t,r,{},{offset:a[n]})}:void BB(IB.channelRequiredForBinned(u))}function vH(e,t,n,r){const{encoding:i,mark:o,stack:a}=t,u=i[e],s=i[e===zT?TT:RT],c=t.scaleName(e),l=t.getScaleComponent(e),f=HW(e,t.markDef),d=u||!i.latitude&&!i.longitude?Object.assign({},qW(e,u,s,c,l,a,tH(n,e,c,l,o)),f?{offset:f}:{}):{field:t.getName(e)};return{[r||e]:d}}function bH(e,t,n){const{encoding:r,mark:i,stack:o}=e,a="x2"===n?"x":"y",u=r[a],s=e.scaleName(a),c=e.getScaleComponent(a),l=HW(n,e.markDef),f=u||!r.latitude&&!r.longitude?Object.assign({},WW(n,u,r[n],s,c,o,tH(t,a,s,c,i)),l?{offset:l}:{}):{field:e.getName(n)};return{[n]:f}}function yH(e,t){return QN(e).reduce((n,r)=>{const i=e[r];return Object.assign({},n,fH(t,i,r,e=>({value:e.value})))},{})}function xH(e,t){if(WY(t)||$Y(t))return"shared";if(qY(t)||UY(t))return NN(PR,e)?"independent":"shared";throw new Error("invalid model type for resolve")}function wH(e,t){const n=e.scale[t],r=NN(PR,t)?"axis":"legend";return"independent"===n?("shared"===e[r][t]&&BB(IB.independentScaleMeansIndependentGuide(t)),"independent"):e[r][t]||"shared"}class OH{constructor(e={},t={}){this.explicit=e,this.implicit=t}clone(){return new OH(jN(this.explicit),jN(this.implicit))}combine(){return Object.assign({},this.explicit,this.implicit)}get(e){return fT(this.explicit[e],this.implicit[e])}getWithExplicit(e){return void 0!==this.explicit[e]?{explicit:!0,value:this.explicit[e]}:void 0!==this.implicit[e]?{explicit:!1,value:this.implicit[e]}:{explicit:!1,value:void 0}}setWithExplicit(e,t){void 0!==t.value&&this.set(e,t.value,t.explicit)}set(e,t,n){return delete this[n?"implicit":"explicit"][e],this[n?"explicit":"implicit"][e]=t,this}copyKeyFromSplit(e,t){void 0!==t.explicit[e]?this.set(e,t.explicit[e],!0):void 0!==t.implicit[e]&&this.set(e,t.implicit[e],!1)}copyKeyFromObject(e,t){void 0!==t[e]&&this.set(e,t[e],!0)}copyAll(e){for(const t of QN(e.combine())){const n=e.getWithExplicit(t);this.setWithExplicit(t,n)}}}function EH(e){return{explicit:!0,value:e}}function kH(e){return{explicit:!1,value:e}}function _H(e){return(t,n,r,i)=>{const o=e(t.value,n.value);return o>0?t:o<0?n:AH(t,n,r,i)}}function AH(e,t,n,r){return e.explicit&&t.explicit&&BB(IB.mergeConflictingProperty(n,r,e.value,t.value)),e}function SH(e,t,n,r,i=AH){return void 0===e||void 0===e.value?t:e.explicit&&!t.explicit?e:t.explicit&&!e.explicit?t:MN(e.value)===MN(t.value)?e:i(e,t,n,r)}class jH extends OH{}function CH(e,t){const n=e.values;if(n)return vI(t,n)}function DH(e){const{legend:t}=e;return fT(t.type,FH(e))}function FH({channel:e,timeUnit:t,scaleType:n,alwaysReturn:r}){if(fR(e)){if(NN(["quarter","month","day"],t))return"symbol";if(RL(n))return r?"gradient":void 0}return r?"symbol":void 0}function MH({legend:e,legendConfig:t,timeUnit:n,channel:r,scaleType:i}){const o=fT(e.orient,t.orient,"right"),a=DH({legend:e,channel:r,timeUnit:n,scaleType:i,alwaysReturn:!0});return fT(e.direction,t[a?"gradientDirection":"symbolDirection"],zH(o,a))}function zH(e,t){switch(e){case"top":case"bottom":return"horizontal";case"left":case"right":case"none":case void 0:return;default:return"gradient"===t?"horizontal":void 0}}function NH({legend:e,legendConfig:t,model:n,channel:r,scaleType:i}){const{gradientHorizontalMaxLength:o,gradientHorizontalMinLength:a,gradientVerticalMaxLength:u,gradientVerticalMinLength:s}=t,c=MH({legend:e,legendConfig:t,channel:r,scaleType:i});if("horizontal"===c){const r=fT(e.orient,t.orient);return"top"===r||"bottom"===r?TH(n,"width",a,o):a}return TH(n,"height",s,u)}function TH(e,t,n,r){const i=e.getSizeSignalRef(t).signal;return{signal:`clamp(${i}, ${n}, ${r})`}}function RH(e){if(NN(["quantile","threshold","log"],e))return"greedy"}function BH(e,t,n){const r=t.getScaleComponent(n).get("type");return fT(e.get("type"),FH({channel:n,scaleType:r,alwaysReturn:!0}))}function PH(e,t,n,r,i){if("symbol"!==BH(i,n,r))return;let o=Object.assign({},tq({},n,SB),rH(n));switch(n.mark){case uB:case fB:case lB:o.shape={value:"square"};break;case mB:case vB:o.shape={value:n.mark};break;case cB:case sB:case gB:case aB:break}const{markDef:a,encoding:u}=n,s=a.filled,c=$H(u.opacity)||a.opacity;if(o.fill)if("fill"===r||s&&r===XT)delete o.fill;else if(o.fill["field"])i.get("symbolFillColor")?delete o.fill:(o.fill={value:"black"},o.fillOpacity={value:c||1});else if(Object(H["B"])(o.fill)){const e=UH(u.fill||u.color)||a.fill||s&&a.color;e&&(o.fill={value:e})}if(o.stroke)if("stroke"===r||!s&&r===XT)delete o.stroke;else if(o.stroke["field"])delete o.stroke;else if(Object(H["B"])(o.stroke)){const e=fT(UH(u.stroke||u.color),a.stroke,s?a.color:void 0);e&&(o.stroke={value:e})}if(r!==YT){const e=UH(u.shape)||a.shape;e&&(o.shape={value:e})}return r!==nR&&c&&(o.opacity={value:c}),o=Object.assign({},o,t),QN(o).length>0?o:void 0}function IH(e,t,n,r,i){if("gradient"!==BH(i,n,r))return;let o={};const a=$H(n.encoding.opacity)||n.markDef.opacity;return a&&(o.opacity={value:a}),o=Object.assign({},o,t),QN(o).length>0?o:void 0}function LH(e,t,n,r,i){const o=n.legend(r),a=n.config;let u={};if(gI(e)){const i=n.getScaleComponent(r).get("type")===vL.UTC,u=lq("datum.value",e.timeUnit,o.format,a.legend.shortTimeLabels,a.timeFormat,i);t=Object.assign({},u?{text:{signal:u}}:{},t)}return u=Object.assign({},u,t),QN(u).length>0?u:void 0}function $H(e){return qH(e,(e,t)=>Math.max(e,t.value))}function UH(e){return qH(e,(e,t)=>fT(e,t.value))}function qH(e,t){return RP(e)?(Object(H["B"])(e.condition)?e.condition:[e.condition]).reduce(t,e.value):LP(e)?e.value:void 0}function WH(e){LY(e)?e.component.legends=HH(e):e.component.legends=JH(e)}function HH(e){const{encoding:t}=e;return[XT,JT,QT,oR,VT,YT,nR,rR,iR].reduce((n,r)=>{const i=t[r];return!e.legend(r)||!e.getScaleComponent(r)||BP(i)&&r===YT&&i.type===jP||(n[r]=VH(e,r)),n},{})}function GH(e,t){switch(t){case XT:const n=e.scaleName(XT);return e.markDef.filled?{fill:n}:{stroke:n};case JT:case QT:case oR:case VT:case YT:case nR:case rR:case iR:return{[t]:e.scaleName(t)}}}function YH(e,t,n,r){switch(t){case"values":return!!n.values;case"title":if("title"===t&&e===r.title)return!0}return e===n[t]}function VH(e,t){const n=e.fieldDef(t),r=e.legend(t),i=new jH({},GH(e,t));for(const u of gL){const o=XH(u,r,t,e);if(void 0!==o){const t=YH(o,u,r,n);(t||void 0===e.config.legend[u])&&i.set(u,o,t)}}const o=r.encoding||{},a=["labels","legend","title","symbols","gradient"].reduce((r,a)=>{const u=yH(o[a]||{},e),s=T[a]?T[a](n,u,e,t,i):u;return void 0!==s&&QN(s).length>0&&(r[a]={update:s}),r},{});return QN(a).length>0&&i.set("encode",a,!!r.encoding),i}function XH(e,t,n,r){const{encoding:i}=r,o=sI(i[n]),a=r.config.legend,{timeUnit:u}=o,s=r.getScaleComponent(n).get("type");switch(e){case"format":return aq(o,t.format,r.config);case"title":return nI(o,r.config,{allowDisabling:!0})||void 0;case"type":return DH({legend:t,channel:n,timeUnit:u,scaleType:s,alwaysReturn:!1});case"direction":return MH({legend:t,legendConfig:a,timeUnit:u,channel:n,scaleType:s});case"labelOverlap":return fT(t.labelOverlap,RH(s));case"gradientLength":return fT(t.gradientLength,a.gradientLength,NH({model:r,legend:t,legendConfig:a,channel:n,scaleType:s}));case"values":return CH(t,o)}return t[e]}function JH(e){const{legends:t,resolve:n}=e.component;for(const r of e.children)WH(r),QN(r.component.legends).forEach(i=>{n.legend[i]=wH(e.component.resolve,i),"shared"===n.legend[i]&&(t[i]=QH(t[i],r.component.legends[i]),t[i]||(n.legend[i]="independent",delete t[i]))});return QN(t).forEach(t=>{for(const r of e.children)r.component.legends[t]&&"shared"===n.legend[t]&&delete r.component.legends[t]}),t}function QH(e,t){if(!e)return t.clone();const n=e.getWithExplicit("orient"),r=t.getWithExplicit("orient");if(n.explicit&&r.explicit&&n.value!==r.value)return;let i=!1;for(const o of mL){const n=SH(e.getWithExplicit(o),t.getWithExplicit(o),o,"legend",(e,t)=>{switch(o){case"title":return pq(e,t);case"type":return i=!0,kH("symbol")}return AH(e,t,o,"legend")});e.setWithExplicit(o,n)}return i&&(((e.implicit||{}).encode||{}).gradient&&iT(e.implicit,["encode","gradient"]),((e.explicit||{}).encode||{}).gradient&&iT(e.explicit,["encode","gradient"])),e}function KH(e){const t=e.component.legends,n={};for(const r of QN(t)){const i=e.getScaleComponent(r),o=MN(i.domains);if(n[o])for(const e of n[o]){const i=QH(e,t[r]);i||n[o].push(t[r])}else n[o]=[t[r].clone()]}return IN(KN(n)).map(e=>{const t=e.combine();if(t.encode&&t.encode.symbols){const e=t.encode.symbols.update;!e.fill||"transparent"===e.fill["value"]||e.stroke||t.stroke||(e.stroke={value:"transparent"})}return t})}function ZH(e){return WY(e)||qY(e)||UY(e)?eG(e):tG(e)}function eG(e){return e.children.reduce((e,t)=>e.concat(t.assembleProjections()),tG(e))}function tG(e){const t=e.component.projection;if(!t||t.merged)return[];const n=t.combine(),{name:r}=n,i=P(n,["name"]),o={signal:`[${t.size.map(e=>e.signal).join(", ")}]`},a=t.data.reduce((t,n)=>{const r=HU(n)?n.signal:`data('${e.lookupDataSource(n)}')`;return NN(t,r)||t.push(r),t},[]);if(a.length<=0)throw new Error("Projection's fit didn't find any data sources");return[Object.assign({name:r,size:o,fit:{signal:a.length>1?`[${a.join(", ")}]`:a[0]}},i)]}const nG=["type","clipAngle","clipExtent","center","rotate","precision","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"];class rG extends OH{constructor(e,t,n,r){super(Object.assign({},t),{name:e}),this.specifiedProjection=t,this.size=n,this.data=r,this.merged=!1}}function iG(e){LY(e)?e.component.projection=oG(e):e.component.projection=uG(e)}function oG(e){const{specifiedProjection:t,config:n,hasProjection:r}=e;if(r){const r=[];return[[qT,$T],[WT,UT]].forEach(t=>{(e.channelHasField(t[0])||e.channelHasField(t[1]))&&r.push({signal:e.getName("geojson_"+r.length)})}),e.channelHasField(YT)&&e.fieldDef(YT).type===jP&&r.push({signal:e.getName("geojson_"+r.length)}),0===r.length&&r.push(e.requestDataName(y$)),new rG(e.projectionName(!0),Object.assign({},n.projection||{},t||{}),[e.getSizeSignalRef("width"),e.getSizeSignalRef("height")],r)}}function aG(e,t){const n=PN(nG,n=>!e.explicit.hasOwnProperty(n)&&!t.explicit.hasOwnProperty(n)||!(!e.explicit.hasOwnProperty(n)||!t.explicit.hasOwnProperty(n)||MN(e.get(n))!==MN(t.get(n)))),r=MN(e.size)===MN(t.size);if(r){if(n)return e;if(MN(e.explicit)===MN({}))return t;if(MN(t.explicit)===MN({}))return e}return null}function uG(e){if(0===e.children.length)return;let t;const n=PN(e.children,e=>{iG(e);const n=e.component.projection;if(n){if(t){const e=aG(t,n);return e&&(t=e),!!e}return t=n,!0}return!0});if(t&&n){const n=e.projectionName(!0),r=new rG(n,t.specifiedProjection,t.size,jN(t.data));return e.children.forEach(e=>{e.component.projection&&(r.data=r.data.concat(e.component.projection.data),e.renameProjection(e.component.projection.get("name"),n),e.component.projection.merged=!0)}),r}}class sG{constructor(e,t){this.expr=e,this.signalNames=t}static fromName(e){return new sG(e,[e])}map(e){return new sG(e(this.expr),this.signalNames)}}const cG=iA({globalvar:"global"});function lG(e,t){const n=QN(t),r=[];for(const o of n){const n=t[o];if(n instanceof sG){for(const e of n.signalNames)r.push(e);e=e.replace(CN(o),n.expr)}else e=e.replace(CN(o),Object(H["ab"])(n))}if(r.length>0)return new sG(e,r);try{const n=eA(e),{code:r}=cG(n),i=new Function("global",`return ${r};`);return i(t)}catch(i){if(0===i.message.indexOf("Unrecognized function"))return new sG(e,[]);throw i}}function fG(e){for(const t of e){for(const e of t.children)if(e.parent!==t)return console.error("Dataflow graph is inconsistent.",parent,e),!1;if(!fG(t.children))return!1}return!0}class dG extends gq{constructor(e){super(null),e=e||{name:"source"};const t=e.format?Object.assign({},FN(e.format,["parse"])):{};if(v$(e))this._data={values:e.values};else if(m$(e)){if(this._data={url:e.url},!t.type){let n=/(?:\.([^.]+))?$/.exec(e.url)[1];NN(["json","csv","tsv","dsv","topojson"],n)||(n="json"),t.type=n}}else b$(e)&&(this._data={});e.name&&(this._name=e.name),t&&QN(t).length>0&&(this._data.format=t)}get data(){return this._data}hasName(){return!!this._name}get dataName(){return this._name}set dataName(e){this._name=e}set parent(e){throw new Error("Source nodes have to be roots.")}remove(){throw new Error("Source nodes are roots and cannot be removed.")}hash(){throw new Error("Cannot hash sources")}assemble(){return Object.assign({name:this._name},this._data,{transform:[]})}}class hG{constructor(){this._mutated=!1}setMutated(){this._mutated=!0}get mutatedFlag(){return this._mutated}}class pG extends hG{constructor(){super(),this._continue=!1}setContinue(){this._continue=!0}get continueFlag(){return this._continue}get flags(){return{continueFlag:this.continueFlag,mutatedFlag:this.mutatedFlag}}set flags({continueFlag:e,mutatedFlag:t}){e&&this.setContinue(),t&&this.setMutated()}optimizeNextFromLeaves(e){if(e instanceof dG)return!1;const t=e.parent,{continueFlag:n}=this.run(e);return n&&this.optimizeNextFromLeaves(t),this.mutatedFlag}}class gG extends hG{}function mG(e,t,n){return PP(n)&&tB(n.bin)?(e.add(GP(n,{})),e.add(GP(n,{binSuffix:"end"})),bI(n,t)&&e.add(GP(n,{binSuffix:"range"}))):e.add(GP(n)),e}function vG(e,t){for(const n of QN(t)){const r=t[n];for(const t of QN(r))n in e?e[n][t]=new Set([...e[n][t]||[],...r[t]]):e[n]={[t]:r[t]}}}class bG extends gq{constructor(e,t,n){super(e),this.dimensions=t,this.measures=n}clone(){return new bG(null,new Set(this.dimensions),jN(this.measures))}get groupBy(){return this.dimensions}static makeFromEncoding(e,t){let n=!1;t.forEachFieldDef(e=>{e.aggregate&&(n=!0)});const r={},i=new Set;return n?(t.forEachFieldDef((e,n)=>{const{aggregate:o,field:a}=e;o?"count"===o?(r["*"]=r["*"]||{},r["*"]["count"]=new Set([GP(e,{forAs:!0})])):(r[a]=r[a]||{},r[a][o]=new Set([GP(e,{forAs:!0})]),JR(n)&&"unaggregated"===t.scaleDomain(n)&&(r[a]["min"]=new Set([GP({field:a,aggregate:"min"},{forAs:!0})]),r[a]["max"]=new Set([GP({field:a,aggregate:"max"},{forAs:!0})]))):mG(i,n,e)}),i.size+QN(r).length===0?null:new bG(e,i,r)):null}static makeFromTransform(e,t){const n=new Set,r={};for(const i of t.aggregate){const{op:e,field:t,as:n}=i;e&&("count"===e?(r["*"]=r["*"]||{},r["*"]["count"]=new Set([n||GP(i,{forAs:!0})])):(r[t]=r[t]||{},r[t][e]=new Set([n||GP(i,{forAs:!0})])))}for(const i of t.groupby||[])n.add(i);return n.size+QN(r).length===0?null:new bG(e,n,r)}merge(e){return HN(this.dimensions,e.dimensions)?(vG(this.measures,e.measures),!0):(PB("different dimensions, cannot merge"),!1)}addDimensions(e){e.forEach(this.dimensions.add,this.dimensions)}dependentFields(){return new Set([...this.dimensions,...QN(this.measures)])}producedFields(){const e=new Set;for(const t of QN(this.measures))for(const n of QN(this.measures[t])){const r=this.measures[t][n];0===r.size?e.add(`${n}_${t}`):r.forEach(e.add,e)}return e}hash(){return"Aggregate "+zN({dimensions:this.dimensions,measures:this.measures})}assemble(){const e=[],t=[],n=[];for(const i of QN(this.measures))for(const r of QN(this.measures[i]))for(const o of this.measures[i][r])n.push(o),e.push(r),t.push(sT(i));const r={type:"aggregate",groupby:[...this.dimensions],ops:e,fields:t,as:n};return r}}class yG extends gq{constructor(e,t,n,r){super(e),this.model=t,this.name=n,this.data=r;for(const i of[GT,HT]){const e=t.facet[i];if(e){const{bin:n,sort:r}=e;this[i]=Object.assign({name:t.getName(i+"_domain"),fields:[GP(e),...tB(n)?[GP(e,{binSuffix:"end"})]:[]]},_$(r)?{sortField:r}:Object(H["B"])(r)?{sortIndexField:wq(e,i)}:{})}}this.childModel=t.child}hash(){let e="Facet";return this.column&&(e+=" c:"+zN(this.column)),this.row&&(e+=" r:"+zN(this.row)),e}get fields(){return[...this.column&&this.column.fields||[],...this.row&&this.row.fields||[]]}getSource(){return this.name}getChildIndependentFieldsWithStep(){const e={};for(const t of["x","y"]){const n=this.childModel.component.scales[t];if(n&&!n.merged){const r=n.get("type"),i=n.get("range");if(zL(r)&&GU(i)){const n=eY(this.childModel,t),r=ZG(n);r?e[t]=r:BB("Unknown field for ${channel}.  Cannot calculate view size.")}}}return e}assembleRowColumnData(e,t,n){const r="row"===e?"y":"x",i=[],o=[],a=[];n[r]&&(t?(i.push("distinct_"+n[r]),o.push("max")):(i.push(n[r]),o.push("distinct")),a.push("distinct_"+n[r]));const{sortField:u,sortIndexField:s}=this[e];if(u){const{op:e,field:t}=u;i.push(t),o.push(e),a.push(GP(u,{forAs:!0}))}else s&&(i.push(s),o.push("max"),a.push(s));return{name:this[e].name,source:t||this.data,transform:[Object.assign({type:"aggregate",groupby:this[e].fields},i.length?{fields:i,ops:o,as:a}:{})]}}assemble(){const e=[];let t=null;const n=this.getChildIndependentFieldsWithStep();if(this.column&&this.row&&(n.x||n.y)){t=`cross_${this.column.name}_${this.row.name}`;const r=[].concat(n.x?[n.x]:[],n.y?[n.y]:[]),i=r.map(()=>"distinct");e.push({name:t,source:this.data,transform:[{type:"aggregate",groupby:[...this.column.fields,...this.row.fields],fields:r,ops:i}]})}for(const r of[GT,HT])this[r]&&e.push(this.assembleRowColumnData(r,t,n));return e}}function xG(e,t){const n=aT(e);if("number"===t)return`toNumber(${n})`;if("boolean"===t)return`toBoolean(${n})`;if("string"===t)return`toString(${n})`;if("date"===t)return`toDate(${n})`;if("flatten"===t)return n;if(0===t.indexOf("date:")){const e=t.slice(5,t.length);return`timeParse(${n},${e})`}if(0===t.indexOf("utc:")){const e=t.slice(4,t.length);return`utcParse(${n},${e})`}return BB(IB.unrecognizedParse(t)),null}class wG extends gq{clone(){return new wG(null,jN(this._parse))}constructor(e,t){super(e),this._parse=t}hash(){return"Parse "+zN(this._parse)}static makeExplicit(e,t,n){let r={};const i=t.data;return i&&i.format&&i.format.parse&&(r=i.format.parse),this.makeWithAncestors(e,r,{},n)}static makeImplicitFromFilterTransform(e,t,n){const r={};return _N(t.filter,e=>{if(bU(e)){let t=null;lU(e)?t=e.equal:gU(e)?t=e.range[0]:mU(e)&&(t=(e.oneOf||e["in"])[0]),t&&($B(t)?r[e.field]="date":Object(H["F"])(t)?r[e.field]="number":Object(H["I"])(t)&&(r[e.field]="string")),e.timeUnit&&(r[e.field]="date")}}),0===QN(r).length?null:this.makeWithAncestors(e,{},r,n)}static makeImplicitFromEncoding(e,t,n){const r={};function i(e){gI(e)?r[e.field]="date":pI(e)&&xT(e.aggregate)?r[e.field]="number":lT(e.field)>1?e.field in r||(r[e.field]="flatten"):$P(e)&&_$(e.sort)&&lT(e.sort.field)>1&&(e.sort.field in r||(r[e.sort.field]="flatten"))}return(LY(t)||$Y(t))&&t.forEachFieldDef((e,n)=>{if(PP(e))i(e);else{const r=wR(n);if(r===n)throw new Error(`Non-secondary channel ${n} must have type in its field definition ${JSON.stringify(e)}`);{const n=t.fieldDef(r);i(Object.assign({},e,{type:n.type}))}}}),this.makeWithAncestors(e,{},r,n)}static makeWithAncestors(e,t,n,r){for(const a of QN(n)){const e=r.getWithExplicit(a);void 0!==e.value&&(e.explicit||e.value===n[a]||"derived"===e.value||"flatten"===n[a]?delete n[a]:BB(IB.differentParse(a,n[a],e.value)))}for(const a of QN(t)){const e=r.get(a);void 0!==e&&(e===t[a]?delete t[a]:BB(IB.differentParse(a,t[a],e)))}const i=new OH(t,n);r.copyAll(i);const o={};for(const a of QN(i.combine())){const e=i.get(a);null!==e&&(o[a]=e)}return 0===QN(o).length||r.parseNothing?null:new wG(e,o)}get parse(){return this._parse}merge(e){this._parse=Object.assign({},this._parse,e.parse),e.remove()}assembleFormatParse(){const e={};for(const t of QN(this._parse)){const n=this._parse[t];1===lT(t)&&(e[t]=n)}return e}producedFields(){return new Set(QN(this._parse))}dependentFields(){return new Set(QN(this._parse))}assembleTransforms(e=!1){return QN(this._parse).filter(t=>!e||lT(t)>1).map(e=>{const t=xG(e,this._parse[e]);if(!t)return null;const n={type:"formula",expr:t,as:cT(e)};return n}).filter(e=>null!==e)}}function OG(e){return e.stack.stackBy.reduce((e,t)=>{const n=t.fieldDef,r=GP(n);return r&&e.push(r),e},[])}function EG(e){return Object(H["B"])(e)&&e.every(e=>Object(H["I"])(e))&&e.length>1}class kG extends gq{clone(){return new kG(null,jN(this._stack))}constructor(e,t){super(e),this._stack=t}static makeFromTransform(e,t){const{stack:n,groupby:r,as:i,offset:o="zero"}=t,a=[],u=[];if(void 0!==t.sort)for(const l of t.sort)a.push(l.field),u.push(fT(l.order,"ascending"));const s={field:a,order:u};let c;return c=EG(i)?i:Object(H["I"])(i)?[i,i+"_end"]:[t.stack+"_start",t.stack+"_end"],new kG(e,{stackField:n,groupby:r,offset:o,sort:s,facetby:[],as:c})}static makeFromEncoding(e,t){const n=t.stack,{encoding:r}=t;if(!n)return null;let i;if(n.groupbyChannel){const e=r[n.groupbyChannel];i=sI(e)}const o=OG(t),a=t.encoding.order;let u;return u=Object(H["B"])(a)||BP(a)?fq(a):o.reduce((e,t)=>(e.field.push(t),e.order.push("descending"),e),{field:[],order:[]}),new kG(e,{dimensionFieldDef:i,stackField:t.vgField(n.fieldChannel),facetby:[],stackby:o,sort:u,offset:n.offset,impute:n.impute,as:[t.vgField(n.fieldChannel,{suffix:"start",forAs:!0}),t.vgField(n.fieldChannel,{suffix:"end",forAs:!0})]})}get stack(){return this._stack}addDimensions(e){this._stack.facetby=this._stack.facetby.concat(e)}dependentFields(){const e=new Set;e.add(this._stack.stackField),this.getGroupbyFields().forEach(t=>e.add(t)),this._stack.facetby.forEach(t=>e.add(t));const t=this._stack.sort.field;return Object(H["B"])(t)?t.forEach(t=>e.add(t)):e.add(t),e}producedFields(){return new Set(this._stack.as)}hash(){return"Stack "+zN(this._stack)}getGroupbyFields(){const{dimensionFieldDef:e,impute:t,groupby:n}=this._stack;return e?e.bin?t?[GP(e,{binSuffix:"mid"})]:[GP(e,{}),GP(e,{binSuffix:"end"})]:[GP(e)]:n||[]}assemble(){const e=[],{facetby:t,dimensionFieldDef:n,stackField:r,stackby:i,sort:o,offset:a,impute:u,as:s}=this._stack;return u&&n&&(n.bin&&e.push({type:"formula",expr:"("+GP(n,{expr:"datum"})+"+"+GP(n,{expr:"datum",binSuffix:"end"})+")/2",as:GP(n,{binSuffix:"mid",forAs:!0})}),e.push({type:"impute",field:r,groupby:[...i,...t],key:GP(n,{binSuffix:"mid"}),method:"value",value:0})),e.push({type:"stack",groupby:this.getGroupbyFields().concat(t),field:r,sort:o,as:s,offset:a}),e}}class _G extends gq{constructor(e,t){super(e),this.transform=t}clone(){return new _G(null,jN(this.transform))}addDimensions(e){this.transform.groupby=qN(this.transform.groupby.concat(e),e=>e)}dependentFields(){const e=new Set;return this.transform.groupby.forEach(t=>e.add(t)),this.transform.sort.forEach(t=>e.add(t.field)),this.transform.window.map(e=>e.field).filter(e=>void 0!==e).forEach(t=>e.add(t)),e}producedFields(){return new Set(this.transform.window.map(this.getDefaultName))}getDefaultName(e){return e.as||GP(e)}hash(){return"WindowTransform "+zN(this.transform)}assemble(){const e=[],t=[],n=[],r=[];for(const f of this.transform.window)t.push(f.op),n.push(this.getDefaultName(f)),r.push(void 0===f.param?null:f.param),e.push(void 0===f.field?null:f.field);const i=this.transform.frame,o=this.transform.groupby,a=[],u=[];if(void 0!==this.transform.sort)for(const f of this.transform.sort)a.push(f.field),u.push(f.order||"ascending");const s={field:a,order:u},c=this.transform.ignorePeers,l={type:"window",params:r,as:n,ops:t,fields:e,sort:s};return void 0!==c&&(l.ignorePeers=c),void 0!==o&&(l.groupby=o),void 0!==i&&(l.frame=i),l}}class AG extends pG{run(e){const t=e.parent;if(e instanceof wG){if(t instanceof dG)return this.flags;if(t.numChildren()>1)return this.setContinue(),this.flags;if(t instanceof wG)this.setMutated(),t.merge(e);else{if(VN(t.producedFields(),e.dependentFields()))return this.setContinue(),this.flags;this.setMutated(),e.swapWithParent()}}return this.setContinue(),this.flags}}class SG extends gG{mergeNodes(e,t){const n=t.shift();for(const r of t)e.removeChild(r),r.parent=n,r.remove()}run(e){const t=e.children.map(e=>e.hash()),n={};for(let r=0;r<t.length;r++)void 0===n[t[r]]?n[t[r]]=[e.children[r]]:n[t[r]].push(e.children[r]);for(const r of QN(n))n[r].length>1&&(this.setMutated(),this.mergeNodes(e,n[r]));for(const r of e.children)this.run(r);return this.mutatedFlag}}class jG extends pG{run(e){return e instanceof mq||e.numChildren()>0||e instanceof yG||(this.setMutated(),e.remove()),this.flags}}class CG extends pG{constructor(){super(...arguments),this.fields=new Set}run(e){if(this.setContinue(),e instanceof Rq){const t=e.producedFields();GN(t,this.fields)?(this.setMutated(),e.remove()):this.fields=new Set([...this.fields,...t])}return this.flags}}function DG(e){function t(n){if(!(n instanceof yG)){const r=n.clone();if(r instanceof mq){const t=RG+r.getSource();r.setSource(t),e.model.component.data.outputNodes[t]=r}else(r instanceof bG||r instanceof kG||r instanceof _G)&&r.addDimensions(e.fields);return IN(n.children.map(t)).forEach(e=>e.parent=r),[r]}return IN(n.children.map(t))}return t}function FG(e){if(e instanceof yG)if(1!==e.numChildren()||e.children[0]instanceof mq){const t=e.model.component.data.main;MG(t);const n=DG(e),r=IN(e.children.map(n));for(const e of r)e.parent=t}else{const t=e.children[0];(t instanceof bG||t instanceof kG||t instanceof _G)&&t.addDimensions(e.fields),t.swapWithParent(),FG(e)}else e.children.map(FG)}function MG(e){if(e instanceof mq&&e.type===y$&&1===e.numChildren()){const t=e.children[0];t instanceof yG||(t.swapWithParent(),MG(e))}}class zG extends gG{run(e){e instanceof mq&&!e.isRequired()&&(this.setMutated(),e.remove());for(const t of e.children)this.run(t);return this.mutatedFlag}}class NG extends pG{run(e){const t=e.parent,n=t.children.filter(e=>e instanceof wG);if(n.length>1){const e={};for(const t of n){const n=t.parse;for(const t of QN(n))void 0===e[t]?e[t]=n[t]:e[t]!==n[t]&&delete e[t]}if(0!==QN(e).length){this.setMutated();const r=new wG(t,e);for(const i of n){for(const t of QN(e))delete i.parse[t];t.removeChild(i),i.parent=r,0===QN(i.parse).length&&i.remove()}}}return this.setContinue(),this.flags}}class TG extends pG{run(e){const t=e.parent,n=t.children.filter(e=>e instanceof bG),r={};for(const i of n){const e=zN(QN(i.groupBy).sort());e in r||(r[e]=[]),r[e].push(i)}for(const i of QN(r)){const e=r[i];if(e.length>1){const n=e.pop();for(const r of e)n.merge(r)&&(t.removeChild(r),r.parent=n,r.remove(),this.setMutated())}}return this.setContinue(),this.flags}}const RG="scale_",BG=5;function PG(e){const t=[];function n(e){0===e.numChildren()?t.push(e):e.children.forEach(n)}return e.forEach(n),t}function IG(e){return e}function LG(e,t,n){const r=t.map(t=>{const n=new e;return n instanceof pG?n.optimizeNextFromLeaves(t):n.run(t)});return r.some(IG)||n}function $G(e){let t=e.sources,n=!1;return n=LG(zG,t,n),t=t.filter(e=>e.numChildren()>0),n=LG(jG,PG(t),n),t=t.filter(e=>e.numChildren()>0),n=LG(AG,PG(t),n),n=LG(CG,PG(t),n),n=LG(NG,PG(t),n),n=LG(TG,PG(t),n),n=LG(SG,t,n),e.sources=t,n}function UG(e){fG(e.sources);let t=0,n=0;for(let r=0;r<BG;r++){if(!$G(e))break;t++}e.sources.map(FG);for(let r=0;r<BG;r++){if(!$G(e))break;n++}fG(e.sources),Math.max(t,n)===BG&&BB(`Maximum optimization runs(${BG}) reached.`)}function qG(e){LY(e)?WG(e):HG(e)}function WG(e){const t=e.specifiedScales,n=e.component.scales;QN(n).forEach(r=>{const i=t[r],o=i?i.domain:void 0,a=YG(e,r),u=n[r];if(u.domains=a,LL(o)&&u.set("domainRaw",{signal:EW+zN(o)},!0),e.component.data.isFaceted){let t=e;while(!$Y(t)&&t.parent)t=t.parent;const n=t.component.resolve.scale[r];if("shared"===n)for(const e of a)XU(e)&&(e.data=RG+e.data.replace(RG,""))}})}function HG(e){for(const n of e.children)qG(n);const t=e.component.scales;QN(t).forEach(n=>{let r,i=null;for(const t of e.children){const e=t.component.scales[n];if(e){r=void 0===r?e.domains:r.concat(e.domains);const t=e.get("domainRaw");i&&t&&i.signal!==t.signal&&BB("The same selection must be used to override scale domains in a layered view."),i=t}}t[n].domains=r,i&&t[n].set("domainRaw",i,!0)})}function GG(e,t,n,r){if("unaggregated"===e){const{valid:e,reason:r}=QG(t,n);if(!e)return void BB(r)}else if(void 0===e&&r.useUnaggregatedDomain){const{valid:e}=QG(t,n);if(e)return"unaggregated"}return e}function YG(e,t){const n=e.getScaleComponent(t).get("type"),r=GG(e.scaleDomain(t),e.fieldDef(t),n,e.config.scale);return r!==e.scaleDomain(t)&&(e.specifiedScales[t]=Object.assign({},e.specifiedScales[t],{domain:r})),"x"===t&&e.channelHasField("x2")?e.channelHasField("x")?XG(n,r,e,"x").concat(XG(n,r,e,"x2")):XG(n,r,e,"x2"):"y"===t&&e.channelHasField("y2")?e.channelHasField("y")?XG(n,r,e,"y").concat(XG(n,r,e,"y2")):XG(n,r,e,"y2"):XG(n,r,e,t)}function VG(e,t,n){return e.map(e=>{const r=mI(e,{timeUnit:n,type:t});return{signal:`{data: ${r}}`}})}function XG(e,t,n,r){const i=n.fieldDef(r);if(t&&"unaggregated"!==t&&!LL(t)){const{type:e,timeUnit:n}=i;return"temporal"===e||n?VG(t,e,n):[t]}const o=n.stack;if(o&&r===o.fieldChannel){if("normalize"===o.offset)return[[0,1]];const e=n.requestDataName(y$);return[{data:e,field:n.vgField(r,{suffix:"start"})},{data:e,field:n.vgField(r,{suffix:"end"})}]}const a=JR(r)?JG(n,r,e):void 0;if("unaggregated"===t){const e=n.requestDataName(y$),{field:t}=i;return[{data:e,field:GP({field:t,aggregate:"min"})},{data:e,field:GP({field:t,aggregate:"max"})}]}if(tB(i.bin)){if(NL(e)){const e=n.getName(`${eB(i.bin)}_${i.field}_bins`);return[{signal:`sequence(${e}.start, ${e}.stop + ${e}.step, ${e}.step)`}]}if(zL(e))return[{data:tT(a)?n.requestDataName(y$):n.requestDataName(x$),field:n.vgField(r,bI(i,r)?{binSuffix:"range"}:{}),sort:!0!==a&&_$(a)?a:{field:n.vgField(r,{}),op:"min"}}];if("x"===r||"y"===r){if(rB(i.bin)&&i.bin.extent)return[i.bin.extent];const e=n.requestDataName(y$);return[{data:e,field:n.vgField(r,{})},{data:e,field:n.vgField(r,{binSuffix:"end"})}]}return[{data:n.requestDataName(y$),field:n.vgField(r,{})}]}return a?[{data:tT(a)?n.requestDataName(y$):n.requestDataName(x$),field:n.vgField(r),sort:a}]:[{data:n.requestDataName(y$),field:n.vgField(r)}]}function JG(e,t,n){if(!zL(n))return;const r=e.fieldDef(t),i=r.sort;return A$(i)?{op:"min",field:wq(r,t),order:"ascending"}:_$(i)?Object.assign({},i,i.field?{field:sT(i.field)}:{}):"descending"===i?{op:"min",field:e.vgField(t),order:"descending"}:!!NN(["ascending",void 0],i)||void 0}function QG(e,t){return e.aggregate?ET[e.aggregate]?"quantitative"===e.type&&"log"===t?{valid:!1,reason:IB.unaggregatedDomainWithLogScale(e)}:{valid:!0}:{valid:!1,reason:IB.unaggregateDomainWithNonSharedDomainOp(e.aggregate)}:{valid:!1,reason:IB.unaggregateDomainHasNoEffectForRawField(e)}}function KG(e){const t=qN(e.map(e=>{if(XU(e)){const{sort:t}=e,n=P(e,["sort"]);return n}return e}),zN),n=qN(e.map(e=>{if(XU(e)){const t=e.sort;return void 0===t||tT(t)||("count"===t.op&&delete t.field,"ascending"===t.order&&delete t.order),t}}).filter(e=>void 0!==e),zN);if(1===t.length){const t=e[0];if(XU(t)&&n.length>0){let e=n[0];return n.length>1&&(BB(IB.MORE_THAN_ONE_SORT),e=!0),Object.assign({},t,{sort:e})}return t}const r=qN(n.map(e=>tT(e)||"count"===e.op?e:(BB(IB.domainSortDropped(e)),!0)),zN);let i;1===r.length?i=r[0]:r.length>1&&(BB(IB.MORE_THAN_ONE_SORT),i=!0);const o=qN(e.map(e=>XU(e)?e.data:null),e=>e);if(1===o.length&&null!==o[0]){const e=Object.assign({data:o[0],fields:t.map(e=>e.field)},i?{sort:i}:{});return e}return Object.assign({fields:t},i?{sort:i}:{})}function ZG(e){if(XU(e)&&Object(H["I"])(e.field))return e.field;if(YU(e)){let t;for(const n of e.fields)if(XU(n)&&Object(H["I"])(n.field))if(t){if(t!==n.field)return BB("Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect."),t}else t=n.field;return BB("Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect."),t}if(VU(e)){BB("Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.");const t=e.fields[0];return Object(H["I"])(t)?t:void 0}}function eY(e,t){const n=e.component.scales[t],r=n.domains.map(t=>(XU(t)&&(t.data=e.lookupDataSource(t.data)),t));return KG(r)}function tY(e){return WY(e)||qY(e)||UY(e)?e.children.reduce((e,t)=>e.concat(tY(t)),nY(e)):nY(e)}function nY(e){return QN(e.component.scales).reduce((t,n)=>{const r=e.component.scales[n];if(r.merged)return t;const i=r.combine();let{domainRaw:o}=i;const{name:a,type:u,domainRaw:s,range:c}=i,l=P(i,["name","type","domainRaw","range"]),f=iY(i.range,a,e,n);return o&&zW(o)&&(o=NW(e,o)),t.push(Object.assign({name:a,type:u,domain:eY(e,n)},o?{domainRaw:o}:{},{range:f},l)),t},[])}function rY(e,t){let n=e.expr;for(const r of e.signalNames){const e=t.getSignalName(r);if(e!==r){const t=CN(r);n=n.replace(t,e)}}return{signal:n}}function iY(e,t,n,r){return e instanceof sG?rY(e,n):Object(H["B"])(e)?e.map(e=>e instanceof sG?rY(e,n):e):"x"!==r&&"y"!==r||!GU(e)?e:{step:{signal:t+"_step"}}}class oY extends OH{constructor(e,t){super({},{name:e}),this.merged=!1,this.domains=[],this.setWithExplicit("type",t)}}const aY=["range","rangeStep","scheme"];function uY(e){return"x"===e?"width":"y"===e?"height":void 0}function sY(e){const t=e.component.scales;XR.forEach(n=>{const r=t[n];if(!r)return;const i=e.getScaleComponent(n),o=e.specifiedScales[n],a=e.fieldDef(n),u=uY(n);let s=u?!!e.component.layoutSize.get(u):void 0;const c=i.get("type"),l=NN(["point","band"],c)||!!o.rangeStep;u&&e.fit&&!s&&l&&(BB(IB.CANNOT_FIX_RANGE_STEP_WITH_FIT),s=!0);const f=lY(e),d=fY(n,c,a.type,o,e.config,r.get("zero"),e.mark,s,e.getName(u),f);r.setWithExplicit("range",d)})}function cY(e,t){const n=e.getScaleComponent(t);if(!n)return;const r=n.get("type"),i=e.fieldDef(t);if(zL(r)){const e=n&&n.get("range");if(e&&GU(e)&&Object(H["F"])(e.step))return e.step}else if(i&&i.bin&&tB(i.bin)){const n=e.getName(GP(i,{suffix:"bins"})),r=`(${n}.stop - ${n}.start) / ${n}.step`,o=uY(t),a=e.getName(o);return new sG(`${a} / (${r})`,[a,n])}}function lY(e){const t=[];for(const n of PR){const r=cY(e,n);void 0!==r&&t.push(r)}return t}function fY(e,t,n,r,i,o,a,u,s,c){const l=u||null===r.rangeStep;for(const f of aY)if(void 0!==r[f]){const n=QL(t,f),i=KL(e,f);if(n)if(i)BB(i);else switch(f){case"range":return EH(r[f]);case"scheme":return EH(dY(r[f]));case"rangeStep":const t=r[f];if(null!==t){if(!u)return EH({step:t});BB(IB.rangeStepDropped(e))}}else BB(IB.scalePropertyNotWorkWithScaleType(t,f,e))}return kH(hY(e,t,n,i,o,a,s,c,l,r.domain))}function dY(e){if(IL(e)){const t={scheme:e.name};return e.count&&(t.count=e.count),e.extent&&(t.extent=e.extent),t}return{scheme:e}}function hY(e,t,n,r,i,o,a,u,s,c){switch(e){case zT:case NT:if(NN(["point","band"],t)&&!s)if(e===zT&&"text"===o){if(r.scale.textXRangeStep)return{step:r.scale.textXRangeStep}}else if(r.scale.rangeStep)return{step:r.scale.rangeStep};return e===NT&&TL(t)?[sG.fromName(a),0]:[0,sG.fromName(a)];case VT:const l=mY(o,i,r),f=bY(o,u,r);return BL(t)?gY(l,f,pY(t,r,c,e)):[l,f];case oR:return[r.scale.minStrokeWidth,r.scale.maxStrokeWidth];case YT:return"symbol";case XT:case JT:case QT:if("ordinal"===t)return"nominal"===n?"category":"ordinal";if(BL(t)){const n=pY(t,r,c,e);return r.range&&s$(r.range.ordinal)?Object.assign({},r.range.ordinal,{count:n}):{scheme:"blues",count:n}}return RL(t)?["#f7fbff","#0e427f"]:"rect"===o||"geoshape"===o?"heatmap":"ramp";case nR:case rR:case iR:return[r.scale.minOpacity,r.scale.maxOpacity]}throw new Error("Scale range undefined for channel "+e)}function pY(e,t,n,r){switch(e){case"quantile":return t.scale.quantileCount;case"quantize":return t.scale.quantizeCount;case"threshold":return void 0!==n&&Object(H["B"])(n)?n.length+1:(BB(IB.domainRequiredForThresholdScale(r)),3)}}function gY(e,t,n){const r="(rangeMax - rangeMin) / (cardinality - 1)";return lG(`sequence(rangeMin, rangeMax + ${r}, ${r})`,{rangeMin:e,rangeMax:t,cardinality:n})}function mY(e,t,n){if(t)return 0;switch(e){case"bar":case"tick":return n.scale.minBandSize;case"line":case"trail":case"rule":return n.scale.minStrokeWidth;case"text":return n.scale.minFontSize;case"point":case"square":case"circle":return n.scale.minSize}throw new Error(IB.incompatibleChannel("size",e))}const vY=.95;function bY(e,t,n){const r=n.scale;switch(e){case"bar":case"tick":if(void 0!==n.scale.maxBandSize)return n.scale.maxBandSize;const e=yY(t,n.scale);return lG("min - 1",{min:e});case"line":case"trail":case"rule":return n.scale.maxStrokeWidth;case"text":return n.scale.maxFontSize;case"point":case"square":case"circle":if(n.scale.maxSize)return n.scale.maxSize;const i=yY(t,r);return lG(`pow(${vY} * pointStep, 2)`,{pointStep:i})}throw new Error(IB.incompatibleChannel("size",e))}function yY(e,t){if(e.length>0){const t=[],n=[];let r=1/0;for(const i of e)if(i instanceof sG){t.push(i.expr);for(const e of i.signalNames)n.push(e);r=void 0}else t.push(i),void 0!==r&&i<r&&(r=i);return void 0!==r?r:new sG(`min(${t.join(", ")})`,n)}return t.rangeStep?t.rangeStep:21}function xY(e,t){LY(e)?wY(e,t):kY(e,t)}function wY(e,t){const n=e.component.scales;QN(n).forEach(r=>{const i=e.specifiedScales[r],o=n[r],a=e.getScaleComponent(r),u=e.fieldDef(r),s=e.config,c=i[t],l=a.get("type"),f=QL(l,t),d=KL(r,t);if(void 0!==c&&(f?d&&BB(d):BB(IB.scalePropertyNotWorkWithScaleType(l,t,r))),f&&void 0===d)if(void 0!==c)o.copyKeyFromObject(t,i);else{const n=OY(t,r,u,a.get("type"),a.get("padding"),a.get("paddingInner"),i.domain,e.markDef,s);void 0!==n&&o.set(t,n,!1)}})}function OY(e,t,n,r,i,o,a,u,s){const c=s.scale;switch(e){case"interpolate":return _Y(t,r);case"nice":return AY(r,t,n);case"padding":return SY(t,r,c,n,u,s.bar);case"paddingInner":return jY(i,t,u.type,c);case"paddingOuter":return CY(i,t,r,u.type,o,c);case"reverse":return DY(r,n.sort);case"zero":return FY(t,n,a,u,r)}return c[e]}function EY(e){LY(e)?sY(e):kY(e,"range")}function kY(e,t){const n=e.component.scales;for(const r of e.children)"range"===t?EY(r):xY(r,t);QN(n).forEach(r=>{let i;for(const n of e.children){const e=n.component.scales[r];if(e){const n=e.getWithExplicit(t);i=SH(i,n,t,"scale",_H((e,n)=>{switch(t){case"range":return e.step&&n.step?e.step-n.step:0}return 0}))}}n[r].setWithExplicit(t,i)})}function _Y(e,t){if(NN([XT,JT,QT],e)&&RL(t))return"hcl"}function AY(e,t,n){if(!n.bin&&!NN([vL.TIME,vL.UTC],e))return!!NN([zT,NT],t)||void 0}function SY(e,t,n,r,i,o){if(NN([zT,NT],e)){if(RL(t)){if(void 0!==n.continuousPadding)return n.continuousPadding;const{type:t,orient:a}=i;if("bar"===t&&!r.bin&&("vertical"===a&&"x"===e||"horizontal"===a&&"y"===e))return o.continuousBandSize}if(t===vL.POINT)return n.pointPadding}}function jY(e,t,n,r){if(void 0===e&&NN([zT,NT],t)){const{bandPaddingInner:e,barBandPaddingInner:t,rectBandPaddingInner:i}=r;return fT(e,"bar"===n?t:i)}}function CY(e,t,n,r,i,o){if(void 0===e&&NN([zT,NT],t)&&n===vL.BAND){const{bandPaddingOuter:e,barBandPaddingOuter:t,rectBandPaddingOuter:n}=o;return fT(e,"bar"===r?t:n,i/2)}}function DY(e,t){if(TL(e)&&"descending"===t)return!0}function FY(e,t,n,r,i){const o=!!n&&"unaggregated"!==n;if(o)return!1;if("size"===e&&"quantitative"===t.type&&!BL(i))return!0;if(!t.bin&&NN([zT,NT],e)){const{orient:t,type:n}=r;return!NN(["bar","area","line","trail"],n)||!("horizontal"===t&&"y"===e||"vertical"===t&&"x"===e)}return!1}function MY(e,t,n,r,i){const o=zY(t,n,r,e,i),{type:a}=e;return JR(t)?void 0!==a?e$(t,a)?ZL(a,n.type,n.bin)?a:(BB(IB.scaleTypeNotWorkWithFieldDef(a,o)),o):(BB(IB.scaleTypeNotWorkWithChannel(t,a,o)),o):o:null}function zY(e,t,n,r,i){switch(t.type){case"nominal":case"ordinal":if(fR(e)||"discrete"===ZR(e))return"shape"===e&&"ordinal"===t.type&&BB(IB.discreteChannelCannotEncode(e,"ordinal")),"ordinal";if(NN(["x","y"],e)){if(NN(["rect","bar","rule"],n))return"band";if("bar"===n)return"band"}return"point";case"temporal":return fR(e)?"time":"discrete"===ZR(e)?(BB(IB.discreteChannelCannotEncode(e,"temporal")),"ordinal"):"time";case"quantitative":if(fR(e)){if(tB(t.bin))return"bin-ordinal";const{domain:e,range:n}=r||{};return e&&Object(H["B"])(e)&&e.length>2&&n&&Object(H["B"])(n)&&n.length>2?"linear":"sequential"}return"discrete"===ZR(e)?(BB(IB.discreteChannelCannotEncode(e,"quantitative")),"ordinal"):tB(t.bin)&&"x"!==e&&"y"!==e?"bin-linear":"linear";case"geojson":return}throw new Error(IB.invalidFieldType(t.type))}function NY(e){TY(e),qG(e);for(const t of XL)xY(e,t);EY(e)}function TY(e){LY(e)?e.component.scales=RY(e):e.component.scales=PY(e)}function RY(e){const{encoding:t,config:n,mark:r}=e;return XR.reduce((i,o)=>{let a,u;const s=t[o];if(BP(s)&&r===gB&&o===YT&&s.type===jP)return i;if(BP(s)?(a=s,u=s.scale):TP(s)&&(a=s.condition,u=s.condition["scale"]),a&&null!==u&&!1!==u){u=u||{};const t=MY(u,o,a,r,n.scale);i[o]=new oY(e.scaleName(o+"",!0),{value:t,explicit:u.type===t})}return i},{})}const BY=_H((e,t)=>OL(e)-OL(t));function PY(e){const t=e.component.scales={},n={},r=e.component.resolve;for(const i of e.children)TY(i),QN(i.component.scales).forEach(t=>{if(r.scale[t]=r.scale[t]||xH(t,e),"shared"===r.scale[t]){const e=n[t],o=i.component.scales[t].getWithExplicit("type");e?xL(e.value,o.value)?n[t]=SH(e,o,"type","scale",BY):(r.scale[t]="independent",delete n[t]):n[t]=o}});return QN(n).forEach(r=>{const i=e.scaleName(r,!0),o=n[r];t[r]=new oY(i,o);for(const t of e.children){const e=t.component.scales[r];e&&(t.renameScale(e.get("name"),i),e.merged=!0)}}),t}class IY{constructor(){this.nameMap={}}rename(e,t){this.nameMap[e]=t}has(e){return void 0!==this.nameMap[e]}get(e){while(this.nameMap[e]&&e!==this.nameMap[e])e=this.nameMap[e];return e}}function LY(e){return e&&"unit"===e.type}function $Y(e){return e&&"facet"===e.type}function UY(e){return e&&"repeat"===e.type}function qY(e){return e&&"concat"===e.type}function WY(e){return e&&"layer"===e.type}class HY{constructor(e,t,n,r,i,o){this.children=[],this.correctDataNames=e=>(e.from&&e.from.data&&(e.from.data=this.lookupDataSource(e.from.data)),e.from&&e.from.facet&&e.from.facet.data&&(e.from.facet.data=this.lookupDataSource(e.from.facet.data)),e),this.parent=t,this.config=r,this.repeater=i,this.name=e.name||n,this.title=Object(H["I"])(e.title)?{text:e.title}:e.title,this.scaleNameMap=t?t.scaleNameMap:new IY,this.projectionNameMap=t?t.projectionNameMap:new IY,this.signalNameMap=t?t.signalNameMap:new IY,this.data=e.data,this.description=e.description,this.transforms=RU(e.transform||[]),this.layout=eU(e)||R$(e)?void 0:LU(e),this.component={data:{sources:t?t.component.data.sources:[],outputNodes:t?t.component.data.outputNodes:{},outputNodeRefCounts:t?t.component.data.outputNodeRefCounts:{},isFaceted:QB(e)||t&&t.component.data.isFaceted&&!e.data},layoutSize:new OH,layoutHeaders:{row:{},column:{}},mark:null,resolve:Object.assign({scale:{},axis:{},legend:{}},o?jN(o):{}),selection:null,scales:null,projection:null,axes:{},legends:{}}}get width(){return this.getSizeSignalRef("width")}get height(){return this.getSizeSignalRef("height")}initSize(e){const{width:t,height:n}=e;t&&this.component.layoutSize.set("width",t,!0),n&&this.component.layoutSize.set("height",n,!0)}parse(){this.parseScale(),this.parseLayoutSize(),this.renameTopLevelLayoutSizeSignal(),this.parseSelection(),this.parseProjection(),this.parseData(),this.parseAxisAndHeader(),this.parseLegend(),this.parseMarkGroup()}parseScale(){NY(this)}parseProjection(){iG(this)}renameTopLevelLayoutSizeSignal(){"width"!==this.getName("width")&&this.renameSignal(this.getName("width"),"width"),"height"!==this.getName("height")&&this.renameSignal(this.getName("height"),"height")}parseLegend(){WH(this)}assembleGroupStyle(){if("unit"===this.type||"layer"===this.type)return"cell"}assembleLayoutSize(){if("unit"===this.type||"layer"===this.type)return{width:this.getSizeSignalRef("width"),height:this.getSizeSignalRef("height")}}assembleLayout(){if(!this.layout)return;const{align:e,bounds:t,center:n,spacing:r={}}=this.layout;return Object.assign({padding:Object(H["F"])(r)?r:{row:r.row||10,column:r.column||10}},this.assembleDefaultLayout(),e?{align:e}:{},t?{bounds:t}:{},n?{center:n}:{})}assembleDefaultLayout(){return{}}assembleHeaderMarks(){const{layoutHeaders:e}=this.component;let t=[];for(const n of Oq)e[n].title&&t.push(_q(this,n));for(const n of Oq)t=t.concat(Aq(this,n));return t}assembleAxes(){return eq(this.component.axes,this.config)}assembleLegends(){return KH(this)}assembleProjections(){return ZH(this)}assembleTitle(){const e=this.title||{},{encoding:t}=e,n=P(e,["encoding"]),r=Object.assign({},a$(this.config.title).nonMark,n,t?{encode:{update:t}}:{});if(r.text)return NN(["unit","layer"],this.type)||(r.anchor&&"start"!==r.anchor&&BB(IB.cannotSetTitleAnchor(this.type)),r.anchor="start"),NN(["middle",void 0],r.anchor)&&void 0===r.frame&&(r.frame="group"),QN(r).length>0?r:void 0}assembleGroup(e=[]){const t={};e=e.concat(this.assembleSelectionSignals()),e.length>0&&(t.signals=e);const n=this.assembleLayout();n&&(t.layout=n),t.marks=[].concat(this.assembleHeaderMarks(),this.assembleMarks());const r=!this.parent||$Y(this.parent)?tY(this):[];r.length>0&&(t.scales=r);const i=this.assembleAxes();i.length>0&&(t.axes=i);const o=this.assembleLegends();return o.length>0&&(t.legends=o),t}hasDescendantWithFieldOnChannel(e){for(const t of this.children)if(LY(t)){if(t.channelHasField(e))return!0}else if(t.hasDescendantWithFieldOnChannel(e))return!0;return!1}getName(e){return nT((this.name?this.name+"_":"")+e)}requestDataName(e){const t=this.getName(e),n=this.component.data.outputNodeRefCounts;return n[t]=(n[t]||0)+1,t}getSizeSignalRef(e){if($Y(this.parent)){const t="width"===e?"x":"y",n=this.component.scales[t];if(n&&!n.merged){const e=n.get("type"),r=n.get("range");if(zL(e)&&GU(r)){const e=n.get("name"),r=eY(this,t),i=ZG(r);if(i){const t=GP({aggregate:"distinct",field:i},{expr:"datum"});return{signal:Tq(e,n,t)}}return BB("Unknown field for ${channel}.  Cannot calculate view size."),null}}}return{signal:this.signalNameMap.get(this.getName(e))}}lookupDataSource(e){const t=this.component.data.outputNodes[e];return t?t.getSource():e}getSignalName(e){return this.signalNameMap.get(e)}renameSignal(e,t){this.signalNameMap.rename(e,t)}renameScale(e,t){this.scaleNameMap.rename(e,t)}renameProjection(e,t){this.projectionNameMap.rename(e,t)}scaleName(e,t){return t?this.getName(e):yR(e)&&JR(e)&&this.component.scales[e]||this.scaleNameMap.has(this.getName(e))?this.scaleNameMap.get(this.getName(e)):void 0}projectionName(e){return e?this.getName("projection"):this.component.projection&&!this.component.projection.merged||this.projectionNameMap.has(this.getName("projection"))?this.projectionNameMap.get(this.getName("projection")):void 0}getScaleComponent(e){if(!this.component.scales)throw new Error("getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().");const t=this.component.scales[e];return t&&!t.merged?t:this.parent?this.parent.getScaleComponent(e):void 0}getSelectionComponent(e,t){let n=this.component.selection[e];if(!n&&this.parent&&(n=this.parent.getSelectionComponent(e,t)),!n)throw new Error(IB.selectionNotFound(t));return n}}class GY extends HY{vgField(e,t={}){const n=this.fieldDef(e);if(n)return GP(n,t)}reduceFieldDef(e,t,n){return SI(this.getMapping(),(t,n,r)=>{const i=uI(n);return i?e(t,i,r):t},t,n)}forEachFieldDef(e,t){AI(this.getMapping(),(t,n)=>{const r=uI(t);r&&e(r,n)},t)}}function YY(e,t,n,r){if(bI(t,n)){const i=LY(e)&&(e.axis(n)||e.legend(n))||{},o=GP(t,{expr:"datum"}),a=GP(t,{expr:"datum",binSuffix:"end"});return{formulaAs:GP(t,{binSuffix:"range",forAs:!0}),formula:cq(o,a,i.format,r)}}return{}}function VY(e,t){return`${eB(e)}_${t}`}function XY(e,t){return{signal:e.getName(t+"_bins"),extentSignal:e.getName(t+"_extent")}}function JY(e){return"as"in e}function QY(e,t,n){let r;r=JY(e)?Object(H["I"])(e.as)?[e.as,e.as+"_end"]:[e.as[0],e.as[1]]:[GP(e,{forAs:!0}),GP(e,{binSuffix:"end",forAs:!0})];const i=fI(t,void 0)||{},o=VY(i,e.field),{signal:a,extentSignal:u}=XY(n,o),s=Object.assign({bin:i,field:e.field,as:r},a?{signal:a}:{},u?{extentSignal:u}:{});return{key:o,binComponent:s}}class KY extends gq{constructor(e,t){super(e),this.bins=t}clone(){return new KY(null,jN(this.bins))}static makeFromEncoding(e,t){const n=t.reduceFieldDef((e,n,r)=>{if(PP(n)&&tB(n.bin)){const{key:i,binComponent:o}=QY(n,n.bin,t);e[i]=Object.assign({},o,e[i],YY(t,n,r,t.config))}return e},{});return 0===QN(n).length?null:new KY(e,n)}static makeFromTransform(e,t,n){const{key:r,binComponent:i}=QY(t,t.bin,n);return new KY(e,{[r]:i})}merge(e){this.bins=Object.assign({},this.bins,e.bins),e.remove()}producedFields(){return new Set(IN(KN(this.bins).map(e=>e.as)))}dependentFields(){return new Set(KN(this.bins).map(e=>e.field))}hash(){return"Bin "+zN(this.bins)}assemble(){return IN(KN(this.bins).map(e=>{const t=[],n=Object.assign({type:"bin",field:e.field,as:e.as,signal:e.signal},e.bin);return!e.bin.extent&&e.extentSignal&&(t.push({type:"extent",field:e.field,signal:e.extentSignal}),n.extent={signal:e.extentSignal}),t.push(n),e.formula&&t.push({type:"formula",expr:e.formula,as:e.formulaAs}),t}))}}class ZY extends gq{constructor(e,t,n){super(e),this.model=t,this.filter=n,this.expr=UW(this.model,this.filter,this),this._dependentFields=yq(this.expr)}clone(){return new ZY(null,this.model,jN(this.filter))}dependentFields(){return this._dependentFields}assemble(){return{type:"filter",expr:this.expr}}hash(){return"Filter "+this.expr}}class eV extends gq{constructor(e,t){super(e),this.transform=t,this.transform=jN(t);const{flatten:n,as:r=[]}=this.transform;this.transform.as=n.map((e,t)=>r[t]||e)}clone(){return new eV(this.parent,jN(this.transform))}producedFields(){return new Set(this.transform.as)}hash(){return"FlattenTransform "+zN(this.transform)}assemble(){const{flatten:e,as:t}=this.transform,n={type:"flatten",fields:e,as:t};return n}}class tV extends gq{constructor(e,t){super(e),this.transform=t,this.transform=jN(t);const n=this.transform.as||[void 0,void 0];this.transform.as=[n[0]||"key",n[1]||"value"]}clone(){return new tV(null,jN(this.transform))}producedFields(){return new Set(this.transform.as)}hash(){return"FoldTransform "+zN(this.transform)}assemble(){const{fold:e,as:t}=this.transform,n={type:"fold",fields:e,as:t};return n}}class nV extends gq{constructor(e,t,n,r){super(e),this.fields=t,this.geojson=n,this.signal=r}clone(){return new nV(null,jN(this.fields),this.geojson,this.signal)}static parseAll(e,t){let n=0;if([[qT,$T],[WT,UT]].forEach(r=>{const i=r.map(e=>t.channelHasField(e)?t.fieldDef(e).field:void 0);(i[0]||i[1])&&(e=new nV(e,i,null,t.getName("geojson_"+n++)))}),t.channelHasField(YT)){const r=t.fieldDef(YT);r.type===jP&&(e=new nV(e,null,r.field,t.getName("geojson_"+n++)))}return e}assemble(){return Object.assign({type:"geojson"},this.fields?{fields:this.fields}:{},this.geojson?{geojson:this.geojson}:{},{signal:this.signal})}}class rV extends gq{constructor(e,t,n,r){super(e),this.projection=t,this.fields=n,this.as=r}clone(){return new rV(null,this.projection,jN(this.fields),jN(this.as))}static parseAll(e,t){return t.projectionName()?([[qT,$T],[WT,UT]].forEach(n=>{const r=n.map(e=>t.channelHasField(e)?t.fieldDef(e).field:void 0),i=n[0]===WT?"2":"";(r[0]||r[1])&&(e=new rV(e,t.projectionName(),r,[t.getName("x"+i),t.getName("y"+i)]))}),e):e}assemble(){return{type:"geopoint",projection:this.projection,fields:this.fields,as:this.as}}}class iV extends gq{clone(){return new iV(null)}constructor(e){super(e)}producedFields(){return new Set([i$])}assemble(){return{type:"identifier",as:i$}}}const oV={vgMark:"area",encodeEntry:e=>Object.assign({},iH(e,{size:"ignore",orient:"include"}),vH("x",e,"zeroOrMin"),vH("y",e,"zeroOrMin"),bH(e,"zeroOrMin","horizontal"===e.markDef.orient?"x2":"y2"),cH(e))},aV={vgMark:"rect",encodeEntry:e=>Object.assign({},iH(e,{size:"ignore",orient:"ignore"}),uV(e),sV(e))};function uV(e){const{config:t,encoding:n,markDef:r,width:i}=e,o=r.orient,a=n.size,u=n.x,s=n.x2,c=e.scaleName(zT),l=e.getScaleComponent(zT);if(BP(u)&&nB(u.bin))return mH(u,s,zT,c,fT(r.binSpacing,t.bar.binSpacing),l.get("reverse"));if("horizontal"===o||s)return Object.assign({},vH("x",e,"zeroOrMin"),bH(e,"zeroOrMin","x2"));if(BP(u)){const n=l.get("type");if(tB(u.bin)&&!a&&!zL(n))return mH(u,void 0,zT,e.scaleName("x"),fT(r.binSpacing,t.bar.binSpacing),l.get("reverse"));if(n===vL.BAND)return pH(u,"x",e)}return gH("x",e,Object.assign({},ZW(i)),cV(r,c,l,t))}function sV(e){const{config:t,encoding:n,height:r,markDef:i}=e,o=i.orient,a=n.size,u=n.y,s=n.y2,c=e.scaleName(NT),l=e.getScaleComponent(NT);if(BP(u)&&nB(u.bin))return mH(u,s,NT,c,fT(i.binSpacing,t.bar.binSpacing),l.get("reverse"));if("vertical"===o||s)return Object.assign({},vH("y",e,"zeroOrMin"),bH(e,"zeroOrMin","y2"));if(BP(u)){const n=l.get("type");if(tB(u.bin)&&!a&&!zL(n))return mH(u,void 0,NT,e.scaleName("y"),fT(i.binSpacing,t.bar.binSpacing),l.get("reverse"));if(n===vL.BAND)return pH(u,"y",e)}return gH("y",e,ZW(r),cV(i,c,l,t))}function cV(e,t,n,r){if(void 0!==e.size)return{value:e.size};const i=rq("size",e,r,{skipGeneralMarkConfig:!0});if(void 0!==i)return{value:i};if(n){const e=n.get("type");if("point"!==e&&"band"!==e)return{value:r.bar.continuousBandSize};if(void 0!==r.bar.discreteBandSize)return{value:r.bar.discreteBandSize};if(e!==vL.POINT)return VW(t);{const e=n.get("range");if(GU(e)&&Object(H["F"])(e.step))return{value:e.step-1};BB(IB.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL)}}const o=fT(r.bar.discreteBandSize,r.scale.rangeStep?r.scale.rangeStep-1:void 0,20);return{value:o}}const lV={vgMark:"shape",encodeEntry:e=>Object.assign({},iH(e,{size:"ignore",orient:"ignore"})),postEncodingTransform:e=>{const{encoding:t}=e,n=t.shape,r=Object.assign({type:"geoshape",projection:e.projectionName()},n&&BP(n)&&n.type===jP?{field:GP(n,{expr:"datum"})}:{});return[r]}},fV={vgMark:"line",encodeEntry:e=>{const{width:t,height:n}=e;return Object.assign({},iH(e,{size:"ignore",orient:"ignore"}),vH("x",e,ZW(t)),vH("y",e,ZW(n)),lH("size",e,{vgChannel:"strokeWidth"}),cH(e))}},dV={vgMark:"trail",encodeEntry:e=>{const{width:t,height:n}=e;return Object.assign({},iH(e,{size:"include",orient:"ignore"}),vH("x",e,ZW(t)),vH("y",e,ZW(n)),lH("size",e),cH(e))}};function hV(e,t){const{config:n,markDef:r,width:i,height:o}=e;return Object.assign({},iH(e,{size:"include",orient:"ignore"}),vH("x",e,ZW(i)),vH("y",e,ZW(o)),lH("size",e,{defaultValue:rq("size",r,n)}),pV(e,n,t))}function pV(e,t,n){return n?{shape:{value:n}}:lH("shape",e,{defaultValue:rq("shape",e.markDef,t)})}const gV={vgMark:"symbol",encodeEntry:e=>hV(e)},mV={vgMark:"symbol",encodeEntry:e=>hV(e,"circle")},vV={vgMark:"symbol",encodeEntry:e=>hV(e,"square")},bV={vgMark:"rect",encodeEntry:e=>Object.assign({},iH(e,{size:"ignore",orient:"ignore"}),yV(e),xV(e))};function yV(e){const t=e.encoding.x,n=e.encoding.x2,r=e.getScaleComponent(zT),i=r?r.get("type"):void 0,o=e.scaleName(zT);if(BP(t)&&(tB(t.bin)||nB(t.bin)))return mH(t,n,zT,o,0,r.get("reverse"));if(BP(t)&&r&&zL(i)){if(i===vL.BAND)return pH(t,"x",e);throw new Error(IB.scaleTypeNotWorkWithMark(hB,i))}return Object.assign({},vH("x",e,"zeroOrMax"),bH(e,"zeroOrMin","x2"))}function xV(e){const t=e.encoding.y,n=e.encoding.y2,r=e.getScaleComponent(NT),i=r?r.get("type"):void 0,o=e.scaleName(NT);if(BP(t)&&(tB(t.bin)||nB(t.bin)))return mH(t,n,NT,o,0,r.get("reverse"));if(BP(t)&&r&&zL(i)){if(i===vL.BAND)return pH(t,"y",e);throw new Error(IB.scaleTypeNotWorkWithMark(hB,i))}return Object.assign({},vH("y",e,"zeroOrMax"),bH(e,"zeroOrMin","y2"))}const wV={vgMark:"rule",encodeEntry:e=>{const{markDef:t,width:n,height:r}=e,i=t.orient;return e.encoding.x||e.encoding.y||e.encoding.latitude||e.encoding.longitude?Object.assign({},iH(e,{size:"ignore",orient:"ignore"}),vH("x",e,"horizontal"===i?"zeroOrMin":ZW(n)),vH("y",e,"vertical"===i?"zeroOrMin":ZW(r)),"vertical"!==i?bH(e,"zeroOrMax","x2"):{},"horizontal"!==i?bH(e,"zeroOrMax","y2"):{},lH("size",e,{vgChannel:"strokeWidth",defaultValue:t.size})):{}}},OV={vgMark:"text",encodeEntry:e=>{const{config:t,encoding:n,width:r,height:i,markDef:o}=e,a=fT(o.fontSize,o.size,iq("fontSize",o,t.style),iq("size",o,t.style),t[o.type].fontSize,t[o.type].size);return Object.assign({},iH(e,{size:"ignore",orient:"ignore"}),vH("x",e,ZW(r)),vH("y",e,ZW(i)),hH(e),lH("size",e,{defaultValue:a,vgChannel:"fontSize"}),uH("align",EV(e.markDef,n,t)))}};function EV(e,t,n){const r=e.align||rq("align",e,n);if(void 0===r)return"center"}const kV={vgMark:"rect",encodeEntry:e=>{const{config:t,markDef:n,width:r,height:i}=e,o=n.orient,a="horizontal"===o?"width":"height",u="horizontal"===o?"height":"width";return Object.assign({},iH(e,{size:"ignore",orient:"ignore"}),vH("x",e,ZW(r),"xc"),vH("y",e,ZW(i),"yc"),lH("size",e,{defaultValue:_V(e),vgChannel:a}),{[u]:{value:fT(n.thickness,t.tick.thickness)}})}};function _V(e){const{config:t,markDef:n}=e,r=n.orient,i=e.getScaleComponent("horizontal"===r?"x":"y");if(void 0!==n.size)return n.size;if(void 0!==t.tick.bandSize)return t.tick.bandSize;{const e=i?i.get("range"):void 0,n=e&&GU(e)?e.step:t.scale.rangeStep;if("number"!==typeof n)throw new Error("Function does not handle non-numeric rangeStep");return 3*n/4}}const AV={area:oV,bar:aV,circle:mV,geoshape:lV,line:fV,point:gV,rect:bV,rule:wV,square:vV,text:OV,tick:kV,trail:dV};function SV(e){return NN([sB,aB,dB],e.mark)?CV(e):FV(e)}const jV="faceted_path_";function CV(e){const t=MV(e.mark,e.encoding),n=FV(e,{fromPrefix:t.length>0?jV:""});return t.length>0?[{name:e.getName("pathgroup"),type:"group",from:{facet:{name:jV+e.requestDataName(y$),data:e.requestDataName(y$),groupby:t}},encode:{update:{width:{field:{group:"width"}},height:{field:{group:"height"}}}},marks:n}]:n}function DV(e){const{encoding:t,stack:n,mark:r,markDef:i}=e,o=t.order;if(Object(H["B"])(o)||!LP(o)){if((Object(H["B"])(o)||BP(o))&&!n)return fq(o,{expr:"datum"});if(xB(r)){const n=t["horizontal"===i.orient?"y":"x"];if(BP(n)){const t=n.sort,r=_$(t)?GP({aggregate:xI(e.encoding)?t.op:void 0,field:t.field},{expr:"datum"}):GP(n,{binSuffix:e.stack&&e.stack.impute?"mid":void 0,expr:"datum"});return{field:r,order:"descending"}}}else;}}function FV(e,t={fromPrefix:""}){const n=e.mark,r=fT(e.markDef.clip,zV(e)),i=nq(e.markDef),o=e.encoding.key,a=DV(e),u=AV[n].postEncodingTransform?AV[n].postEncodingTransform(e):null;return[Object.assign({name:e.getName("marks"),type:AV[n].vgMark},r?{clip:!0}:{},i?{style:i}:{},o?{key:{field:o.field}}:{},a?{sort:a}:{},{from:{data:t.fromPrefix+e.requestDataName(y$)},encode:{update:AV[n].encodeEntry(e)}},u?{transform:u}:{})]}function MV(e,t){return QN(t).reduce((n,r)=>{switch(r){case"x":case"y":case"order":case"href":case"x2":case"y2":case"xError":case"yError":case"xError2":case"yError2":case"latitude":case"longitude":case"latitude2":case"longitude2":case"text":case"shape":case"tooltip":return n;case"detail":case"key":const i=t[r];return(Object(H["B"])(i)||BP(i))&&(Object(H["B"])(i)?i:[i]).forEach(e=>{e.aggregate||n.push(GP(e,{}))}),n;case"size":if("trail"===e)return n;case"color":case"fill":case"stroke":case"opacity":case"fillOpacity":case"strokeOpacity":case"strokeWidth":const o=sI(t[r]);return o&&!o.aggregate&&n.push(GP(o,{})),n;default:throw new Error(`Bug: Channel ${r} unimplemented for line mark`)}},[])}function zV(e){const t=e.getScaleComponent("x"),n=e.getScaleComponent("y");return!!(t&&t.get("domainRaw")||n&&n.get("domainRaw"))}class NV extends gq{constructor(e,t){super(e),this.transform=t}clone(){return new NV(null,jN(this.transform))}producedFields(){return new Set([this.transform.impute])}processSequence(e){const{start:t=0,stop:n,step:r}=e,i=[t,n,...r?[r]:[]].join(",");return{signal:`sequence(${i})`}}static makeFromTransform(e,t){return new NV(e,t)}static makeFromEncoding(e,t){const n=t.encoding,r=n.x,i=n.y;if(BP(r)&&BP(i)){const o=r.impute?r:i.impute?i:void 0;if(void 0===o)return;const a=r.impute?i:i.impute?r:void 0,{method:u,value:s,frame:c,keyvals:l}=o.impute,f=MV(t.mark,n);return new NV(e,Object.assign({impute:o.field,key:a.field},u?{method:u}:{},void 0!==s?{value:s}:{},c?{frame:c}:{},void 0!==l?{keyvals:l}:{},f.length?{groupby:f}:{}))}return null}hash(){return"Impute "+zN(this.transform)}assemble(){const{impute:e,key:t,keyvals:n,method:r,groupby:i,value:o,frame:a=[null,null]}=this.transform,u=Object.assign({type:"impute",field:e,key:t},n?{keyvals:kU(n)?this.processSequence(n):n}:{},{method:"value"},i?{groupby:i}:{},{value:null});let s;if(r&&"value"!==r){const t=Object.assign({type:"window",as:[`imputed_${e}_value`],ops:[r],fields:[e],frame:a,ignorePeers:!1},i?{groupby:i}:{}),n={type:"formula",expr:`datum.${e} === null ? datum.imputed_${e}_value : datum.${e}`,as:e};s=[t,n]}else{const t={type:"formula",expr:`datum.${e} === null ? ${o} : datum.${e}`,as:e};s=[t]}return[u,...s]}}class TV extends OH{constructor(e={},t={},n=!1){super(e,t),this.explicit=e,this.implicit=t,this.parseNothing=n}clone(){const e=super.clone();return e.parseNothing=this.parseNothing,e}}class RV extends gq{constructor(e,t,n){super(e),this.transform=t,this.secondary=n}clone(){return new RV(null,jN(this.transform),this.secondary)}static make(e,t,n,r){const i=t.component.data.sources;let o=rX(n.from.data,i);o||(o=new dG(n.from.data),i.push(o));const a=t.getName("lookup_"+r),u=new mq(o,a,"lookup",t.component.data.outputNodeRefCounts);return t.component.data.outputNodes[a]=u,new RV(e,n,u.getSource())}producedFields(){return new Set(this.transform.from.fields||(this.transform.as instanceof Array?this.transform.as:[this.transform.as]))}hash(){return"Lookup "+zN({transform:this.transform,secondary:this.secondary})}assemble(){let e;if(this.transform.from.fields)e=Object.assign({values:this.transform.from.fields},this.transform.as?{as:this.transform.as instanceof Array?this.transform.as:[this.transform.as]}:{});else{let t=this.transform.as;Object(H["I"])(t)||(BB(IB.NO_FIELDS_NEEDS_AS),t="_lookup"),e={as:[t]}}return Object.assign({type:"lookup",from:this.secondary,key:this.transform.from.key,fields:[this.transform.lookup]},e,this.transform.default?{default:this.transform.default}:{})}}class BV extends gq{constructor(e,t){super(e),this.transform=t}clone(){return new BV(null,jN(this.transform))}hash(){return"SampleTransform "+zN(this.transform)}assemble(){return{type:"sample",size:this.transform.sample}}}function PV(e){let t=0;function n(r,i){if(r instanceof dG&&!m$(r.data)){e.push(i);const t={name:null,source:i.name,transform:[]};i=t}if(r instanceof wG&&(r.parent instanceof dG&&!i.source?(i.format=Object.assign({},i.format||{},{parse:r.assembleFormatParse()}),i.transform=i.transform.concat(r.assembleTransforms(!0))):i.transform=i.transform.concat(r.assembleTransforms())),r instanceof yG)return i.name||(i.name="data_"+t++),!i.source||i.transform.length>0?(e.push(i),r.data=i.name):r.data=i.source,void r.assemble().forEach(t=>e.push(t));if((r instanceof ZY||r instanceof xq||r instanceof rV||r instanceof nV||r instanceof bG||r instanceof RV||r instanceof _G||r instanceof tV||r instanceof eV||r instanceof iV||r instanceof BV)&&i.transform.push(r.assemble()),(r instanceof KY||r instanceof Rq||r instanceof NV||r instanceof kG)&&(i.transform=i.transform.concat(r.assemble())),r instanceof mq)if(i.source&&0===i.transform.length)r.setSource(i.source);else if(r.parent instanceof mq)r.setSource(i.name);else if(i.name||(i.name="data_"+t++),r.setSource(i.name),1===r.numChildren()){e.push(i);const t={name:null,source:i.name,transform:[]};i=t}switch(r.numChildren()){case 0:r instanceof mq&&(!i.source||i.transform.length>0)&&e.push(i);break;case 1:n(r.children[0],i);break;default:i.name||(i.name="data_"+t++);let o=i.name;!i.source||i.transform.length>0?e.push(i):o=i.source,r.children.forEach(e=>{const t={name:null,source:o,transform:[]};n(e,t)});break}}return n}function IV(e){const t=[],n=PV(t);return e.children.forEach(t=>n(t,{source:e.name,name:null,transform:[]})),t}function LV(e,t){const n=[],r=PV(n);let i=0;e.sources.forEach(e=>{e.hasName()||(e.dataName="source_"+i++);const t=e.assemble();r(e,t)}),n.forEach(e=>{0===e.transform.length&&delete e.transform});let o=0;for(let a=0;a<n.length;a++){const e=n[a];0!==(e.transform||[]).length||e.source||n.splice(o++,0,n.splice(a,1)[0])}for(const a of n)for(const t of a.transform||[])"lookup"===t.type&&(t.from=e.outputNodes[t.from].getSource());for(const a of n)a.name in t&&(a.values=t[a.name]);return n}function $V(e){WV(e);const t=e.component.layoutSize;t.setWithExplicit("width",HV(e,"width")),t.setWithExplicit("height",HV(e,"height"))}const UV=$V;function qV(e){WV(e);const t=e.component.layoutSize,n=e.isVConcat?"width":"height";t.setWithExplicit(n,HV(e,n))}function WV(e){for(const t of e.children)t.parseLayoutSize()}function HV(e,t){const n="width"===t?"x":"y",r=e.component.resolve;let i;for(const o of e.children){const e=o.component.layoutSize.getWithExplicit(t),a=r.scale[n];if("independent"===a&&"range-step"===e.value){i=void 0;break}if(i){if("independent"===a&&i.value!==e.value){i=void 0;break}i=SH(i,e,t,"")}else i=e}if(i){for(const n of e.children)e.renameSignal(n.getName(t),e.getName(t)),n.component.layoutSize.set(t,"merged",!1);return i}return{explicit:!1,value:void 0}}function GV(e){const t=e.component.layoutSize;if(!t.explicit.width){const n=YV(e,"width");t.set("width",n,!1)}if(!t.explicit.height){const n=YV(e,"height");t.set("height",n,!1)}}function YV(e,t){const n="width"===t?"x":"y",r=e.config,i=e.getScaleComponent(n);if(i){const e=i.get("type"),n=i.get("range");return zL(e)&&GU(n)?"range-step":r.view[t]}return e.hasProjection?r.view[t]:"width"===t&&"text"===e.mark?r.scale.textXRangeStep:r.scale.rangeStep||PL.rangeStep}function VV(e,t){return ZV(e,t)}function XV(e,t){return ZV(e,t)}function JV(e,t){return FP(e.field)?e.field.repeat in t?Object.assign({},e,{field:t[e.field.repeat]}):void BB(IB.noSuchRepeatedValue(e.field.repeat)):e}function QV(e,t){if(e=JV(e,t),void 0!==e){if(null===e)return null;if(zP(e)&&_$(e.sort)){const n=JV(e.sort,t);e=Object.assign({},e,n?{sort:n}:{})}return e}}function KV(e,t){if(!BP(e)){if(TP(e)){const n=QV(e.condition,t);if(n)return Object.assign({},e,{condition:n});{const{condition:t}=e,n=P(e,["condition"]);return n}}return e}{const n=QV(e,t);if(n)return n;if(NP(e))return{condition:e.condition}}}function ZV(e,t){const n={};for(const r in e)if(e.hasOwnProperty(r)){const i=e[r];if(Object(H["B"])(i))n[r]=i.map(e=>KV(e,t)).filter(e=>e);else{const e=KV(i,t);void 0!==e&&(n[r]=e)}}return n}function eX(e,t,n){return GP(t,Object.assign({suffix:"by_"+GP(e)},n||{}))}class tX extends GY{constructor(e,t,n,r,i){super(e,t,n,i,r,e.resolve),this.type="facet",this.child=LX(e.spec,this,this.getName("child"),void 0,r,i,!1),this.children=[this.child];const o=VV(e.facet,r);this.facet=this.initFacet(o)}initFacet(e){return SI(e,(e,t,n)=>NN([HT,GT],n)?void 0===t.field?(BB(IB.emptyFieldDef(t,n)),e):(e[n]=cI(t,n),e):(BB(IB.incompatibleChannel(n,"facet")),e),{})}channelHasField(e){return!!this.facet[e]}fieldDef(e){return this.facet[e]}parseData(){this.component.data=aX(this),this.child.parseData()}parseLayoutSize(){WV(this)}parseSelection(){this.child.parseSelection(),this.component.selection=this.child.component.selection}parseMarkGroup(){this.child.parseMarkGroup()}parseAxisAndHeader(){this.child.parseAxisAndHeader(),this.parseHeader("column"),this.parseHeader("row"),this.mergeChildAxis("x"),this.mergeChildAxis("y")}parseHeader(e){if(this.channelHasField(e)){const t=this.facet[e];let n=nI(t,this.config,{allowDisabling:!0});this.child.component.layoutHeaders[e].title&&(n+=" / "+this.child.component.layoutHeaders[e].title,this.child.component.layoutHeaders[e].title=null),this.component.layoutHeaders[e]={title:n,facetFieldDef:t,header:[this.makeHeaderComponent(e,!0)]}}}makeHeaderComponent(e,t){const n="row"===e?"height":"width";return{labels:t,sizeSignal:this.child.component.layoutSize.get(n)?this.child.getSizeSignalRef(n):void 0,axes:[]}}mergeChildAxis(e){const{child:t}=this;if(t.component.axes[e]){const{layoutHeaders:n,resolve:r}=this.component;if(r.axis[e]=wH(r,e),"shared"===r.axis[e]){const r="x"===e?"column":"row",i=n[r];for(const n of t.component.axes[e]){const e=kq(n.get("orient"));i[e]=i[e]||[this.makeHeaderComponent(r,!1)];const t=ZU(n,"main",this.config,{header:!0});i[e][0].axes.push(t),n.mainExtracted=!0}}}}assembleSelectionTopLevelSignals(e){return this.child.assembleSelectionTopLevelSignals(e)}assembleSelectionSignals(){return this.child.assembleSelectionSignals(),[]}assembleSelectionData(e){return this.child.assembleSelectionData(e)}getHeaderLayoutMixins(){const e={};return["row","column"].forEach(t=>{["header","footer"].forEach(n=>{const r=this.component.layoutHeaders[t],i=r[n];if(i&&i[0]){const i="row"===t?"height":"width",o="header"===n?"headerBand":"footerBand";this.child.component.layoutSize.get(i)||(e[o]=e[o]||{},e[o][t]=.5),r.title&&(e.offset=e.offset||{},e.offset["row"===t?"rowTitle":"columnTitle"]=10)}})}),e}assembleDefaultLayout(){const e=this.channelHasField("column")?this.columnDistinctSignal():1;return Object.assign({},this.getHeaderLayoutMixins(),{columns:e,bounds:"full",align:"all"})}assembleLayoutSignals(){return this.child.assembleLayoutSignals()}columnDistinctSignal(){if(!(this.parent&&this.parent instanceof tX)){const e=this.getName("column_domain");return{signal:`length(data('${e}'))`}}}assembleGroup(e){return this.parent&&this.parent instanceof tX?Object.assign({},this.channelHasField("column")?{encode:{update:{columns:{field:GP(this.facet.column,{prefix:"distinct"})}}}}:{},super.assembleGroup(e)):super.assembleGroup(e)}getCardinalityAggregateForChild(){const e=[],t=[],n=[];if(this.child instanceof tX){if(this.child.channelHasField("column")){const r=GP(this.child.facet.column);e.push(r),t.push("distinct"),n.push("distinct_"+r)}}else for(const r of["x","y"]){const i=this.child.component.scales[r];if(i&&!i.merged){const o=i.get("type"),a=i.get("range");if(zL(o)&&GU(a)){const i=eY(this.child,r),o=ZG(i);o?(e.push(o),t.push("distinct"),n.push("distinct_"+o)):BB("Unknown field for ${channel}.  Cannot calculate view size.")}}}return{fields:e,ops:t,as:n}}assembleFacet(){const{name:e,data:t}=this.component.data.facetRoot,{row:n,column:r}=this.facet,{fields:i,ops:o,as:a}=this.getCardinalityAggregateForChild(),u=[];["row","column"].forEach(e=>{const t=this.facet[e];if(t){u.push(GP(t));const{sort:s}=t;if(_$(s)){const{field:e,op:u}=s,c=eX(t,s);n&&r?(i.push(c),o.push("max"),a.push(c)):(i.push(e),o.push(u),a.push(c))}else if(Object(H["B"])(s)){const n=wq(t,e);i.push(n),o.push("max"),a.push(n)}}});const s=!!n&&!!r;return Object.assign({name:e,data:t,groupby:u},s||i.length?{aggregate:Object.assign({},s?{cross:s}:{},i.length?{fields:i,ops:o,as:a}:{})}:{})}headerSortFields(e){const{facet:t}=this,n=t[e];return n?_$(n.sort)?[eX(n,n.sort,{expr:"datum"})]:Object(H["B"])(n.sort)?[wq(n,e,{expr:"datum"})]:[GP(n,{expr:"datum"})]:[]}headerSortOrder(e){const{facet:t}=this,n=t[e];if(n){const{sort:e}=n,t=(_$(e)?e.order:!Object(H["B"])(e)&&e)||"ascending";return[t]}return[]}assembleMarks(){const{child:e}=this,t=this.component.data.facetRoot,n=IV(t),r=e.assembleLayoutSize(),i=e.assembleTitle(),o=e.assembleGroupStyle(),a=Object.assign({name:this.getName("cell"),type:"group"},i?{title:i}:{},o?{style:o}:{},{from:{facet:this.assembleFacet()},sort:{field:[...this.headerSortFields("row"),...this.headerSortFields("column")],order:[...this.headerSortOrder("row"),...this.headerSortOrder("column")]}},n.length>0?{data:n}:{},r?{encode:{update:r}}:{},e.assembleGroup(SW(this,[])));return[a]}getMapping(){return this.facet}}function nX(e,t){const{row:n,column:r}=t;if(n&&r){let t=null;for(const i of[n,r])if(_$(i.sort)){const{field:n,op:r}=i.sort;e=t=new _G(e,{window:[{op:r,field:n,as:eX(i,i.sort,{forAs:!0})}],groupby:[GP(i)],frame:[null,null]})}return t}return null}function rX(e,t){for(const n of t){const t=n.data;if(v$(e)&&v$(t)){const r=e.values,i=t.values;if(SN(r,i))return n}else if(m$(e)&&m$(t)){if(e.url===t.url)return n}else if(b$(e)&&e.name===n.dataName)return n}return null}function iX(e,t){if(e.data||!e.parent){const n=rX(e.data,t);if(n)return n.data.format=$N({},e.data.format,n.data.format),n;{const n=new dG(e.data);return t.push(n),n}}return e.parent.component.data.facetRoot?e.parent.component.data.facetRoot:e.parent.component.data.main}function oX(e,t,n){let r=0;for(const i of t.transforms){let o,a=void 0;if(CU(i))o=e=new xq(e,i),a="derived";else if(EU(i))o=e=wG.makeImplicitFromFilterTransform(e,i,n)||e,e=new ZY(e,t,i.filter);else if(DU(i))o=e=KY.makeFromTransform(e,i,t),a="number";else if(MU(i)){o=e=Rq.makeFromTransform(e,i),a="date";const t=n.getWithExplicit(i.field);void 0===t.value&&(e=new wG(e,{[i.field]:a}),n.set(i.field,a,!1))}else if(zU(i))o=e=bG.makeFromTransform(e,i),a="number",IW(t)&&(e=new iV(e));else if(_U(i))o=e=RV.make(e,t,i,r++),a="derived";else if(SU(i))o=e=new _G(e,i),a="number";else if(NU(i))o=e=kG.makeFromTransform(e,i),a="derived";else if(TU(i))o=e=new tV(e,i),a="derived";else if(jU(i))o=e=new eV(e,i),a="derived";else if(AU(i))e=new BV(e,i);else{if(!FU(i)){BB(IB.invalidTransformIgnored(i));continue}o=e=NV.makeFromTransform(e,i),a="derived"}if(o&&void 0!==a)for(const e of o.producedFields())n.set(e,a,!1)}return e}function aX(e){let t=iX(e,e.component.data.sources);const{outputNodes:n,outputNodeRefCounts:r}=e.component.data,i=e.parent?e.parent.component.data.ancestorParse.clone():new TV;e.data&&e.data.format&&null===e.data.format.parse&&(i.parseNothing=!0),t=wG.makeExplicit(t,e,i)||t,IW(e)&&(LY(e)||WY(e))&&(t=new iV(t));const o=e.parent&&WY(e.parent);(LY(e)||$Y(e))&&o&&(t=KY.makeFromEncoding(t,e)||t),e.transforms.length>0&&(t=oX(t,e,i)),t=wG.makeImplicitFromEncoding(t,e,i)||t,LY(e)&&(t=nV.parseAll(t,e),t=rV.parseAll(t,e)),(LY(e)||$Y(e))&&(o||(t=KY.makeFromEncoding(t,e)||t),t=Rq.makeFromEncoding(t,e)||t,t=xq.parseAllForSortIndex(t,e));const a=e.getName(x$),u=new mq(t,a,x$,r);if(n[a]=u,t=u,LY(e)){const n=bG.makeFromEncoding(t,e);n&&(t=n,IW(e)&&(t=new iV(t))),t=NV.makeFromEncoding(t,e)||t,t=kG.makeFromEncoding(t,e)||t}const s=e.getName(y$),c=new mq(t,s,y$,r);n[s]=c,t=c;let l=null;if($Y(e)){const r=e.getName("facet");t=xq.parseAllForSortIndex(t,e),t=nX(t,e.facet)||t,l=new yG(t,e,r,c.getSource()),n[r]=l,t=l}return Object.assign({},e.component.data,{outputNodes:n,outputNodeRefCounts:r,raw:u,main:c,facetRoot:l,ancestorParse:i})}class uX extends HY{constructor(e,t,n,r,i,o){super(e,t,n,r,i,o)}parseData(){this.component.data=aX(this),this.children.forEach(e=>{e.parseData()})}parseSelection(){this.component.selection={};for(const e of this.children)e.parseSelection(),QN(e.component.selection).forEach(t=>{this.component.selection[t]=e.component.selection[t]})}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxisAndHeader(){for(const e of this.children)e.parseAxisAndHeader()}assembleSelectionTopLevelSignals(e){return this.children.reduce((e,t)=>t.assembleSelectionTopLevelSignals(e),e)}assembleSelectionSignals(){return this.children.forEach(e=>e.assembleSelectionSignals()),[]}assembleLayoutSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleLayoutSignals()),Mq(this))}assembleSelectionData(e){return this.children.reduce((e,t)=>t.assembleSelectionData(e),e)}assembleMarks(){return this.children.map(e=>{const t=e.assembleTitle(),n=e.assembleGroupStyle(),r=e.assembleLayoutSize();return Object.assign({type:"group",name:e.getName("group")},t?{title:t}:{},n?{style:n}:{},r?{encode:{update:r}}:{},e.assembleGroup())})}}class sX extends uX{constructor(e,t,n,r,i){super(e,t,n,i,r,e.resolve),this.type="concat",e.resolve&&e.resolve.axis&&("shared"===e.resolve.axis.x||"shared"===e.resolve.axis.y)&&BB(IB.CONCAT_CANNOT_SHARE_AXIS),this.isVConcat=N$(e),this.children=(N$(e)?e.vconcat:e.hconcat).map((e,t)=>LX(e,this,this.getName("concat_"+t),void 0,r,i,!1))}parseLayoutSize(){qV(this)}parseAxisGroup(){return null}assembleDefaultLayout(){return Object.assign({},this.isVConcat?{columns:1}:{},{bounds:"full",align:"each"})}}function cX(e){return!1===e||null===e}class lX extends OH{constructor(e={},t={},n=!1){super(),this.explicit=e,this.implicit=t,this.mainExtracted=n}clone(){return new lX(jN(this.explicit),jN(this.implicit),this.mainExtracted)}hasAxisPart(e){return"axis"===e||("grid"===e||"title"===e?!!this.get(e):!cX(this.get(e)))}}function fX(e,t,n,r="",i){const o=("band"===i?["axisBand"]:[]).concat(["x"===n?"axisX":"axisY","axis"+r.substr(0,1).toUpperCase()+r.substr(1),"axis"]);for(const a of o)if(t[a]&&void 0!==t[a][e])return t[a][e]}function dX(e,t,n,r){const i=e.fieldDef(t)||("x"===t?e.fieldDef("x2"):"y"===t?e.fieldDef("y2"):void 0),o=e.axis(t),a=e.config;let u={};if(gI(i)){const n=e.getScaleComponent(t).get("type")===vL.UTC,r=lq("datum.value",i.timeUnit,o.format,a.axis.shortTimeLabels,null,n);r&&(u.text={signal:r})}return u=Object.assign({},u,n),0===QN(u).length?void 0:u}function hX(e,t){return!zL(e)&&!tB(t.bin)}function pX(e,t){const n="x"===t?"y":"x";if(e.getScaleComponent(n))return e.scaleName(n)}function gX(e,t,n,r){if(void 0!==t.labelAngle)return(t.labelAngle%360+360)%360;{const t=fX("labelAngle",e.config,n,xX(n),e.getScaleComponent(n).get("type"));return void 0!==t?(t%360+360)%360:n===zT&&NN([SP,_P],r.type)?270:void 0}}function mX(e,t){if(void 0!==e)return"top"===t||"bottom"===t?e<=45||315<=e?"top"===t?"bottom":"top":135<=e&&e<=225?"top"===t?"top":"bottom":"middle":e<=45||315<=e||135<=e&&e<=225?"middle":45<=e&&e<=135?"left"===t?"top":"bottom":"left"===t?"bottom":"top"}function vX(e,t){if(void 0!==e)return e=(e%360+360)%360,"top"===t||"bottom"===t?e%180===0?"center":0<e&&e<180?"top"===t?"right":"left":"top"===t?"left":"right":(e+90)%180===0?"center":90<=e&&e<270?"left"===t?"left":"right":"left"===t?"right":"left"}function bX(e,t){if("x"===t&&NN(["quantitative","temporal"],e.type))return!0}function yX(e,t){if("nominal"!==e.type)return"log"!==t||"greedy"}function xX(e){switch(e){case zT:return"bottom";case NT:return"left"}throw new Error(IB.INVALID_CHANNEL_FOR_AXIS)}function wX({fieldDef:e,scaleType:t,size:n,scaleName:r,specifiedAxis:i={}}){if(!zL(t)&&"log"!==t&&!NN(["month","hours","day","quarter"],e.timeUnit))return i.tickStep?{signal:`(domain('${r}')[1] - domain('${r}')[0]) / ${i.tickStep} + 1`}:tB(e.bin)?{signal:`ceil(${n.signal}/10)`}:{signal:`ceil(${n.signal}/40)`}}function OX(e,t,n,r){const i=e.values;if(i)return vI(n,i);if(n.type===kP){if(tB(n.bin)){const e=t.scaleDomain(r);if(e&&"unaggregated"!==e&&!LL(e))return i;const o=t.getName(GP(n,{suffix:"bins"}));return{signal:`sequence(${o}.start, ${o}.stop + ${o}.step, ${o}.step)`}}if(e.tickStep){const n=t.scaleName(r),i=e.tickStep;return{signal:`sequence(domain('${n}')[0], domain('${n}')[1] + ${i}, ${i})`}}}}function EX(e){return PR.reduce((t,n)=>(e.component.scales[n]&&e.axis(n)&&(t[n]=[DX(n,e)]),t),{})}const kX={bottom:"top",top:"bottom",left:"right",right:"left"};function _X(e){const{axes:t,resolve:n}=e.component,r={top:0,bottom:0,right:0,left:0};for(const i of e.children){i.parseAxisAndHeader();for(const r of QN(i.component.axes))n.axis[r]=wH(e.component.resolve,r),"shared"===n.axis[r]&&(t[r]=AX(t[r],i.component.axes[r]),t[r]||(n.axis[r]="independent",delete t[r]))}for(const i of[zT,NT])for(const o of e.children)if(o.component.axes[i]){if("independent"===n.axis[i]){t[i]=(t[i]||[]).concat(o.component.axes[i]);for(const e of o.component.axes[i]){const{value:t,explicit:n}=e.getWithExplicit("orient");if(r[t]>0&&!n){const n=kX[t];r[t]>r[n]&&e.set("orient",n,!1)}r[t]++}}delete o.component.axes[i]}}function AX(e,t){if(!e)return t.map(e=>e.clone());{if(e.length!==t.length)return;const n=e.length;for(let r=0;r<n;r++){const n=e[r],i=t[r];if(!!n!==!!i)return;if(n&&i){const t=n.getWithExplicit("orient"),o=i.getWithExplicit("orient");if(t.explicit&&o.explicit&&t.value!==o.value)return;e[r]=SX(n,i)}}}return e}function SX(e,t){for(const n of DT){const r=SH(e.getWithExplicit(n),t.getWithExplicit(n),n,"axis",(e,t)=>{switch(n){case"title":return pq(e,t);case"gridScale":return{explicit:e.explicit,value:fT(e.value,t.value)}}return AH(e,t,n,"axis")});e.setWithExplicit(n,r)}return e}function jX(e,t){const n="x"===t?"x2":"y2",r=e.fieldDef(t),i=e.fieldDef(n),o=r?r.title:void 0,a=i?i.title:void 0;return o&&a?hq(o,a):o||(a||(void 0!==o?o:void 0!==a?a:void 0))}function CX(e,t,n,r,i){switch(t){case"values":return!!n.values;case"encode":return!!n.encoding||!!n.labelAngle;case"title":if(e===jX(r,i))return!0}return e===n[t]}function DX(e,t){const n=t.axis(e),r=new lX;DT.forEach(i=>{const o=FX(i,n,e,t);if(void 0!==o){const a=CX(o,i,n,t,e),u=fX(i,t.config,e,r.get("orient"),t.getScaleComponent(e).get("type"));a||void 0===u?r.set(i,o,a):"grid"===i&&u&&r.set(i,u,!1)}});const i=n.encoding||{},o=kT.reduce((n,o)=>{if(!r.hasAxisPart(o))return n;const a=yH(i[o]||{},t),u="labels"===o?dX(t,e,a,r.get("orient")):a;return void 0!==u&&QN(u).length>0&&(n[o]={update:u}),n},{});return QN(o).length>0&&r.set("encode",o,!!n.encoding||void 0!==n.labelAngle),r}function FX(e,t,n,r){const i=r.fieldDef(n),o=gX(r,t,n,i);switch(e){case"scale":return r.scaleName(n);case"gridScale":return pX(r,n);case"format":return aq(i,t.format,r.config);case"grid":if(nB(r.fieldDef(n).bin))return!1;{const e=r.getScaleComponent(n).get("type");return fT(t.grid,hX(e,i))}case"labelAlign":return fT(t.labelAlign,vX(o,xX(n)));case"labelAngle":return o;case"labelBaseline":return fT(t.labelBaseline,mX(o,xX(n)));case"labelFlush":return fT(t.labelFlush,bX(i,n));case"labelOverlap":{const e=r.getScaleComponent(n).get("type");return fT(t.labelOverlap,yX(i,e))}case"orient":return fT(t.orient,xX(n));case"tickCount":{const e=r.getScaleComponent(n).get("type"),o=r.scaleName(n),a="x"===n?"width":"y"===n?"height":void 0,u=a?r.getSizeSignalRef(a):void 0;return fT(t.tickCount,wX({fieldDef:i,scaleType:e,size:u,scaleName:o,specifiedAxis:t}))}case"title":const e="x"===n?"x2":"y2",a=r.fieldDef(e);return fT(t.title,jX(r,n),dq([MP(i)],a?[MP(a)]:[]));case"values":return OX(t,r,i,n)}return CT(e)?t[e]:void 0}function MX(e,t,n){const r=OB(e)?Object.assign({},e):{type:e},i=r.orient||rq("orient",r,n);r.orient=RX(r.type,t,i),void 0!==i&&i!==r.orient&&BB(IB.orientOverridden(r.orient,i));const o=fT(r.opacity,rq("opacity",r,n));void 0===o&&(r.opacity=NX(r.type,t));const a=r.filled;void 0===a&&(r.filled=TX(r,n));const u=r.cursor||rq("cursor",r,n);return void 0===u&&(r.cursor=zX(r,t,n)),r}function zX(e,t,n){return t.href||e.href||rq("href",e,n)?"pointer":e.cursor}function NX(e,t){if(NN([cB,fB,mB,vB],e)&&!xI(t))return.7}function TX(e,t){const n=rq("filled",e,t),r=e.type;return fT(n,r!==cB&&r!==sB&&r!==pB)}function RX(e,t,n){switch(e){case cB:case mB:case vB:case lB:case hB:return}const{x:r,y:i,x2:o,y2:a}=t;switch(e){case uB:if(BP(r)&&nB(r.bin))return"vertical";if(BP(i)&&nB(i.bin))return"horizontal";if(a||o){if(n)return n;if(!o&&BP(r)&&r.type===kP&&!tB(r.bin))return"horizontal";if(!a&&BP(i)&&i.type===kP&&!tB(i.bin))return"vertical"}case pB:if(o&&a)return;case aB:if(a)return BP(i)&&nB(i.bin)?"horizontal":"vertical";if(o)return BP(r)&&nB(r.bin)?"vertical":"horizontal";if(e===pB){if(t.x&&!t.y)return"vertical";if(t.y&&!t.x)return"horizontal"}case sB:case fB:const u=BP(t.x)&&VP(t.x),s=BP(t.y)&&VP(t.y);if(u&&!s)return"tick"!==e?"horizontal":"vertical";if(!u&&s)return"tick"!==e?"vertical":"horizontal";if(u&&s){const r=t.x,i=t.y,o=r.type===AP,a=i.type===AP;return o&&!a?"tick"!==e?"vertical":"horizontal":!o&&a?"tick"!==e?"horizontal":"vertical":!r.aggregate&&i.aggregate?"tick"!==e?"vertical":"horizontal":r.aggregate&&!i.aggregate?"tick"!==e?"horizontal":"vertical":n||"vertical"}return n||void 0}return"vertical"}class BX extends GY{constructor(e,t,n,r={},i,o,a){super(e,t,n,o,i,void 0),this.fit=a,this.type="unit",this.specifiedScales={},this.specifiedAxes={},this.specifiedLegends={},this.specifiedProjection={},this.selection={},this.children=[],this.initSize(Object.assign({},r,e.width?{width:e.width}:{},e.height?{height:e.height}:{}));const u=OB(e.mark)?e.mark.type:e.mark,s=this.encoding=EI(XV(e.encoding||{},i),u);this.markDef=MX(e.mark,s,o),this.stack=M$(u,s,this.config.stack),this.specifiedScales=this.initScales(u,s),this.specifiedAxes=this.initAxes(s),this.specifiedLegends=this.initLegend(s),this.specifiedProjection=e.projection,this.selection=e.selection}get hasProjection(){const{encoding:e}=this,t=this.mark===gB,n=e&&cR.some(t=>BP(e[t]));return t||n}scaleDomain(e){const t=this.specifiedScales[e];return t?t.domain:void 0}axis(e){return this.specifiedAxes[e]}legend(e){return this.specifiedLegends[e]}initScales(e,t){return XR.reduce((e,n)=>{let r,i;const o=t[n];return BP(o)?(r=o,i=o.scale):TP(o)&&(r=o.condition,i=o.condition["scale"]),r&&(e[n]=i||{}),e},{})}initAxes(e){return[zT,NT].reduce((t,n)=>{const r=e[n];if(BP(r)||n===zT&&BP(e.x2)||n===NT&&BP(e.y2)){const e=BP(r)?r.axis:null;null!==e&&(t[n]=Object.assign({},e))}return t},{})}initLegend(e){return GR.reduce((t,n)=>{const r=e[n];if(r){const e=BP(r)?r.legend:TP(r)?r.condition["legend"]:null;null!==e&&!1!==e&&(t[n]=Object.assign({},e))}return t},{})}parseData(){this.component.data=aX(this)}parseLayoutSize(){GV(this)}parseSelection(){this.component.selection=_W(this,this.selection)}parseMarkGroup(){this.component.mark=SV(this)}parseAxisAndHeader(){this.component.axes=EX(this)}assembleSelectionTopLevelSignals(e){return jW(this,e)}assembleSelectionSignals(){return AW(this,[])}assembleSelectionData(e){return CW(this,e)}assembleLayout(){return null}assembleLayoutSignals(){return Mq(this)}assembleMarks(){let e=this.component.mark||[];return this.parent&&WY(this.parent)||(e=DW(this,e)),e.map(this.correctDataNames)}assembleLayoutSize(){return{width:this.getSizeSignalRef("width"),height:this.getSizeSignalRef("height")}}getMapping(){return this.encoding}toSpec(e,t){const n=jN(this.encoding);let r;return r={mark:this.markDef,encoding:n},e||(r.config=jN(this.config)),t||(r.data=jN(this.data)),r}get mark(){return this.markDef.type}channelHasField(e){return yI(this.encoding,e)}fieldDef(e){const t=this.encoding[e];return sI(t)}}class PX extends HY{constructor(e,t,n,r,i,o,a){super(e,t,n,o,i,e.resolve),this.type="layer";const u=Object.assign({},r,e.width?{width:e.width}:{},e.height?{height:e.height}:{});this.initSize(u),this.children=e.layer.map((e,t)=>{if(R$(e))return new PX(e,this,this.getName("layer_"+t),u,i,o,a);if(eU(e))return new BX(e,this,this.getName("layer_"+t),u,i,o,a);throw new Error(IB.INVALID_SPEC)})}parseData(){this.component.data=aX(this);for(const e of this.children)e.parseData()}parseLayoutSize(){$V(this)}parseSelection(){this.component.selection={};for(const e of this.children)e.parseSelection(),QN(e.component.selection).forEach(t=>{this.component.selection[t]=e.component.selection[t]})}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxisAndHeader(){_X(this)}assembleSelectionTopLevelSignals(e){return this.children.reduce((e,t)=>t.assembleSelectionTopLevelSignals(e),e)}assembleSelectionSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleSelectionSignals()),[])}assembleLayoutSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleLayoutSignals()),Mq(this))}assembleSelectionData(e){return this.children.reduce((e,t)=>t.assembleSelectionData(e),e)}assembleTitle(){let e=super.assembleTitle();if(e)return e;for(const t of this.children)if(e=t.assembleTitle(),e)return e}assembleLayout(){return null}assembleMarks(){return FW(this,IN(this.children.map(e=>e.assembleMarks())))}assembleLegends(){return this.children.reduce((e,t)=>e.concat(t.assembleLegends()),KH(this))}}class IX extends uX{constructor(e,t,n,r,i){super(e,t,n,i,r,e.resolve),this.type="repeat",e.resolve&&e.resolve.axis&&("shared"===e.resolve.axis.x||"shared"===e.resolve.axis.y)&&BB(IB.REPEAT_CANNOT_SHARE_AXIS),this.repeat=e.repeat,this.children=this._initChildren(e,this.repeat,r,i)}_initChildren(e,t,n,r){const i=[],o=t.row||[n?n.row:null],a=t.column||[n?n.column:null];for(const u of o)for(const t of a){const n=(u?"_"+u:"")+(t?"_"+t:""),o={row:u,column:t};i.push(LX(e.spec,this,this.getName("child"+n),void 0,o,r,!1))}return i}parseLayoutSize(){UV(this)}assembleDefaultLayout(){return{columns:this.repeat&&this.repeat.column?this.repeat.column.length:1,bounds:"full",align:"all"}}}function LX(e,t,n,r,i,o,a){if(QB(e))return new tX(e,t,n,i,o);if(R$(e))return new PX(e,t,n,r,i,o,a);if(eU(e))return new BX(e,t,n,r,i,o,a);if(B$(e))return new IX(e,t,n,i,o);if(z$(e))return new sX(e,t,n,i,o);throw new Error(IB.INVALID_SPEC)}function $X(e,t={}){t.logger&&TB(t.logger),t.fieldTitle&&eI(t.fieldTitle);try{const n=l$($N({},t.config,e.config)),r=P$(e,n),i=UU(e.autosize,n.autosize,R$(r)||eU(r)),o=LX(r,null,"",void 0,void 0,n,"fit"===i.type);return o.parse(),UG(o.component.data),qX(o,UX(e,n,i),e.datasets,e.usermeta)}finally{t.logger&&RB(),t.fieldTitle&&tI()}}function UX(e,t,n){return Object.assign({autosize:1===QN(n).length&&n.type?n.type:n},WU(t),WU(e))}function qX(e,t,n={},r){const i=e.config?p$(e.config):void 0,o=[].concat(e.assembleSelectionData([]),LV(e.component.data,n)),a=e.assembleProjections(),u=e.assembleTitle(),s=e.assembleGroupStyle();let c=e.assembleLayoutSignals();c=c.filter(e=>"width"!==e.name&&"height"!==e.name||void 0===e.value||(t[e.name]=+e.value,!1));const l=Object.assign({$schema:"https://vega.github.io/schema/vega/v4.json"},e.description?{description:e.description}:{},t,u?{title:u}:{},s?{style:s}:{},{data:o},a.length>0?{projections:a}:{},e.assembleGroup([...c,...e.assembleSelectionTopLevelSignals([])]),i?{config:i}:{},r?{usermeta:r}:{});return{spec:l}}function WX(e,t){if(QB(e)||B$(e))return GX(e,t);if(R$(e))return YX(e,t);if(eU(e))return HX(e,t);if(N$(e))return VX(e,t);if(T$(e))return XX(e,t);throw new Error(IB.INVALID_SPEC)}function HX(e,t){if(e.encoding){const{encoding:n,transform:r}=e,i=P(e,["encoding","transform"]),{bins:o,timeUnits:a,aggregate:u,groupby:s,encoding:c}=wI(n,t);return Object.assign({transform:[...r||[],...o,...a,...u.length?[{aggregate:u,groupby:s}]:[]]},i,{encoding:c})}return e}function GX(e,t){const{spec:n}=e,r=P(e,["spec"]);return Object.assign({},r,{spec:WX(n,t)})}function YX(e,t){const{layer:n}=e,r=P(e,["layer"]);return Object.assign({},r,{layer:n.map(e=>WX(e,t))})}function VX(e,t){const{vconcat:n}=e,r=P(e,["vconcat"]);return Object.assign({},r,{vconcat:n.map(e=>WX(e,t))})}function XX(e,t){const{hconcat:n}=e,r=P(e,["hconcat"]);return Object.assign({},r,{hconcat:n.map(e=>WX(e,t))})}const JX=gN.version;var QX=n("81ab"),KX=n.n(QX),ZX="vega-themes",eJ="2.9.1",tJ="Themes for stylized Vega and Vega-Lite visualizations.",nJ=["vega","vega-lite","themes","style"],rJ="BSD-3-Clause",iJ={name:"UW Interactive Data Lab",url:"https://idl.cs.washington.edu"},oJ=[{name:"Emily Gu",url:"https://github.com/emilygu"},{name:"Arvind Satyanarayan",url:"http://arvindsatya.com"},{name:"Jeffrey Heer",url:"https://idl.cs.washington.edu"},{name:"Dominik Moritz",url:"https://www.domoritz.de"}],aJ="build/vega-themes.js",uJ="build/vega-themes.module.js",sJ="build/vega-themes.min.js",cJ="build/vega-themes.min.js",lJ="build/vega-themes.module.d.ts",fJ={type:"git",url:"https://github.com/vega/vega-themes.git"},dJ=["src","build"],hJ={prebuild:"yarn clean",build:"rollup -c",clean:"rimraf build && rimraf examples/build","copy:data":"rsync -r node_modules/vega-datasets/data/* examples/data","copy:build":"rsync -r build/* examples/build","deploy:gh":"yarn build && mkdir -p examples/build && rsync -r build/* examples/build && gh-pages -d examples",prepublishOnly:"yarn clean && yarn build",preversion:"yarn lint",serve:"browser-sync start -s -f build examples --serveStatic examples",start:"yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",prepare:"beemo create-config",eslintbase:"beemo eslint .",format:"yarn eslintbase --fix",lint:"yarn eslintbase"},pJ={"@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^9.0.0","@wessberg/rollup-plugin-ts":"^1.3.4","browser-sync":"^2.26.12",concurrently:"^5.3.0","gh-pages":"^3.1.0",rollup:"^2.26.11","rollup-plugin-bundle-size":"^1.0.3","rollup-plugin-terser":"^7.0.2",typescript:"^4.0.2",vega:"^5.10.0","vega-lite":"^4.8.1","vega-lite-dev-config":"^0.14.6"},gJ={vega:"*","vega-lite":"*"},mJ={module:"vega-lite-dev-config",drivers:["typescript","prettier","eslint"]},vJ={name:ZX,version:eJ,description:tJ,keywords:nJ,license:rJ,author:iJ,contributors:oJ,main:aJ,module:uJ,unpkg:sJ,jsdelivr:cJ,types:lJ,repository:fJ,files:dJ,scripts:hJ,devDependencies:pJ,peerDependencies:gJ,beemo:mJ};const bJ="#fff",yJ="#888",xJ={background:"#333",title:{color:bJ},style:{"guide-label":{fill:bJ},"guide-title":{fill:bJ}},axis:{domainColor:bJ,gridColor:yJ,tickColor:bJ}},wJ="#4572a7",OJ={background:"#fff",arc:{fill:wJ},area:{fill:wJ},line:{stroke:wJ,strokeWidth:2},path:{stroke:wJ},rect:{fill:wJ},shape:{stroke:wJ},symbol:{fill:wJ,strokeWidth:1.5,size:50},axis:{bandPosition:.5,grid:!0,gridColor:"#000000",gridOpacity:1,gridWidth:.5,labelPadding:10,tickSize:5,tickWidth:.5},axisBand:{grid:!1,tickExtra:!0},legend:{labelBaseline:"middle",labelFontSize:11,symbolSize:50,symbolType:"square"},range:{category:["#4572a7","#aa4643","#8aa453","#71598e","#4598ae","#d98445","#94aace","#d09393","#b9cc98","#a99cbc"]}},EJ="#30a2da",kJ="#cbcbcb",_J="#999",AJ="#333",SJ="#f0f0f0",jJ="#333",CJ={arc:{fill:EJ},area:{fill:EJ},axis:{domainColor:kJ,grid:!0,gridColor:kJ,gridWidth:1,labelColor:_J,labelFontSize:10,titleColor:AJ,tickColor:kJ,tickSize:10,titleFontSize:14,titlePadding:10,labelPadding:4},axisBand:{grid:!1},background:SJ,group:{fill:SJ},legend:{labelColor:jJ,labelFontSize:11,padding:1,symbolSize:30,symbolType:"square",titleColor:jJ,titleFontSize:14,titlePadding:10},line:{stroke:EJ,strokeWidth:2},path:{stroke:EJ,strokeWidth:.5},rect:{fill:EJ},range:{category:["#30a2da","#fc4f30","#e5ae38","#6d904f","#8b8b8b","#b96db8","#ff9e27","#56cc60","#52d2ca","#52689e","#545454","#9fe4f8"],diverging:["#cc0020","#e77866","#f6e7e1","#d6e8ed","#91bfd9","#1d78b5"],heatmap:["#d6e8ed","#cee0e5","#91bfd9","#549cc6","#1d78b5"]},point:{filled:!0,shape:"circle"},shape:{stroke:EJ},bar:{binSpacing:2,fill:EJ,stroke:null},title:{anchor:"start",fontSize:24,fontWeight:600,offset:20}},DJ="#000",FJ={group:{fill:"#e5e5e5"},arc:{fill:DJ},area:{fill:DJ},line:{stroke:DJ},path:{stroke:DJ},rect:{fill:DJ},shape:{stroke:DJ},symbol:{fill:DJ,size:40},axis:{domain:!1,grid:!0,gridColor:"#FFFFFF",gridOpacity:1,labelColor:"#7F7F7F",labelPadding:4,tickColor:"#7F7F7F",tickSize:5.67,titleFontSize:16,titleFontWeight:"normal"},legend:{labelBaseline:"middle",labelFontSize:11,symbolSize:40},range:{category:["#000000","#7F7F7F","#1A1A1A","#999999","#333333","#B0B0B0","#4D4D4D","#C9C9C9","#666666","#DCDCDC"]}},MJ=22,zJ="normal",NJ="Benton Gothic, sans-serif",TJ=11.5,RJ="normal",BJ="#82c6df",PJ="Benton Gothic Bold, sans-serif",IJ="normal",LJ=13,$J={"category-6":["#ec8431","#829eb1","#c89d29","#3580b1","#adc839","#ab7fb4"],"fire-7":["#fbf2c7","#f9e39c","#f8d36e","#f4bb6a","#e68a4f","#d15a40","#ab4232"],"fireandice-6":["#e68a4f","#f4bb6a","#f9e39c","#dadfe2","#a6b7c6","#849eae"],"ice-7":["#edefee","#dadfe2","#c4ccd2","#a6b7c6","#849eae","#607785","#47525d"]},UJ={background:"#ffffff",title:{anchor:"start",color:"#000000",font:PJ,fontSize:MJ,fontWeight:zJ},arc:{fill:BJ},area:{fill:BJ},line:{stroke:BJ,strokeWidth:2},path:{stroke:BJ},rect:{fill:BJ},shape:{stroke:BJ},symbol:{fill:BJ,size:30},axis:{labelFont:NJ,labelFontSize:TJ,labelFontWeight:RJ,titleFont:PJ,titleFontSize:LJ,titleFontWeight:IJ},axisX:{labelAngle:0,labelPadding:4,tickSize:3},axisY:{labelBaseline:"middle",maxExtent:45,minExtent:45,tickSize:2,titleAlign:"left",titleAngle:0,titleX:-45,titleY:-11},legend:{labelFont:NJ,labelFontSize:TJ,symbolType:"square",titleFont:PJ,titleFontSize:LJ,titleFontWeight:IJ},range:{category:$J["category-6"],diverging:$J["fireandice-6"],heatmap:$J["fire-7"],ordinal:$J["fire-7"],ramp:$J["fire-7"]}},qJ="#ab5787",WJ="#979797",HJ={background:"#f9f9f9",arc:{fill:qJ},area:{fill:qJ},line:{stroke:qJ},path:{stroke:qJ},rect:{fill:qJ},shape:{stroke:qJ},symbol:{fill:qJ,size:30},axis:{domainColor:WJ,domainWidth:.5,gridWidth:.2,labelColor:WJ,tickColor:WJ,tickWidth:.2,titleColor:WJ},axisBand:{grid:!1},axisX:{grid:!0,tickSize:10},axisY:{domain:!1,grid:!0,tickSize:0},legend:{labelFontSize:11,padding:1,symbolSize:30,symbolType:"square"},range:{category:["#ab5787","#51b2e5","#703c5c","#168dd9","#d190b6","#00609f","#d365ba","#154866","#666666","#c4c4c4"]}},GJ="#3e5c69",YJ={background:"#fff",arc:{fill:GJ},area:{fill:GJ},line:{stroke:GJ},path:{stroke:GJ},rect:{fill:GJ},shape:{stroke:GJ},symbol:{fill:GJ},axis:{domainWidth:.5,grid:!0,labelPadding:2,tickSize:5,tickWidth:.5,titleFontWeight:"normal"},axisBand:{grid:!1},axisX:{gridWidth:.2},axisY:{gridDash:[3],gridWidth:.4},legend:{labelFontSize:11,padding:1,symbolType:"square"},range:{category:["#3e5c69","#6793a6","#182429","#0570b0","#3690c0","#74a9cf","#a6bddb","#e2ddf2"]}},VJ="#1696d2",XJ="#000000",JJ="#FFFFFF",QJ="Lato",KJ="Lato",ZJ="Lato",eQ="#DEDDDD",tQ=18,nQ={"main-colors":["#1696d2","#d2d2d2","#000000","#fdbf11","#ec008b","#55b748","#5c5859","#db2b27"],"shades-blue":["#CFE8F3","#A2D4EC","#73BFE2","#46ABDB","#1696D2","#12719E","#0A4C6A","#062635"],"shades-gray":["#F5F5F5","#ECECEC","#E3E3E3","#DCDBDB","#D2D2D2","#9D9D9D","#696969","#353535"],"shades-yellow":["#FFF2CF","#FCE39E","#FDD870","#FCCB41","#FDBF11","#E88E2D","#CA5800","#843215"],"shades-magenta":["#F5CBDF","#EB99C2","#E46AA7","#E54096","#EC008B","#AF1F6B","#761548","#351123"],"shades-green":["#DCEDD9","#BCDEB4","#98CF90","#78C26D","#55B748","#408941","#2C5C2D","#1A2E19"],"shades-black":["#D5D5D4","#ADABAC","#848081","#5C5859","#332D2F","#262223","#1A1717","#0E0C0D"],"shades-red":["#F8D5D4","#F1AAA9","#E9807D","#E25552","#DB2B27","#A4201D","#6E1614","#370B0A"],"one-group":["#1696d2","#000000"],"two-groups-cat-1":["#1696d2","#000000"],"two-groups-cat-2":["#1696d2","#fdbf11"],"two-groups-cat-3":["#1696d2","#db2b27"],"two-groups-seq":["#a2d4ec","#1696d2"],"three-groups-cat":["#1696d2","#fdbf11","#000000"],"three-groups-seq":["#a2d4ec","#1696d2","#0a4c6a"],"four-groups-cat-1":["#000000","#d2d2d2","#fdbf11","#1696d2"],"four-groups-cat-2":["#1696d2","#ec0008b","#fdbf11","#5c5859"],"four-groups-seq":["#cfe8f3","#73bf42","#1696d2","#0a4c6a"],"five-groups-cat-1":["#1696d2","#fdbf11","#d2d2d2","#ec008b","#000000"],"five-groups-cat-2":["#1696d2","#0a4c6a","#d2d2d2","#fdbf11","#332d2f"],"five-groups-seq":["#cfe8f3","#73bf42","#1696d2","#0a4c6a","#000000"],"six-groups-cat-1":["#1696d2","#ec008b","#fdbf11","#000000","#d2d2d2","#55b748"],"six-groups-cat-2":["#1696d2","#d2d2d2","#ec008b","#fdbf11","#332d2f","#0a4c6a"],"six-groups-seq":["#cfe8f3","#a2d4ec","#73bfe2","#46abdb","#1696d2","#12719e"],"diverging-colors":["#ca5800","#fdbf11","#fdd870","#fff2cf","#cfe8f3","#73bfe2","#1696d2","#0a4c6a"]},rQ={background:JJ,title:{anchor:"start",fontSize:tQ,font:QJ},axisX:{domain:!0,domainColor:XJ,domainWidth:1,grid:!1,labelFontSize:12,labelFont:KJ,labelAngle:0,tickColor:XJ,tickSize:5,titleFontSize:12,titlePadding:10,titleFont:QJ},axisY:{domain:!1,domainWidth:1,grid:!0,gridColor:eQ,gridWidth:1,labelFontSize:12,labelFont:KJ,labelPadding:8,ticks:!1,titleFontSize:12,titlePadding:10,titleFont:QJ,titleAngle:0,titleY:-10,titleX:18},legend:{labelFontSize:12,labelFont:KJ,symbolSize:100,titleFontSize:12,titlePadding:10,titleFont:QJ,orient:"right",offset:10},view:{stroke:"transparent"},range:{category:nQ["six-groups-cat-1"],diverging:nQ["diverging-colors"],heatmap:nQ["diverging-colors"],ordinal:nQ["six-groups-seq"],ramp:nQ["shades-blue"]},area:{fill:VJ},rect:{fill:VJ},line:{color:VJ,stroke:VJ,strokeWidth:5},trail:{color:VJ,stroke:VJ,strokeWidth:0,size:1},path:{stroke:VJ,strokeWidth:.5},point:{filled:!0},text:{font:ZJ,color:VJ,fontSize:11,align:"center",fontWeight:400,size:11},style:{bar:{fill:VJ,stroke:null}},arc:{fill:VJ},shape:{stroke:VJ},symbol:{fill:VJ,size:30}},iQ="#3366CC",oQ="#ccc",aQ="Arial, sans-serif",uQ={arc:{fill:iQ},area:{fill:iQ},path:{stroke:iQ},rect:{fill:iQ},shape:{stroke:iQ},symbol:{stroke:iQ},circle:{fill:iQ},background:"#fff",padding:{top:10,right:10,bottom:10,left:10},style:{"guide-label":{font:aQ,fontSize:12},"guide-title":{font:aQ,fontSize:12},"group-title":{font:aQ,fontSize:12}},title:{font:aQ,fontSize:14,fontWeight:"bold",dy:-3,anchor:"start"},axis:{gridColor:oQ,tickColor:oQ,domain:!1,grid:!0},range:{category:["#4285F4","#DB4437","#F4B400","#0F9D58","#AB47BC","#00ACC1","#FF7043","#9E9D24","#5C6BC0","#F06292","#00796B","#C2185B"],heatmap:["#c6dafc","#5e97f6","#2a56c6"]}},sQ=vJ.version;var cQ="#vg-tooltip-element {\n  visibility: hidden;\n  padding: 8px;\n  position: fixed;\n  z-index: 1000;\n  font-family: sans-serif;\n  font-size: 11px;\n  border-radius: 3px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n  /* The default theme is the light theme. */\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #d9d9d9;\n  color: black; }\n  #vg-tooltip-element.visible {\n    visibility: visible; }\n  #vg-tooltip-element h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 13px; }\n  #vg-tooltip-element table {\n    border-spacing: 0; }\n    #vg-tooltip-element table tr {\n      border: none; }\n      #vg-tooltip-element table tr td {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        padding-top: 2px;\n        padding-bottom: 2px; }\n        #vg-tooltip-element table tr td.key {\n          color: #808080;\n          max-width: 150px;\n          text-align: right;\n          padding-right: 4px; }\n        #vg-tooltip-element table tr td.value {\n          display: block;\n          max-width: 300px;\n          max-height: 7em;\n          text-align: left; }\n  #vg-tooltip-element.dark-theme {\n    background-color: rgba(32, 32, 32, 0.9);\n    border: 1px solid #f5f5f5;\n    color: white; }\n    #vg-tooltip-element.dark-theme td.key {\n      color: #bfbfbf; }\n";const lQ="vg-tooltip-element",fQ={offsetX:10,offsetY:10,id:lQ,styleId:"vega-tooltip-style",theme:"light",disableDefaultStyle:!1,sanitize:dQ,maxDepth:2};function dQ(e){return String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;")}function hQ(e){if(!/^[A-Za-z]+[-:.\w]*$/.test(e))throw new Error("Invalid HTML ID");return cQ.toString().replace(lQ,e)}function pQ(e,t,n){if(Object(H["B"])(e))return`[${e.map(e=>t(Object(H["I"])(e)?e:mQ(e,n))).join(", ")}]`;if(Object(H["G"])(e)){let r="";const i=e,{title:o}=i,a=P(i,["title"]);o&&(r+=`<h2>${t(o)}</h2>`);const u=Object.keys(a);if(u.length>0){r+="<table>";for(const e of u){let i=a[e];Object(H["G"])(i)&&(i=mQ(i,n)),r+=`<tr><td class="key">${t(e)}:</td><td class="value">${t(i)}</td></tr>`}r+="</table>"}return r||"{}"}return t(e)}function gQ(e){const t=[];return function(n,r){if("object"!==typeof r||null===r)return r;const i=t.indexOf(this)+1;return t.length=i,t.length>e?"[Object]":t.indexOf(r)>=0?"[Circular]":(t.push(r),r)}}function mQ(e,t){return JSON.stringify(e,gQ(t))}function vQ(e,t,n,r){let i=e.clientX+n;i+t.width>window.innerWidth&&(i=+e.clientX-n-t.width);let o=e.clientY+r;return o+t.height>window.innerHeight&&(o=+e.clientY-r-t.height),{x:i,y:o}}class bQ{constructor(e){this.options=Object.assign({},fQ,e);const t=this.options.id;if(this.call=this.tooltip_handler.bind(this),!this.options.disableDefaultStyle&&!document.getElementById(this.options.styleId)){const e=document.createElement("style");e.setAttribute("id",this.options.styleId),e.innerHTML=hQ(t);const n=document.head;n.childNodes.length>0?n.insertBefore(e,n.childNodes[0]):n.appendChild(e)}this.el=document.getElementById(t),this.el||(this.el=document.createElement("div"),this.el.setAttribute("id",t),this.el.classList.add("vg-tooltip"),document.body.appendChild(this.el))}tooltip_handler(e,t,n,r){if(null==r||""===r)return void this.el.classList.remove("visible",this.options.theme+"-theme");this.el.innerHTML=pQ(r,this.options.sanitize,this.options.maxDepth),this.el.classList.add("visible",this.options.theme+"-theme");const{x:i,y:o}=vQ(t,this.el.getBoundingClientRect(),this.options.offsetX,this.options.offsetY);this.el.setAttribute("style",`top: ${o}px; left: ${i}px`)}}function yQ(e,t,n){const r=e.open(t),i=1e4,o=250;let a=~~(i/o);function u(t){t.source===r&&(a=0,e.removeEventListener("message",u,!1))}function s(){a<=0||(r.postMessage(n,"*"),setTimeout(s,o),a-=1)}e.addEventListener("message",u,!1),setTimeout(s,o)}var xQ='.vega-embed {\n  position: relative;\n  display: inline-block;\n  padding-right: 38px; }\n  .vega-embed details:not([open]) > :not(summary) {\n    display: none !important; }\n  .vega-embed summary {\n    list-style: none;\n    display: flex;\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 6px;\n    z-index: 1000;\n    background: white;\n    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);\n    color: #1b1e23;\n    border: 1px solid #aaa;\n    border-radius: 999px;\n    opacity: 0.2;\n    transition: opacity 0.4s ease-in;\n    outline: none;\n    cursor: pointer; }\n    .vega-embed summary::-webkit-details-marker {\n      display: none; }\n  .vega-embed details[open] summary {\n    opacity: 0.7; }\n  .vega-embed:hover summary,\n  .vega-embed:focus summary {\n    opacity: 1 !important;\n    transition: opacity 0.2s ease; }\n  .vega-embed .vega-actions {\n    position: absolute;\n    top: 35px;\n    right: -9px;\n    display: flex;\n    flex-direction: column;\n    padding-bottom: 8px;\n    padding-top: 8px;\n    border-radius: 4px;\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);\n    border: 1px solid #d9d9d9;\n    background: white;\n    animation-duration: 0.15s;\n    animation-name: scale-in;\n    animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5); }\n    .vega-embed .vega-actions a {\n      padding: 8px 16px;\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: 600;\n      white-space: nowrap;\n      color: #434a56;\n      text-decoration: none; }\n      .vega-embed .vega-actions a:hover {\n        background-color: #f7f7f9;\n        color: black; }\n    .vega-embed .vega-actions::before, .vega-embed .vega-actions::after {\n      content: "";\n      display: inline-block;\n      position: absolute; }\n    .vega-embed .vega-actions::before {\n      left: auto;\n      right: 14px;\n      top: -16px;\n      border: 8px solid #0000;\n      border-bottom-color: #d9d9d9; }\n    .vega-embed .vega-actions::after {\n      left: auto;\n      right: 15px;\n      top: -14px;\n      border: 7px solid #0000;\n      border-bottom-color: #fff; }\n\n.vega-embed-wrapper {\n  max-width: 100%;\n  overflow: scroll;\n  padding-right: 14px; }\n\n@keyframes scale-in {\n  from {\n    opacity: 0;\n    transform: scale(0.6); }\n  to {\n    opacity: 1;\n    transform: scale(1); } }\n';function wQ(e,...t){for(const n of t)e=OQ(e,n);return e}function OQ(e,t){if("object"!==typeof t||null===t)return e;for(const n in t)t.hasOwnProperty(n)&&void 0!==t[n]&&("object"!==typeof t[n]||Object(H["B"])(t[n])||null===t[n]?e[n]=t[n]:"object"!==typeof e[n]||null===e[n]?e[n]=wQ(Object(H["B"])(t[n].constructor)?[]:{},t[n]):wQ(e[n],t[n]));return e}String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return this.substr(!t||t<0?0:+t,e.length)===e});const EQ=d,kQ=R,_Q={vega:"Vega","vega-lite":"Vega-Lite"},AQ={vega:EQ.version,"vega-lite":kQ?kQ.version:"not available"},SQ={vega:(e,t)=>e,"vega-lite":(e,t)=>kQ.compile(e,{config:t}).spec},jQ='\n<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" width="14" height="14">\n  <circle r="2" cy="8" cx="2"></circle>\n  <circle r="2" cy="8" cx="8"></circle>\n  <circle r="2" cy="8" cx="14"></circle>\n</svg>',CQ={CLICK_TO_VIEW_ACTIONS:"Click to view actions",COMPILED_ACTION:"View Vega Source",EDITOR_ACTION:"Open in Vega Editor",PNG_ACTION:"Save as PNG",SOURCE_ACTION:"View Source",SVG_ACTION:"Save as SVG"};function DQ(e){return"function"===typeof e}function FQ(e,t,n,r){const i=`<html><head>${t}</head><body><pre><code class="json">`,o=`</code></pre>${n}</body></html>`,a=window.open("");a.document.write(i+e+o),a.document.title=_Q[r]+" JSON Source"}function MQ(e,t){if(e.$schema){const n=KX()(e.$schema);t&&t!==n.library&&console.warn(`The given visualization spec is written in ${_Q[n.library]}, but mode argument sets ${_Q[t]||t}.`);const r=n.library;return Object(W["satisfies"])(AQ[r],"^"+n.version.slice(1))||console.warn(`The input spec uses ${r} ${n.version}, but the current version of ${_Q[r]} is ${AQ[r]}.`),r}return"mark"in e||"encoding"in e||"layer"in e||"hconcat"in e||"vconcat"in e||"facet"in e||"repeat"in e?"vega-lite":"marks"in e||"signals"in e||"scales"in e||"axes"in e?"vega":t||"vega"}function zQ(e){return!(!e||!("load"in e))}function NQ(e,t,n={}){return I(this,void 0,void 0,(function*(){n=n||{};const r=n.patch||n.onBeforeParse,i=!0===n.actions||!1===n.actions?n.actions:wQ({},{export:{svg:!0,png:!0},source:!0,compiled:!1,editor:!0},n.actions||{}),o=Object.assign({},CQ,n.i18n),a=zQ(n.loader)?n.loader:EQ.loader(n.loader),u=n.renderer||"canvas",s=n.logLevel||EQ.Warn;if(EQ.isString(t)){const r=yield a.load(t);return NQ(e,JSON.parse(r),n)}let c=n.config||{};if(EQ.isString(c)){const r=yield a.load(c);return NQ(e,t,Object.assign({},n,{config:JSON.parse(r)}))}if(!1!==n.defaultStyle){const e="vega-embed-style";if(!document.getElementById(e)){const t=document.createElement("style");t.id=e,t.innerText=void 0===n.defaultStyle||!0===n.defaultStyle?(xQ||"").toString():n.defaultStyle,document.head.appendChild(t)}}n.theme&&(c=wQ({},B[n.theme],c));const l=MQ(t,n.mode);let f=SQ[l](t,c);if("vega-lite"===l&&f.$schema){const e=KX()(f.$schema);Object(W["satisfies"])(AQ.vega,"^"+e.version.slice(1))||console.warn(`The compiled spec uses Vega ${e.version}, but current version is ${AQ.vega}.`)}const d=L["a"](e).classed("vega-embed",!0).html("");if(r)if(r instanceof Function)f=r(f);else if(EQ.isString(r)){const e=yield a.load(r);f=wQ(f,JSON.parse(e))}else f=wQ(f,r);const h=EQ.parse(f,"vega-lite"===l?{}:c),p=new EQ.View(h,{loader:a,logLevel:s,renderer:u}).initialize(e);if(!1!==n.tooltip){let e;e=DQ(n.tooltip)?n.tooltip:new bQ(!0===n.tooltip?{}:n.tooltip).call,p.tooltip(e)}let g=n.hover;if(void 0===g&&(g="vega-lite"!==l),g){const{hoverSet:e,updateSet:t}="boolean"===typeof g?{}:g;p.hover(e,t)}if(n&&(n.width&&p.width(n.width),n.height&&p.height(n.height),n.padding&&p.padding(n.padding)),n.runAsync?yield p.runAsync():p.run(),!1!==i){let e=d;if(!1!==n.defaultStyle){const t=e=d.append("details").attr("title",o.CLICK_TO_VIEW_ACTIONS),n=t.insert("summary");n.html(jQ);const r=t.node();document.addEventListener("click",e=>{r.contains(e.target)||r.removeAttribute("open")})}const r=e.insert("div").attr("class","vega-actions");if(!0===i||!1!==i.export)for(const t of["svg","png"])if(!0===i||!0===i.export||i.export[t]){const e=o[t.toUpperCase()+"_ACTION"];r.append("a").text(e).attr("href","#").attr("target","_blank").attr("download","visualization."+t).on("mousedown",(function(){p.toImageURL(t,n.scaleFactor).then(e=>{this.href=e}).catch(e=>{throw e}),$["c"].preventDefault()}))}if(!0!==i&&!1===i.source||r.append("a").text(o.SOURCE_ACTION).attr("href","#").on("mousedown",()=>{FQ(q()(t),n.sourceHeader||"",n.sourceFooter||"",l),$["c"].preventDefault()}),"vega-lite"!==l||!0!==i&&!1===i.compiled||r.append("a").text(o.COMPILED_ACTION).attr("href","#").on("mousedown",()=>{FQ(q()(f),n.sourceHeader||"",n.sourceFooter||"","vega"),$["c"].preventDefault()}),!0===i||!1!==i.editor){const e=n.editorUrl||"https://vega.github.io/editor/";r.append("a").text(o.EDITOR_ACTION).attr("href","#").on("mousedown",()=>{yQ(window,e,{config:c,mode:l,renderer:u,spec:q()(t)}),$["c"].preventDefault()})}}return{view:p,spec:t,vgSpec:f}}))}},"81ab":function(e,t,n){"use strict";function r(e){var t=/\/schema\/([\w-]+)\/([\w\.\-]+)\.json$/g,n=t.exec(e).slice(1,3),r=n[0],i=n[1];return{library:r,version:i}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r},"8d61":function(e,t,n){(function(n){var r;t=e.exports=ee,r="object"===typeof n&&Object({NODE_ENV:"production",BASE_URL:"/buwang_h5/"})&&Object({NODE_ENV:"production",BASE_URL:"/buwang_h5/"}).NODE_DEBUG&&/\bsemver\b/i.test(Object({NODE_ENV:"production",BASE_URL:"/buwang_h5/"}).NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:function(){},t.SEMVER_SPEC_VERSION="2.0.0";var i=256,o=Number.MAX_SAFE_INTEGER||9007199254740991,a=16,u=t.re=[],s=t.src=[],c=0,l=c++;s[l]="0|[1-9]\\d*";var f=c++;s[f]="[0-9]+";var d=c++;s[d]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var h=c++;s[h]="("+s[l]+")\\.("+s[l]+")\\.("+s[l]+")";var p=c++;s[p]="("+s[f]+")\\.("+s[f]+")\\.("+s[f]+")";var g=c++;s[g]="(?:"+s[l]+"|"+s[d]+")";var m=c++;s[m]="(?:"+s[f]+"|"+s[d]+")";var v=c++;s[v]="(?:-("+s[g]+"(?:\\."+s[g]+")*))";var b=c++;s[b]="(?:-?("+s[m]+"(?:\\."+s[m]+")*))";var y=c++;s[y]="[0-9A-Za-z-]+";var x=c++;s[x]="(?:\\+("+s[y]+"(?:\\."+s[y]+")*))";var w=c++,O="v?"+s[h]+s[v]+"?"+s[x]+"?";s[w]="^"+O+"$";var E="[v=\\s]*"+s[p]+s[b]+"?"+s[x]+"?",k=c++;s[k]="^"+E+"$";var _=c++;s[_]="((?:<|>)?=?)";var A=c++;s[A]=s[f]+"|x|X|\\*";var S=c++;s[S]=s[l]+"|x|X|\\*";var j=c++;s[j]="[v=\\s]*("+s[S]+")(?:\\.("+s[S]+")(?:\\.("+s[S]+")(?:"+s[v]+")?"+s[x]+"?)?)?";var C=c++;s[C]="[v=\\s]*("+s[A]+")(?:\\.("+s[A]+")(?:\\.("+s[A]+")(?:"+s[b]+")?"+s[x]+"?)?)?";var D=c++;s[D]="^"+s[_]+"\\s*"+s[j]+"$";var F=c++;s[F]="^"+s[_]+"\\s*"+s[C]+"$";var M=c++;s[M]="(?:^|[^\\d])(\\d{1,"+a+"})(?:\\.(\\d{1,"+a+"}))?(?:\\.(\\d{1,"+a+"}))?(?:$|[^\\d])";var z=c++;s[z]="(?:~>?)";var N=c++;s[N]="(\\s*)"+s[z]+"\\s+",u[N]=new RegExp(s[N],"g");var T="$1~",R=c++;s[R]="^"+s[z]+s[j]+"$";var B=c++;s[B]="^"+s[z]+s[C]+"$";var P=c++;s[P]="(?:\\^)";var I=c++;s[I]="(\\s*)"+s[P]+"\\s+",u[I]=new RegExp(s[I],"g");var L="$1^",$=c++;s[$]="^"+s[P]+s[j]+"$";var U=c++;s[U]="^"+s[P]+s[C]+"$";var q=c++;s[q]="^"+s[_]+"\\s*("+E+")$|^$";var W=c++;s[W]="^"+s[_]+"\\s*("+O+")$|^$";var H=c++;s[H]="(\\s*)"+s[_]+"\\s*("+E+"|"+s[j]+")",u[H]=new RegExp(s[H],"g");var G="$1$2$3",Y=c++;s[Y]="^\\s*("+s[j]+")\\s+-\\s+("+s[j]+")\\s*$";var V=c++;s[V]="^\\s*("+s[C]+")\\s+-\\s+("+s[C]+")\\s*$";var X=c++;s[X]="(<|>)?=?\\s*\\*";for(var J=0;J<c;J++)r(J,s[J]),u[J]||(u[J]=new RegExp(s[J]));function Q(e,t){if(t&&"object"===typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof ee)return e;if("string"!==typeof e)return null;if(e.length>i)return null;var n=t.loose?u[k]:u[w];if(!n.test(e))return null;try{return new ee(e,t)}catch(r){return null}}function K(e,t){var n=Q(e,t);return n?n.version:null}function Z(e,t){var n=Q(e.trim().replace(/^[=v]+/,""),t);return n?n.version:null}function ee(e,t){if(t&&"object"===typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof ee){if(e.loose===t.loose)return e;e=e.version}else if("string"!==typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>i)throw new TypeError("version is longer than "+i+" characters");if(!(this instanceof ee))return new ee(e,t);r("SemVer",e,t),this.options=t,this.loose=!!t.loose;var n=e.trim().match(t.loose?u[k]:u[w]);if(!n)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+n[1],this.minor=+n[2],this.patch=+n[3],this.major>o||this.major<0)throw new TypeError("Invalid major version");if(this.minor>o||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>o||this.patch<0)throw new TypeError("Invalid patch version");n[4]?this.prerelease=n[4].split(".").map((function(e){if(/^[0-9]+$/.test(e)){var t=+e;if(t>=0&&t<o)return t}return e})):this.prerelease=[],this.build=n[5]?n[5].split("."):[],this.format()}function te(e,t,n,r){"string"===typeof n&&(r=n,n=void 0);try{return new ee(e,n).inc(t,r).version}catch(i){return null}}function ne(e,t){if(me(e,t))return null;var n=Q(e),r=Q(t),i="";if(n.prerelease.length||r.prerelease.length){i="pre";var o="prerelease"}for(var a in n)if(("major"===a||"minor"===a||"patch"===a)&&n[a]!==r[a])return i+a;return o}t.parse=Q,t.valid=K,t.clean=Z,t.SemVer=ee,ee.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},ee.prototype.toString=function(){return this.version},ee.prototype.compare=function(e){return r("SemVer.compare",this.version,this.options,e),e instanceof ee||(e=new ee(e,this.options)),this.compareMain(e)||this.comparePre(e)},ee.prototype.compareMain=function(e){return e instanceof ee||(e=new ee(e,this.options)),ie(this.major,e.major)||ie(this.minor,e.minor)||ie(this.patch,e.patch)},ee.prototype.comparePre=function(e){if(e instanceof ee||(e=new ee(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var n=this.prerelease[t],i=e.prerelease[t];if(r("prerelease compare",t,n,i),void 0===n&&void 0===i)return 0;if(void 0===i)return 1;if(void 0===n)return-1;if(n!==i)return ie(n,i)}while(++t)},ee.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{var n=this.prerelease.length;while(--n>=0)"number"===typeof this.prerelease[n]&&(this.prerelease[n]++,n=-2);-1===n&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this},t.inc=te,t.diff=ne,t.compareIdentifiers=ie;var re=/^[0-9]+$/;function ie(e,t){var n=re.test(e),r=re.test(t);return n&&r&&(e=+e,t=+t),e===t?0:n&&!r?-1:r&&!n?1:e<t?-1:1}function oe(e,t){return ie(t,e)}function ae(e,t){return new ee(e,t).major}function ue(e,t){return new ee(e,t).minor}function se(e,t){return new ee(e,t).patch}function ce(e,t,n){return new ee(e,n).compare(new ee(t,n))}function le(e,t){return ce(e,t,!0)}function fe(e,t,n){return ce(t,e,n)}function de(e,n){return e.sort((function(e,r){return t.compare(e,r,n)}))}function he(e,n){return e.sort((function(e,r){return t.rcompare(e,r,n)}))}function pe(e,t,n){return ce(e,t,n)>0}function ge(e,t,n){return ce(e,t,n)<0}function me(e,t,n){return 0===ce(e,t,n)}function ve(e,t,n){return 0!==ce(e,t,n)}function be(e,t,n){return ce(e,t,n)>=0}function ye(e,t,n){return ce(e,t,n)<=0}function xe(e,t,n,r){switch(t){case"===":return"object"===typeof e&&(e=e.version),"object"===typeof n&&(n=n.version),e===n;case"!==":return"object"===typeof e&&(e=e.version),"object"===typeof n&&(n=n.version),e!==n;case"":case"=":case"==":return me(e,n,r);case"!=":return ve(e,n,r);case">":return pe(e,n,r);case">=":return be(e,n,r);case"<":return ge(e,n,r);case"<=":return ye(e,n,r);default:throw new TypeError("Invalid operator: "+t)}}function we(e,t){if(t&&"object"===typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof we){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof we))return new we(e,t);r("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===Oe?this.value="":this.value=this.operator+this.semver.version,r("comp",this)}t.rcompareIdentifiers=oe,t.major=ae,t.minor=ue,t.patch=se,t.compare=ce,t.compareLoose=le,t.rcompare=fe,t.sort=de,t.rsort=he,t.gt=pe,t.lt=ge,t.eq=me,t.neq=ve,t.gte=be,t.lte=ye,t.cmp=xe,t.Comparator=we;var Oe={};function Ee(e,t){if(t&&"object"===typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof Ee)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new Ee(e.raw,t);if(e instanceof we)return new Ee(e.value,t);if(!(this instanceof Ee))return new Ee(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((function(e){return this.parseRange(e.trim())}),this).filter((function(e){return e.length})),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}function ke(e,t){return new Ee(e,t).set.map((function(e){return e.map((function(e){return e.value})).join(" ").trim().split(" ")}))}function _e(e,t){return r("comp",e,t),e=Ce(e,t),r("caret",e),e=Se(e,t),r("tildes",e),e=Fe(e,t),r("xrange",e),e=ze(e,t),r("stars",e),e}function Ae(e){return!e||"x"===e.toLowerCase()||"*"===e}function Se(e,t){return e.trim().split(/\s+/).map((function(e){return je(e,t)})).join(" ")}function je(e,t){var n=t.loose?u[B]:u[R];return e.replace(n,(function(t,n,i,o,a){var u;return r("tilde",e,t,n,i,o,a),Ae(n)?u="":Ae(i)?u=">="+n+".0.0 <"+(+n+1)+".0.0":Ae(o)?u=">="+n+"."+i+".0 <"+n+"."+(+i+1)+".0":a?(r("replaceTilde pr",a),u=">="+n+"."+i+"."+o+"-"+a+" <"+n+"."+(+i+1)+".0"):u=">="+n+"."+i+"."+o+" <"+n+"."+(+i+1)+".0",r("tilde return",u),u}))}function Ce(e,t){return e.trim().split(/\s+/).map((function(e){return De(e,t)})).join(" ")}function De(e,t){r("caret",e,t);var n=t.loose?u[U]:u[$];return e.replace(n,(function(t,n,i,o,a){var u;return r("caret",e,t,n,i,o,a),Ae(n)?u="":Ae(i)?u=">="+n+".0.0 <"+(+n+1)+".0.0":Ae(o)?u="0"===n?">="+n+"."+i+".0 <"+n+"."+(+i+1)+".0":">="+n+"."+i+".0 <"+(+n+1)+".0.0":a?(r("replaceCaret pr",a),u="0"===n?"0"===i?">="+n+"."+i+"."+o+"-"+a+" <"+n+"."+i+"."+(+o+1):">="+n+"."+i+"."+o+"-"+a+" <"+n+"."+(+i+1)+".0":">="+n+"."+i+"."+o+"-"+a+" <"+(+n+1)+".0.0"):(r("no pr"),u="0"===n?"0"===i?">="+n+"."+i+"."+o+" <"+n+"."+i+"."+(+o+1):">="+n+"."+i+"."+o+" <"+n+"."+(+i+1)+".0":">="+n+"."+i+"."+o+" <"+(+n+1)+".0.0"),r("caret return",u),u}))}function Fe(e,t){return r("replaceXRanges",e,t),e.split(/\s+/).map((function(e){return Me(e,t)})).join(" ")}function Me(e,t){e=e.trim();var n=t.loose?u[F]:u[D];return e.replace(n,(function(t,n,i,o,a,u){r("xRange",e,t,n,i,o,a,u);var s=Ae(i),c=s||Ae(o),l=c||Ae(a),f=l;return"="===n&&f&&(n=""),s?t=">"===n||"<"===n?"<0.0.0":"*":n&&f?(c&&(o=0),a=0,">"===n?(n=">=",c?(i=+i+1,o=0,a=0):(o=+o+1,a=0)):"<="===n&&(n="<",c?i=+i+1:o=+o+1),t=n+i+"."+o+"."+a):c?t=">="+i+".0.0 <"+(+i+1)+".0.0":l&&(t=">="+i+"."+o+".0 <"+i+"."+(+o+1)+".0"),r("xRange return",t),t}))}function ze(e,t){return r("replaceStars",e,t),e.trim().replace(u[X],"")}function Ne(e,t,n,r,i,o,a,u,s,c,l,f,d){return t=Ae(n)?"":Ae(r)?">="+n+".0.0":Ae(i)?">="+n+"."+r+".0":">="+t,u=Ae(s)?"":Ae(c)?"<"+(+s+1)+".0.0":Ae(l)?"<"+s+"."+(+c+1)+".0":f?"<="+s+"."+c+"."+l+"-"+f:"<="+u,(t+" "+u).trim()}function Te(e,t,n){for(var i=0;i<e.length;i++)if(!e[i].test(t))return!1;if(t.prerelease.length&&!n.includePrerelease){for(i=0;i<e.length;i++)if(r(e[i].semver),e[i].semver!==Oe&&e[i].semver.prerelease.length>0){var o=e[i].semver;if(o.major===t.major&&o.minor===t.minor&&o.patch===t.patch)return!0}return!1}return!0}function Re(e,t,n){try{t=new Ee(t,n)}catch(r){return!1}return t.test(e)}function Be(e,t,n){var r=null,i=null;try{var o=new Ee(t,n)}catch(a){return null}return e.forEach((function(e){o.test(e)&&(r&&-1!==i.compare(e)||(r=e,i=new ee(r,n)))})),r}function Pe(e,t,n){var r=null,i=null;try{var o=new Ee(t,n)}catch(a){return null}return e.forEach((function(e){o.test(e)&&(r&&1!==i.compare(e)||(r=e,i=new ee(r,n)))})),r}function Ie(e,t){e=new Ee(e,t);var n=new ee("0.0.0");if(e.test(n))return n;if(n=new ee("0.0.0-0"),e.test(n))return n;n=null;for(var r=0;r<e.set.length;++r){var i=e.set[r];i.forEach((function(e){var t=new ee(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":n&&!pe(n,t)||(n=t);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+e.operator)}}))}return n&&e.test(n)?n:null}function Le(e,t){try{return new Ee(e,t).range||"*"}catch(n){return null}}function $e(e,t,n){return qe(e,t,"<",n)}function Ue(e,t,n){return qe(e,t,">",n)}function qe(e,t,n,r){var i,o,a,u,s;switch(e=new ee(e,r),t=new Ee(t,r),n){case">":i=pe,o=ye,a=ge,u=">",s=">=";break;case"<":i=ge,o=be,a=pe,u="<",s="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Re(e,t,r))return!1;for(var c=0;c<t.set.length;++c){var l=t.set[c],f=null,d=null;if(l.forEach((function(e){e.semver===Oe&&(e=new we(">=0.0.0")),f=f||e,d=d||e,i(e.semver,f.semver,r)?f=e:a(e.semver,d.semver,r)&&(d=e)})),f.operator===u||f.operator===s)return!1;if((!d.operator||d.operator===u)&&o(e,d.semver))return!1;if(d.operator===s&&a(e,d.semver))return!1}return!0}function We(e,t){var n=Q(e,t);return n&&n.prerelease.length?n.prerelease:null}function He(e,t,n){return e=new Ee(e,n),t=new Ee(t,n),e.intersects(t)}function Ge(e){if(e instanceof ee)return e;if("string"!==typeof e)return null;var t=e.match(u[M]);return null==t?null:Q(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}we.prototype.parse=function(e){var t=this.options.loose?u[q]:u[W],n=e.match(t);if(!n)throw new TypeError("Invalid comparator: "+e);this.operator=n[1],"="===this.operator&&(this.operator=""),n[2]?this.semver=new ee(n[2],this.options.loose):this.semver=Oe},we.prototype.toString=function(){return this.value},we.prototype.test=function(e){return r("Comparator.test",e,this.options.loose),this.semver===Oe||("string"===typeof e&&(e=new ee(e,this.options)),xe(e,this.operator,this.semver,this.options))},we.prototype.intersects=function(e,t){if(!(e instanceof we))throw new TypeError("a Comparator is required");var n;if(t&&"object"===typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return n=new Ee(e.value,t),Re(this.value,n,t);if(""===e.operator)return n=new Ee(this.value,t),Re(e.semver,n,t);var r=(">="===this.operator||">"===this.operator)&&(">="===e.operator||">"===e.operator),i=("<="===this.operator||"<"===this.operator)&&("<="===e.operator||"<"===e.operator),o=this.semver.version===e.semver.version,a=(">="===this.operator||"<="===this.operator)&&(">="===e.operator||"<="===e.operator),u=xe(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),s=xe(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||i||o&&a||u||s},t.Range=Ee,Ee.prototype.format=function(){return this.range=this.set.map((function(e){return e.join(" ").trim()})).join("||").trim(),this.range},Ee.prototype.toString=function(){return this.range},Ee.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var n=t?u[V]:u[Y];e=e.replace(n,Ne),r("hyphen replace",e),e=e.replace(u[H],G),r("comparator trim",e,u[H]),e=e.replace(u[N],T),e=e.replace(u[I],L),e=e.split(/\s+/).join(" ");var i=t?u[q]:u[W],o=e.split(" ").map((function(e){return _e(e,this.options)}),this).join(" ").split(/\s+/);return this.options.loose&&(o=o.filter((function(e){return!!e.match(i)}))),o=o.map((function(e){return new we(e,this.options)}),this),o},Ee.prototype.intersects=function(e,t){if(!(e instanceof Ee))throw new TypeError("a Range is required");return this.set.some((function(n){return n.every((function(n){return e.set.some((function(e){return e.every((function(e){return n.intersects(e,t)}))}))}))}))},t.toComparators=ke,Ee.prototype.test=function(e){if(!e)return!1;"string"===typeof e&&(e=new ee(e,this.options));for(var t=0;t<this.set.length;t++)if(Te(this.set[t],e,this.options))return!0;return!1},t.satisfies=Re,t.maxSatisfying=Be,t.minSatisfying=Pe,t.minVersion=Ie,t.validRange=Le,t.ltr=$e,t.gtr=Ue,t.outside=qe,t.prerelease=We,t.intersects=He,t.coerce=Ge}).call(this,n("f28c"))},9152:function(e,t){t.read=function(e,t,n,r,i){var o,a,u=8*i-r-1,s=(1<<u)-1,c=s>>1,l=-7,f=n?i-1:0,d=n?-1:1,h=e[t+f];for(f+=d,o=h&(1<<-l)-1,h>>=-l,l+=u;l>0;o=256*o+e[t+f],f+=d,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=r;l>0;a=256*a+e[t+f],f+=d,l-=8);if(0===o)o=1-c;else{if(o===s)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),o-=c}return(h?-1:1)*a*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var a,u,s,c=8*o-i-1,l=(1<<c)-1,f=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,p=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(u=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),t+=a+f>=1?d/s:d*Math.pow(2,1-f),t*s>=2&&(a++,s/=2),a+f>=l?(u=0,a=l):a+f>=1?(u=(t*s-1)*Math.pow(2,i),a+=f):(u=t*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;e[n+h]=255&u,h+=p,u/=256,i-=8);for(a=a<<i|u,c+=i;c>0;e[n+h]=255&a,h+=p,a/=256,c-=8);e[n+h-p]|=128*g}},"9b0d":function(e,t,n){"use strict";(function(e){var r=n("276f");function i(t){return!("function"!==typeof e||!Object(r["E"])(e.isBuffer))&&e.isBuffer(t)}function o(e,t){return t&&t.copy?JSON.parse(JSON.stringify(e)):e}t["a"]=function(e,t){var n=t&&t.property?Object(r["u"])(t.property):r["y"];return Object(r["G"])(e)&&!i(e)?o(n(e)):n(JSON.parse(e))}}).call(this,n("1c35").Buffer)},e3db:function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},f64a:function(e){e.exports=JSON.parse('{"name":"vega-lite","author":"Jeffrey Heer, Dominik Moritz, Kanit \\"Ham\\" Wongsuphasawat","version":"3.0.0-rc12","collaborators":["Kanit Wongsuphasawat <kanitw@gmail.com> (http://kanitw.yellowpigz.com)","Dominik Moritz <domoritz@cs.washington.edu> (https://www.domoritz.de)","Jeffrey Heer <jheer@uw.edu> (http://jheer.org)"],"homepage":"https://vega.github.io/vega-lite/","description":"Vega-Lite is a concise high-level language for interactive visualization.","main":"build/vega-lite.js","unpkg":"build/vega-lite.min.js","jsdelivr":"build/vega-lite.min.js","module":"build/src/index","types":"build/src/index.d.ts","bin":{"vl2png":"./bin/vl2png","vl2svg":"./bin/vl2svg","vl2vg":"./bin/vl2vg"},"directories":{"test":"test"},"scripts":{"prebuild":"mkdir -p build/src","build":"npm run build:only","build:only":"tsc && rollup -c","postbuild":"terser build/vega-lite.js -cm --source-map content=build/vega-lite.js.map,filename=build/vega-lite.min.js.map -o build/vega-lite.min.js && npm run schema","build:examples":"npm run build:only","postbuild:examples":"npm run data && TZ=America/Los_Angeles scripts/build-examples.sh","build:examples-full":"npm run build:only","postbuild:examples-full":"TZ=America/Los_Angeles scripts/build-examples.sh 1","build:example":"TZ=America/Los_Angeles scripts/build-example.sh","build:toc":"bundle exec jekyll build -q && scripts/generate-toc","build:site":"tsc -p site && webpack --config site/webpack.config.js","build:versions":"scripts/update-version.sh","clean":"rm -rf build && rm -f examples/compiled/*.png && find site/examples ! -name \'index.md\' -type f -delete","data":"rsync -r node_modules/vega-datasets/data/* data","deploy":"scripts/deploy.sh","deploy:gh":"scripts/deploy-gh.sh","deploy:schema":"scripts/deploy-schema.sh","preschema":"npm run prebuild","schema":"node --stack-size=2800 ./node_modules/.bin/ts-json-schema-generator --no-type-check --path tsconfig.json --type TopLevelSpec > build/vega-lite-schema.json && npm run renameschema && cp build/vega-lite-schema.json _data/","renameschema":"scripts/rename-schema.sh","presite":"npm run prebuild && npm run data && npm run build:site && npm run build:toc && npm run build:versions && scripts/create-example-pages","site":"bundle exec jekyll serve --incremental","prettierbase":"prettier \'{src,test,test-runtime,site,typings}/**/*.{ts,md,css}\'","format":"tslint -p . --fix -e \'package.json\' && npm run prettierbase -- --write","lint":"tslint -p . -e \'package.json\' && npm run prettierbase -- --list-different","test":"jest test/ && npm run lint && npm run schema && jest examples/ && npm run test:runtime","test:inspect":"node --inspect-brk ./node_modules/.bin/jest --runInBand test","test:runtime":"TZ=America/Los_Angeles TS_NODE_COMPILER_OPTIONS=\'{\\"module\\":\\"commonjs\\"}\' wdio wdio.conf.js","test:runtime:generate":"rm -Rf test-runtime/resources && VL_GENERATE_TESTS=true npm run test:runtime","watch:build":"npm run build:only && concurrently --kill-others -n Typescript,Rollup \'tsc -w\' \'rollup -c -w\'","watch:site":"concurrently --kill-others -n Typescript,Webpack \'tsc -p site --watch\' \'webpack --config site/webpack.config.js --mode development --watch\'","watch:test":"jest --watch"},"repository":{"type":"git","url":"https://github.com/vega/vega-lite.git"},"license":"BSD-3-Clause","bugs":{"url":"https://github.com/vega/vega-lite/issues"},"devDependencies":{"@types/chai":"^4.1.7","@types/d3":"^5.5.0","@types/highlight.js":"^9.12.3","@types/jest":"^23.3.10","@types/mkdirp":"^0.5.2","@types/node":"10.12.18","@types/webdriverio":"^4.13.0","ajv":"^6.6.2","chai":"^4.2.0","cheerio":"^1.0.0-rc.2","chromedriver":"^2.45.0","codecov":"^3.1.0","concurrently":"^4.1.0","d3":"^5.7.0","highlight.js":"^9.13.1","jest":"^23.6.0","mkdirp":"^0.5.1","prettier":"^1.15.3","rollup":"^1.0.0","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-json":"^3.1.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-sourcemaps":"^0.4.2","source-map-support":"^0.5.9","svg2png-many":"^0.0.7","terser":"^3.13.1","ts-jest":"^23.10.5","ts-json-schema-generator":"^0.38.1","ts-node":"^7.0.1","tslint":"5.12.0","tslint-config-prettier":"^1.17.0","tslint-eslint-rules":"^5.4.0","typescript":"^3.2.2","vega":"^4.4.0","vega-datasets":"^1.20.0","vega-embed":"^3.28.0","vega-tooltip":"^0.15.0","wdio-chromedriver-service":"^0.1.5","wdio-dot-reporter":"0.0.10","wdio-mocha-framework":"^0.6.4","wdio-static-server-service":"^1.0.1","webdriverio":"^4.14.0","webpack":"^4.28.2","webpack-cli":"^3.1.2","yaml-front-matter":"^4.0.0"},"dependencies":{"@types/clone":"^0.1.30","clone":"^2.1.2","fast-deep-equal":"^2.0.1","fast-json-stable-stringify":"^2.0.0","json-stringify-pretty-compact":"^1.2.0","tslib":"^1.9.3","vega-event-selector":"^2.0.0","vega-expression":"^2.4.0","vega-typings":"0.3.53","vega-util":"^1.7.1","yargs":"^12.0.5"},"jest":{"testURL":"http://localhost/","transform":{"^.+\\\\.tsx?$":"ts-jest"},"testRegex":"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$","moduleFileExtensions":["ts","tsx","js","jsx","json","node"],"testPathIgnorePatterns":["node_modules","test-runtime","<rootDir>/build","_site","src"],"coverageDirectory":"./coverage/","collectCoverage":false}}')},f71e:function(e,t,n){"use strict";e.exports=function(e,t){t||(t={}),"function"===typeof t&&(t={cmp:t});var n="boolean"===typeof t.cycles&&t.cycles,r=t.cmp&&function(e){return function(t){return function(n,r){var i={key:n,value:t[n]},o={key:r,value:t[r]};return e(i,o)}}}(t.cmp),i=[];return function e(t){if(t&&t.toJSON&&"function"===typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!==typeof t)return JSON.stringify(t);var o,a;if(Array.isArray(t)){for(a="[",o=0;o<t.length;o++)o&&(a+=","),a+=e(t[o])||"null";return a+"]"}if(null===t)return"null";if(-1!==i.indexOf(t)){if(n)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var u=i.push(t)-1,s=Object.keys(t).sort(r&&r(t));for(a="",o=0;o<s.length;o++){var c=s[o],l=e(t[c]);l&&(a&&(a+=","),a+=JSON.stringify(c)+":"+l)}return i.splice(u,1),"{"+a+"}"}}(e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,