(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-410d8487"],{2622:function(t,n,e){"use strict";e.r(n);var r=e("656a");e("e0e3");n["default"]=r["a"]},"27d6":function(t,n,e){var r;(function(){function i(t,n,e){return t.call.apply(t.bind,arguments)}function o(t,n,e){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(e,r),t.apply(n,e)}}return function(){return t.apply(n,arguments)}}function a(t,n,e){return a=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?i:o,a.apply(null,arguments)}var s=Date.now||function(){return+new Date};function u(t,n){this.a=t,this.o=n||t,this.c=this.o.document}var c=!!window.FontFace;function l(t,n,e,r){if(n=t.c.createElement(n),e)for(var i in e)e.hasOwnProperty(i)&&("style"==i?n.style.cssText=e[i]:n.setAttribute(i,e[i]));return r&&n.appendChild(t.c.createTextNode(r)),n}function h(t,n,e){t=t.c.getElementsByTagName(n)[0],t||(t=document.documentElement),t.insertBefore(e,t.lastChild)}function f(t){t.parentNode&&t.parentNode.removeChild(t)}function d(t,n,e){n=n||[],e=e||[];for(var r=t.className.split(/\s+/),i=0;i<n.length;i+=1){for(var o=!1,a=0;a<r.length;a+=1)if(n[i]===r[a]){o=!0;break}o||r.push(n[i])}for(n=[],i=0;i<r.length;i+=1){for(o=!1,a=0;a<e.length;a+=1)if(r[i]===e[a]){o=!0;break}o||n.push(r[i])}t.className=n.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function p(t,n){for(var e=t.className.split(/\s+/),r=0,i=e.length;r<i;r++)if(e[r]==n)return!0;return!1}function g(t){return t.o.location.hostname||t.a.location.hostname}function y(t,n,e){function r(){s&&i&&o&&(s(a),s=null)}n=l(t,"link",{rel:"stylesheet",href:n,media:"all"});var i=!1,o=!0,a=null,s=e||null;c?(n.onload=function(){i=!0,r()},n.onerror=function(){i=!0,a=Error("Stylesheet failed to load"),r()}):setTimeout((function(){i=!0,r()}),0),h(t,"head",n)}function v(t,n,e,r){var i=t.c.getElementsByTagName("head")[0];if(i){var o=l(t,"script",{src:n}),a=!1;return o.onload=o.onreadystatechange=function(){a||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(a=!0,e&&e(null),o.onload=o.onreadystatechange=null,"HEAD"==o.parentNode.tagName&&i.removeChild(o))},i.appendChild(o),setTimeout((function(){a||(a=!0,e&&e(Error("Script load timeout")))}),r||5e3),o}return null}function m(){this.a=0,this.c=null}function x(t){return t.a++,function(){t.a--,w(t)}}function b(t,n){t.c=n,w(t)}function w(t){0==t.a&&t.c&&(t.c(),t.c=null)}function F(t){this.a=t||"-"}function _(t,n){this.c=t,this.f=4,this.a="n";var e=(n||"n4").match(/^([nio])([1-9])$/i);e&&(this.a=e[1],this.f=parseInt(e[2],10))}function E(t){return A(t)+" "+t.f+"00 300px "+S(t.c)}function S(t){var n=[];t=t.split(/,\s*/);for(var e=0;e<t.length;e++){var r=t[e].replace(/['"]/g,"");-1!=r.indexOf(" ")||/^\d/.test(r)?n.push("'"+r+"'"):n.push(r)}return n.join(",")}function k(t){return t.a+t.f}function A(t){var n="normal";return"o"===t.a?n="oblique":"i"===t.a&&(n="italic"),n}function C(t){var n=4,e="n",r=null;return t&&((r=t.match(/(normal|oblique|italic)/i))&&r[1]&&(e=r[1].substr(0,1).toLowerCase()),(r=t.match(/([1-9]00|normal|bold)/i))&&r[1]&&(/bold/i.test(r[1])?n=7:/[1-9]00/.test(r[1])&&(n=parseInt(r[1].substr(0,1),10)))),e+n}function B(t,n){this.c=t,this.f=t.o.document.documentElement,this.h=n,this.a=new F("-"),this.j=!1!==n.events,this.g=!1!==n.classes}function T(t){t.g&&d(t.f,[t.a.c("wf","loading")]),N(t,"loading")}function j(t){if(t.g){var n=p(t.f,t.a.c("wf","active")),e=[],r=[t.a.c("wf","loading")];n||e.push(t.a.c("wf","inactive")),d(t.f,e,r)}N(t,"inactive")}function N(t,n,e){t.j&&t.h[n]&&(e?t.h[n](e.c,k(e)):t.h[n]())}function D(){this.c={}}function M(t,n,e){var r,i=[];for(r in n)if(n.hasOwnProperty(r)){var o=t.c[r];o&&i.push(o(n[r],e))}return i}function O(t,n){this.c=t,this.f=n,this.a=l(this.c,"span",{"aria-hidden":"true"},this.f)}function P(t){h(t.c,"body",t.a)}function L(t){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+S(t.c)+";font-style:"+A(t)+";font-weight:"+t.f+"00;"}function I(t,n,e,r,i,o){this.g=t,this.j=n,this.a=r,this.c=e,this.f=i||3e3,this.h=o||void 0}function R(t,n,e,r,i,o,a){this.v=t,this.B=n,this.c=e,this.a=r,this.s=a||"BESbswy",this.f={},this.w=i||3e3,this.u=o||null,this.m=this.j=this.h=this.g=null,this.g=new O(this.c,this.s),this.h=new O(this.c,this.s),this.j=new O(this.c,this.s),this.m=new O(this.c,this.s),t=new _(this.a.c+",serif",k(this.a)),t=L(t),this.g.a.style.cssText=t,t=new _(this.a.c+",sans-serif",k(this.a)),t=L(t),this.h.a.style.cssText=t,t=new _("serif",k(this.a)),t=L(t),this.j.a.style.cssText=t,t=new _("sans-serif",k(this.a)),t=L(t),this.m.a.style.cssText=t,P(this.g),P(this.h),P(this.j),P(this.m)}F.prototype.c=function(t){for(var n=[],e=0;e<arguments.length;e++)n.push(arguments[e].replace(/[\W_]+/g,"").toLowerCase());return n.join(this.a)},I.prototype.start=function(){var t=this.c.o.document,n=this,e=s(),r=new Promise((function(r,i){function o(){s()-e>=n.f?i():t.fonts.load(E(n.a),n.h).then((function(t){1<=t.length?r():setTimeout(o,25)}),(function(){i()}))}o()})),i=null,o=new Promise((function(t,e){i=setTimeout(e,n.f)}));Promise.race([o,r]).then((function(){i&&(clearTimeout(i),i=null),n.g(n.a)}),(function(){n.j(n.a)}))};var q={D:"serif",C:"sans-serif"},G=null;function V(){if(null===G){var t=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);G=!!t&&(536>parseInt(t[1],10)||536===parseInt(t[1],10)&&11>=parseInt(t[2],10))}return G}function z(t,n,e){for(var r in q)if(q.hasOwnProperty(r)&&n===t.f[q[r]]&&e===t.f[q[r]])return!0;return!1}function $(t){var n,e=t.g.a.offsetWidth,r=t.h.a.offsetWidth;(n=e===t.f.serif&&r===t.f["sans-serif"])||(n=V()&&z(t,e,r)),n?s()-t.A>=t.w?V()&&z(t,e,r)&&(null===t.u||t.u.hasOwnProperty(t.a.c))?U(t,t.v):U(t,t.B):H(t):U(t,t.v)}function H(t){setTimeout(a((function(){$(this)}),t),50)}function U(t,n){setTimeout(a((function(){f(this.g.a),f(this.h.a),f(this.j.a),f(this.m.a),n(this.a)}),t),0)}function W(t,n,e){this.c=t,this.a=n,this.f=0,this.m=this.j=!1,this.s=e}R.prototype.start=function(){this.f.serif=this.j.a.offsetWidth,this.f["sans-serif"]=this.m.a.offsetWidth,this.A=s(),$(this)};var X=null;function Y(t){0==--t.f&&t.j&&(t.m?(t=t.a,t.g&&d(t.f,[t.a.c("wf","active")],[t.a.c("wf","loading"),t.a.c("wf","inactive")]),N(t,"active")):j(t.a))}function Z(t){this.j=t,this.a=new D,this.h=0,this.f=this.g=!0}function J(t,n,e,r,i){var o=0==--t.h;(t.f||t.g)&&setTimeout((function(){var t=i||null,s=r||{};if(0===e.length&&o)j(n.a);else{n.f+=e.length,o&&(n.j=o);var u,c=[];for(u=0;u<e.length;u++){var l=e[u],h=s[l.c],f=n.a,p=l;if(f.g&&d(f.f,[f.a.c("wf",p.c,k(p).toString(),"loading")]),N(f,"fontloading",p),f=null,null===X)if(window.FontFace){p=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);var g=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);X=p?42<parseInt(p[1],10):!g}else X=!1;f=X?new I(a(n.g,n),a(n.h,n),n.c,l,n.s,h):new R(a(n.g,n),a(n.h,n),n.c,l,n.s,t,h),c.push(f)}for(u=0;u<c.length;u++)c[u].start()}}),0)}function K(t,n,e){var r=[],i=e.timeout;T(n);r=M(t.a,e,t.c);var o=new W(t.c,n,i);for(t.h=r.length,n=0,e=r.length;n<e;n++)r[n].load((function(n,e,r){J(t,o,n,e,r)}))}function Q(t,n){this.c=t,this.a=n}function tt(t,n){this.c=t,this.a=n}function nt(t,n){this.c=t||et,this.a=[],this.f=[],this.g=n||""}W.prototype.g=function(t){var n=this.a;n.g&&d(n.f,[n.a.c("wf",t.c,k(t).toString(),"active")],[n.a.c("wf",t.c,k(t).toString(),"loading"),n.a.c("wf",t.c,k(t).toString(),"inactive")]),N(n,"fontactive",t),this.m=!0,Y(this)},W.prototype.h=function(t){var n=this.a;if(n.g){var e=p(n.f,n.a.c("wf",t.c,k(t).toString(),"active")),r=[],i=[n.a.c("wf",t.c,k(t).toString(),"loading")];e||r.push(n.a.c("wf",t.c,k(t).toString(),"inactive")),d(n.f,r,i)}N(n,"fontinactive",t),Y(this)},Z.prototype.load=function(t){this.c=new u(this.j,t.context||this.j),this.g=!1!==t.events,this.f=!1!==t.classes,K(this,new B(this.c,t),t)},Q.prototype.load=function(t){function n(){if(o["__mti_fntLst"+r]){var e,i=o["__mti_fntLst"+r](),a=[];if(i)for(var s=0;s<i.length;s++){var u=i[s].fontfamily;void 0!=i[s].fontStyle&&void 0!=i[s].fontWeight?(e=i[s].fontStyle+i[s].fontWeight,a.push(new _(u,e))):a.push(new _(u))}t(a)}else setTimeout((function(){n()}),50)}var e=this,r=e.a.projectId,i=e.a.version;if(r){var o=e.c.o;v(this.c,(e.a.api||"https://fast.fonts.net/jsapi")+"/"+r+".js"+(i?"?v="+i:""),(function(i){i?t([]):(o["__MonotypeConfiguration__"+r]=function(){return e.a},n())})).id="__MonotypeAPIScript__"+r}else t([])},tt.prototype.load=function(t){var n,e,r=this.a.urls||[],i=this.a.families||[],o=this.a.testStrings||{},a=new m;for(n=0,e=r.length;n<e;n++)y(this.c,r[n],x(a));var s=[];for(n=0,e=i.length;n<e;n++)if(r=i[n].split(":"),r[1])for(var u=r[1].split(","),c=0;c<u.length;c+=1)s.push(new _(r[0],u[c]));else s.push(new _(r[0]));b(a,(function(){t(s,o)}))};var et="https://fonts.googleapis.com/css";function rt(t,n){for(var e=n.length,r=0;r<e;r++){var i=n[r].split(":");3==i.length&&t.f.push(i.pop());var o="";2==i.length&&""!=i[1]&&(o=":"),t.a.push(i.join(o))}}function it(t){if(0==t.a.length)throw Error("No fonts to load!");if(-1!=t.c.indexOf("kit="))return t.c;for(var n=t.a.length,e=[],r=0;r<n;r++)e.push(t.a[r].replace(/ /g,"+"));return n=t.c+"?family="+e.join("%7C"),0<t.f.length&&(n+="&subset="+t.f.join(",")),0<t.g.length&&(n+="&text="+encodeURIComponent(t.g)),n}function ot(t){this.f=t,this.a=[],this.c={}}var at={latin:"BESbswy","latin-ext":"çöüğş",cyrillic:"йяЖ",greek:"αβΣ",khmer:"កខគ",Hanuman:"កខគ"},st={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},ut={i:"i",italic:"i",n:"n",normal:"n"},ct=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;function lt(t){for(var n=t.f.length,e=0;e<n;e++){var r=t.f[e].split(":"),i=r[0].replace(/\+/g," "),o=["n4"];if(2<=r.length){var a,s=r[1];if(a=[],s){s=s.split(",");for(var u=s.length,c=0;c<u;c++){var l;if(l=s[c],l.match(/^[\w-]+$/)){var h=ct.exec(l.toLowerCase());if(null==h)l="";else{if(l=h[2],l=null==l||""==l?"n":ut[l],h=h[1],null==h||""==h)h="4";else{var f=st[h];h=f||(isNaN(h)?"4":h.substr(0,1))}l=[l,h].join("")}}else l="";l&&a.push(l)}}0<a.length&&(o=a),3==r.length&&(r=r[2],a=[],r=r?r.split(","):a,0<r.length&&(r=at[r[0]])&&(t.c[i]=r))}for(t.c[i]||(r=at[i])&&(t.c[i]=r),r=0;r<o.length;r+=1)t.a.push(new _(i,o[r]))}}function ht(t,n){this.c=t,this.a=n}var ft={Arimo:!0,Cousine:!0,Tinos:!0};function dt(t,n){this.c=t,this.a=n}function pt(t,n){this.c=t,this.f=n,this.a=[]}ht.prototype.load=function(t){var n=new m,e=this.c,r=new nt(this.a.api,this.a.text),i=this.a.families;rt(r,i);var o=new ot(i);lt(o),y(e,it(r),x(n)),b(n,(function(){t(o.a,o.c,ft)}))},dt.prototype.load=function(t){var n=this.a.id,e=this.c.o;n?v(this.c,(this.a.api||"https://use.typekit.net")+"/"+n+".js",(function(n){if(n)t([]);else if(e.Typekit&&e.Typekit.config&&e.Typekit.config.fn){n=e.Typekit.config.fn;for(var r=[],i=0;i<n.length;i+=2)for(var o=n[i],a=n[i+1],s=0;s<a.length;s++)r.push(new _(o,a[s]));try{e.Typekit.load({events:!1,classes:!1,async:!0})}catch(u){}t(r)}}),2e3):t([])},pt.prototype.load=function(t){var n=this.f.id,e=this.c.o,r=this;n?(e.__webfontfontdeckmodule__||(e.__webfontfontdeckmodule__={}),e.__webfontfontdeckmodule__[n]=function(n,e){for(var i=0,o=e.fonts.length;i<o;++i){var a=e.fonts[i];r.a.push(new _(a.name,C("font-weight:"+a.weight+";font-style:"+a.style)))}t(r.a)},v(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+g(this.c)+"/"+n+".js",(function(n){n&&t([])}))):t([])};var gt=new Z(window);gt.a.c.custom=function(t,n){return new tt(n,t)},gt.a.c.fontdeck=function(t,n){return new pt(n,t)},gt.a.c.monotype=function(t,n){return new Q(n,t)},gt.a.c.typekit=function(t,n){return new dt(n,t)},gt.a.c.google=function(t,n){return new ht(n,t)};var yt={load:a(gt.load,gt)};r=function(){return yt}.call(n,e,n,t),void 0===r||(t.exports=r)})()},"2f47":function(t,n,e){"use strict";(function(t){e.d(n,"e",(function(){return r})),e.d(n,"p",(function(){return i})),e.d(n,"a",(function(){return o})),e.d(n,"c",(function(){return a})),e.d(n,"d",(function(){return s})),e.d(n,"o",(function(){return u})),e.d(n,"q",(function(){return c})),e.d(n,"s",(function(){return l})),e.d(n,"i",(function(){return h})),e.d(n,"r",(function(){return f})),e.d(n,"k",(function(){return d})),e.d(n,"m",(function(){return p})),e.d(n,"j",(function(){return g})),e.d(n,"l",(function(){return y})),e.d(n,"g",(function(){return v})),e.d(n,"f",(function(){return m})),e.d(n,"h",(function(){return x})),e.d(n,"n",(function(){return b})),e.d(n,"b",(function(){return w}));var r="1.11.0",i="object"==typeof self&&self.self===self&&self||"object"==typeof t&&t.global===t&&t||Function("return this")()||{},o=Array.prototype,a=Object.prototype,s="undefined"!==typeof Symbol?Symbol.prototype:null,u=o.push,c=o.slice,l=a.toString,h=a.hasOwnProperty,f="undefined"!==typeof ArrayBuffer,d=Array.isArray,p=Object.keys,g=Object.create,y=f&&ArrayBuffer.isView,v=isNaN,m=isFinite,x=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],w=Math.pow(2,53)-1}).call(this,e("c8ba"))},"3e8f":function(t,n){},"656a":function(t,n,e){"use strict";(function(t,r){e("99af"),e("a15b"),e("fb6a"),e("b0c0"),e("b680"),e("3410"),e("d3b7"),e("ac1f"),e("25f0"),e("466d"),e("5319"),e("1276"),e("498a");var i=e("53ca"),o=e("c46f"),a=e("c155"),s=e.n(a),u=e("27d6"),c=e.n(u);
/** js sequence diagrams 2.0.1
 *  https://bramp.github.io/js-sequence-diagrams/
 *  (c) 2012-2017 Andrew Brampton (bramp.net)
 *  @license Simplified BSD license.
 */
function l(){this.title=void 0,this.actors=[],this.signals=[]}l.prototype.getActor=function(t,n){var e;t=t.trim();var r=this.actors;for(e in r)if(r[e].alias==t)return r[e];return e=r.push(new l.Actor(t,n||t,r.length)),r[e-1]},l.prototype.getActorWithAlias=function(t){t=t.trim();var n,e,r=/([\s\S]+) as (\S+)$/im.exec(t);return r?(e=r[1].trim(),n=r[2].trim()):e=n=t,this.getActor(n,e)},l.prototype.setTitle=function(t){this.title=t},l.prototype.addSignal=function(t){this.signals.push(t)},l.Actor=function(t,n,e){this.alias=t,this.name=n,this.index=e},l.Signal=function(t,n,e,r){this.type="Signal",this.actorA=t,this.actorB=e,this.linetype=3&n,this.arrowtype=n>>2&3,this.message=r},l.Signal.prototype.isSelf=function(){return this.actorA.index==this.actorB.index},l.Note=function(t,n,e){if(this.type="Note",this.actor=t,this.placement=n,this.message=e,this.hasManyActors()&&t[0]==t[1])throw new Error("Note should be over two different actors")},l.Note.prototype.hasManyActors=function(){return o["a"].isArray(this.actor)},l.unescape=function(t){return t.trim().replace(/^"(.*)"$/m,"$1").replace(/\\n/gm,"\n")},l.LINETYPE={SOLID:0,DOTTED:1},l.ARROWTYPE={FILLED:0,OPEN:1},l.PLACEMENT={LEFTOF:0,RIGHTOF:1,OVER:2},"function"!==typeof Object.getPrototypeOf&&("object"===Object(i["a"])("test".__proto__)?Object.getPrototypeOf=function(t){return t.__proto__}:Object.getPrototypeOf=function(t){return t.constructor.prototype});var h=function(){function t(){this.yy={}}var n=function(t,n,e,r){for(e=e||{},r=t.length;r--;e[t[r]]=n);return e},e=[5,8,9,13,15,24],r=[1,13],i=[1,17],o=[24,29,30],a={trace:function(){},yy:{},symbols_:{error:2,start:3,document:4,EOF:5,line:6,statement:7,NL:8,participant:9,actor_alias:10,signal:11,note_statement:12,title:13,message:14,note:15,placement:16,actor:17,over:18,actor_pair:19,",":20,left_of:21,right_of:22,signaltype:23,ACTOR:24,linetype:25,arrowtype:26,LINE:27,DOTLINE:28,ARROW:29,OPENARROW:30,MESSAGE:31,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",8:"NL",9:"participant",13:"title",15:"note",18:"over",20:",",21:"left_of",22:"right_of",24:"ACTOR",27:"LINE",28:"DOTLINE",29:"ARROW",30:"OPENARROW",31:"MESSAGE"},productions_:[0,[3,2],[4,0],[4,2],[6,1],[6,1],[7,2],[7,1],[7,1],[7,2],[12,4],[12,4],[19,1],[19,3],[16,1],[16,1],[11,4],[17,1],[10,1],[23,2],[23,1],[25,1],[25,1],[26,1],[26,1],[14,1]],performAction:function(t,n,e,r,i,o,a){var s=o.length-1;switch(i){case 1:return r.parser.yy;case 4:break;case 6:o[s];break;case 7:case 8:r.parser.yy.addSignal(o[s]);break;case 9:r.parser.yy.setTitle(o[s]);break;case 10:this.$=new l.Note(o[s-1],o[s-2],o[s]);break;case 11:this.$=new l.Note(o[s-1],l.PLACEMENT.OVER,o[s]);break;case 12:case 20:this.$=o[s];break;case 13:this.$=[o[s-2],o[s]];break;case 14:this.$=l.PLACEMENT.LEFTOF;break;case 15:this.$=l.PLACEMENT.RIGHTOF;break;case 16:this.$=new l.Signal(o[s-3],o[s-2],o[s-1],o[s]);break;case 17:this.$=r.parser.yy.getActor(l.unescape(o[s]));break;case 18:this.$=r.parser.yy.getActorWithAlias(l.unescape(o[s]));break;case 19:this.$=o[s-1]|o[s]<<2;break;case 21:this.$=l.LINETYPE.SOLID;break;case 22:this.$=l.LINETYPE.DOTTED;break;case 23:this.$=l.ARROWTYPE.FILLED;break;case 24:this.$=l.ARROWTYPE.OPEN;break;case 25:this.$=l.unescape(o[s].substring(1))}},table:[n(e,[2,2],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:[1,6],9:[1,7],11:8,12:9,13:[1,10],15:[1,12],17:11,24:r},{1:[2,1]},n(e,[2,3]),n(e,[2,4]),n(e,[2,5]),{10:14,24:[1,15]},n(e,[2,7]),n(e,[2,8]),{14:16,31:i},{23:18,25:19,27:[1,20],28:[1,21]},{16:22,18:[1,23],21:[1,24],22:[1,25]},n([20,27,28,31],[2,17]),n(e,[2,6]),n(e,[2,18]),n(e,[2,9]),n(e,[2,25]),{17:26,24:r},{24:[2,20],26:27,29:[1,28],30:[1,29]},n(o,[2,21]),n(o,[2,22]),{17:30,24:r},{17:32,19:31,24:r},{24:[2,14]},{24:[2,15]},{14:33,31:i},{24:[2,19]},{24:[2,23]},{24:[2,24]},{14:34,31:i},{14:35,31:i},{20:[1,36],31:[2,12]},n(e,[2,16]),n(e,[2,10]),n(e,[2,11]),{17:37,24:r},{31:[2,13]}],defaultActions:{3:[2,1],24:[2,14],25:[2,15],27:[2,19],28:[2,23],29:[2,24],37:[2,13]},parseError:function(t,n){if(!n.recoverable)throw new Error(t);this.trace(t)},parse:function(t){function n(){var t;return t=p.lex()||f,"number"!=typeof t&&(t=e.symbols_[t]||t),t}var e=this,r=[0],i=[null],o=[],a=this.table,s="",u=0,c=0,l=0,h=2,f=1,d=o.slice.call(arguments,1),p=Object.create(this.lexer),g={yy:{}};for(var y in this.yy)Object.prototype.hasOwnProperty.call(this.yy,y)&&(g.yy[y]=this.yy[y]);p.setInput(t,g.yy),g.yy.lexer=p,g.yy.parser=this,"undefined"==typeof p.yylloc&&(p.yylloc={});var v=p.yylloc;o.push(v);var m=p.options&&p.options.ranges;"function"==typeof g.yy.parseError?this.parseError=g.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var x,b,w,F,_,E,S,k,A,C={};;){if(w=r[r.length-1],this.defaultActions[w]?F=this.defaultActions[w]:(null!==x&&"undefined"!=typeof x||(x=n()),F=a[w]&&a[w][x]),"undefined"==typeof F||!F.length||!F[0]){var B="";for(E in A=[],a[w])this.terminals_[E]&&E>h&&A.push("'"+this.terminals_[E]+"'");B=p.showPosition?"Parse error on line "+(u+1)+":\n"+p.showPosition()+"\nExpecting "+A.join(", ")+", got '"+(this.terminals_[x]||x)+"'":"Parse error on line "+(u+1)+": Unexpected "+(x==f?"end of input":"'"+(this.terminals_[x]||x)+"'"),this.parseError(B,{text:p.match,token:this.terminals_[x]||x,line:p.yylineno,loc:v,expected:A})}if(F[0]instanceof Array&&F.length>1)throw new Error("Parse Error: multiple actions possible at state: "+w+", token: "+x);switch(F[0]){case 1:r.push(x),i.push(p.yytext),o.push(p.yylloc),r.push(F[1]),x=null,b?(x=b,b=null):(c=p.yyleng,s=p.yytext,u=p.yylineno,v=p.yylloc,l>0&&l--);break;case 2:if(S=this.productions_[F[1]][1],C.$=i[i.length-S],C._$={first_line:o[o.length-(S||1)].first_line,last_line:o[o.length-1].last_line,first_column:o[o.length-(S||1)].first_column,last_column:o[o.length-1].last_column},m&&(C._$.range=[o[o.length-(S||1)].range[0],o[o.length-1].range[1]]),_=this.performAction.apply(C,[s,c,u,g.yy,F[1],i,o].concat(d)),"undefined"!=typeof _)return _;S&&(r=r.slice(0,-1*S*2),i=i.slice(0,-1*S),o=o.slice(0,-1*S)),r.push(this.productions_[F[1]][0]),i.push(C.$),o.push(C._$),k=a[r[r.length-2]][r[r.length-1]],r.push(k);break;case 3:return!0}}return!0}},s=function(){var t={EOF:1,parseError:function(t,n){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,n)},setInput:function(t,n){return this.yy=n||this.yy||{},this._input=t,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t;var n=t.match(/(?:\r\n?|\n).*/g);return n?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var n=t.length,e=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-n),this.offset-=n;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),e.length-1&&(this.yylineno-=e.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:e?(e.length===r.length?this.yylloc.first_column:0)+r[r.length-e.length].length-e[0].length:this.yylloc.first_column-n},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-n]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput(),n=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+n+"^"},test_match:function(t,n){var e,r,i;if(this.options.backtrack_lexer&&(i={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(i.yylloc.range=this.yylloc.range.slice(0))),r=t[0].match(/(?:\r\n?|\n).*/g),r&&(this.yylineno+=r.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:r?r[r.length-1].length-r[r.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,n,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e)return e;if(this._backtrack){for(var o in i)this[o]=i[o];return!1}return!1},next:function(){if(this.done)return this.EOF;var t,n,e,r;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var i=this._currentRules(),o=0;o<i.length;o++)if(e=this._input.match(this.rules[i[o]]),e&&(!n||e[0].length>n[0].length)){if(n=e,r=o,this.options.backtrack_lexer){if(t=this.test_match(e,i[o]),!1!==t)return t;if(this._backtrack){n=!1;continue}return!1}if(!this.options.flex)break}return n?(t=this.test_match(n,i[r]),!1!==t&&t):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var t=this.next();return t||this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){var t=this.conditionStack.length-1;return t>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(t){return t=this.conditionStack.length-1-Math.abs(t||0),t>=0?this.conditionStack[t]:"INITIAL"},pushState:function(t){this.begin(t)},stateStackSize:function(){return this.conditionStack.length},options:{"case-insensitive":!0},performAction:function(t,n,e,r){switch(e){case 0:return 8;case 1:break;case 2:break;case 3:return 9;case 4:return 21;case 5:return 22;case 6:return 18;case 7:return 15;case 8:return 13;case 9:return 20;case 10:return 24;case 11:return 24;case 12:return 28;case 13:return 27;case 14:return 30;case 15:return 29;case 16:return 31;case 17:return 5;case 18:return"INVALID"}},rules:[/^(?:[\r\n]+)/i,/^(?:\s+)/i,/^(?:#[^\r\n]*)/i,/^(?:participant\b)/i,/^(?:left of\b)/i,/^(?:right of\b)/i,/^(?:over\b)/i,/^(?:note\b)/i,/^(?:title\b)/i,/^(?:,)/i,/^(?:[^\->:,\r\n"]+)/i,/^(?:"[^"]+")/i,/^(?:--)/i,/^(?:-)/i,/^(?:>>)/i,/^(?:>)/i,/^(?:[^\r\n]+)/i,/^(?:$)/i,/^(?:.)/i],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],inclusive:!0}}};return t}();return a.lexer=s,t.prototype=a,a.Parser=t,new t}();function f(t,n){o["a"].extend(this,n),this.name="ParseError",this.message=t||""}"undefined"!=typeof exports&&(exports.parser=h,exports.Parser=h.Parser,exports.parse=function(){return h.parse.apply(h,arguments)},exports.main=function(n){n[1]||(console.log("Usage: "+n[0]+" FILE"),t.exit(1));var r=e("3e8f").readFileSync(e("df7c").normalize(n[1]),"utf8");return exports.parser.parse(r)},e.c[e.s]===r&&exports.main(t.argv.slice(1))),f.prototype=new Error,l.ParseError=f,l.parse=function(t){h.yy=new l,h.yy.parseError=function(t,n){throw new f(t,n)};var n=h.parse(t);return delete n.parseError,n};var d=10,p=10,g=10,y=5,v=5,m=10,x=5,b=15,w=0,F=5,_=20,E=l.PLACEMENT,S=l.LINETYPE,k=l.ARROWTYPE,A=0,C=1;function B(t){this.message=t}function T(t,n){if(!t)throw new B(n)}function j(t,n){l.themes[t]=n}function N(t){return t.x+t.width/2}function D(t){return t.y+t.height/2}function M(t,n,e){return t<n?n:t>e?e:t}function O(t,n,e,r){T(o["a"].all([t,e,n,r],o["a"].isFinite),"x1,x2,y1,y2 must be numeric");var i=Math.sqrt((e-t)*(e-t)+(r-n)*(r-n))/25,a=M(Math.random(),.2,.8),s=M(Math.random(),.2,.8),u=Math.random()>.5?i:-i,c=Math.random()>.5?i:-i,l={x:(e-t)*a+t+u,y:(r-n)*a+n+c},h={x:(e-t)*s+t-u,y:(r-n)*s+n-c};return"C"+l.x.toFixed(1)+","+l.y.toFixed(1)+" "+h.x.toFixed(1)+","+h.y.toFixed(1)+" "+e.toFixed(1)+","+r.toFixed(1)}function P(t,n,e,r){return T(o["a"].all([t,n,e,r],o["a"].isFinite),"x, y, w, h must be numeric"),"M"+t+","+n+O(t,n,t+e,n)+O(t+e,n,t+e,n+r)+O(t+e,n+r,t,n+r)+O(t,n+r,t,n)}function L(t,n,e,r){return T(o["a"].all([t,e,n,r],o["a"].isFinite),"x1,x2,y1,y2 must be numeric"),"M"+t.toFixed(1)+","+n.toFixed(1)+O(t,n,e,r)}B.prototype.toString=function(){return"AssertException: "+this.message},String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),l.themes={};var I=function(t,n){this.init(t,n)};if(o["a"].extend(I.prototype,{init:function(t,n){this.diagram=t,this.actorsHeight_=0,this.signalsHeight_=0,this.title_=void 0},setupPaper:function(t){},draw:function(t){this.setupPaper(t),this.layout();var n=this.title_?this.title_.height:0,e=d+n;this.drawTitle(),this.drawActors(e),this.drawSignals(e+this.actorsHeight_)},layout:function(){var t=this.diagram,n=this.font_,e=t.actors,r=t.signals;if(t.width=0,t.height=0,t.title){var i=this.title_={},a=this.textBBox(t.title,n);i.textBB=a,i.message=t.title,i.width=a.width+2*(F+w),i.height=a.height+2*(F+w),i.x=d,i.y=d,t.width+=i.width,t.height+=i.height}function s(t,n,r){T(t<n,"a must be less than or equal to b"),t<0?(n=e[n],n.x=Math.max(r-n.width/2,n.x)):n>=e.length?(t=e[t],t.paddingRight=Math.max(r,t.paddingRight)):(t=e[t],t.distances[n]=Math.max(r,t.distances[n]?t.distances[n]:0))}o["a"].each(e,(function(t){var e=this.textBBox(t.name,n);t.textBB=e,t.x=0,t.y=0,t.width=e.width+2*(g+p),t.height=e.height+2*(g+p),t.distances=[],t.paddingRight=0,this.actorsHeight_=Math.max(t.height,this.actorsHeight_)}),this),o["a"].each(r,(function(t){var e,r,i=this.textBBox(t.message,n);t.textBB=i,t.width=i.width,t.height=i.height;var o=0;if("Signal"==t.type)t.width+=2*(y+v),t.height+=2*(y+v),t.isSelf()?(e=t.actorA.index,r=e+1,t.width+=_):(e=Math.min(t.actorA.index,t.actorB.index),r=Math.max(t.actorA.index,t.actorB.index));else{if("Note"!=t.type)throw new Error("Unhandled signal type:"+t.type);if(t.width+=2*(m+x),t.height+=2*(m+x),o=2*p,t.placement==E.LEFTOF)r=t.actor.index,e=r-1;else if(t.placement==E.RIGHTOF)e=t.actor.index,r=e+1;else if(t.placement==E.OVER&&t.hasManyActors())e=Math.min(t.actor[0].index,t.actor[1].index),r=Math.max(t.actor[0].index,t.actor[1].index),o=-(2*x+2*b);else if(t.placement==E.OVER)return e=t.actor.index,s(e-1,e,t.width/2),s(e,e+1,t.width/2),void(this.signalsHeight_+=t.height)}s(e,r,t.width+o),this.signalsHeight_+=t.height}),this);var u=0;return o["a"].each(e,(function(t){t.x=Math.max(u,t.x),o["a"].each(t.distances,(function(n,r){"undefined"!=typeof n&&(r=e[r],n=Math.max(n,t.width/2,r.width/2),r.x=Math.max(r.x,t.x+t.width/2+n-r.width/2))})),u=t.x+t.width+t.paddingRight}),this),t.width=Math.max(u,t.width),t.width+=2*d,t.height+=2*d+2*this.actorsHeight_+this.signalsHeight_,this},textBBox:function(t,n){},drawTitle:function(){var t=this.title_;t&&this.drawTextBox(t,t.message,w,F,this.font_,A)},drawActors:function(t){var n=t;o["a"].each(this.diagram.actors,(function(t){this.drawActor(t,n,this.actorsHeight_),this.drawActor(t,n+this.actorsHeight_+this.signalsHeight_,this.actorsHeight_);var e=N(t);this.drawLine(e,n+this.actorsHeight_-p,e,n+this.actorsHeight_+p+this.signalsHeight_)}),this)},drawActor:function(t,n,e){t.y=n,t.height=e,this.drawTextBox(t,t.name,p,g,this.font_,C)},drawSignals:function(t){var n=t;o["a"].each(this.diagram.signals,(function(t){"Signal"==t.type?t.isSelf()?this.drawSelfSignal(t,n):this.drawSignal(t,n):"Note"==t.type&&this.drawNote(t,n),n+=t.height}),this)},drawSelfSignal:function(t,n){T(t.isSelf(),"signal must be a self signal");var e=t.textBB,r=N(t.actorA),i=r+_+v,o=n+v+t.height/2+e.y;this.drawText(i,o,t.message,this.font_,A);var a=n+y+v,s=a+t.height-2*y-v;this.drawLine(r,a,r+_,a,t.linetype),this.drawLine(r+_,a,r+_,s,t.linetype),this.drawLine(r+_,s,r,s,t.linetype,t.arrowtype)},drawSignal:function(t,n){var e=N(t.actorA),r=N(t.actorB),i=(r-e)/2+e,o=n+y+2*v;this.drawText(i,o,t.message,this.font_,C),o=n+t.height-y-v,this.drawLine(e,o,r,o,t.linetype,t.arrowtype)},drawNote:function(t,n){t.y=n;var e=t.hasManyActors()?t.actor[0]:t.actor,r=N(e);switch(t.placement){case E.RIGHTOF:t.x=r+p;break;case E.LEFTOF:t.x=r-p-t.width;break;case E.OVER:if(t.hasManyActors()){var i=N(t.actor[1]),o=b+x;t.x=Math.min(r,i)-o,t.width=Math.max(r,i)+o-t.x}else t.x=r-t.width/2;break;default:throw new Error("Unhandled note placement: "+t.placement)}return this.drawTextBox(t,t.message,m,x,this.font_,A)},drawTextBox:function(t,n,e,r,i,o){var a=t.x+e,s=t.y+e,u=t.width-2*e,c=t.height-2*e;return this.drawRect(a,s,u,c),o==C?(a=N(t),s=D(t)):(a+=r,s+=r),this.drawText(a,s,n,i,o)}}),"undefined"!=typeof s.a){var R="http://www.w3.org/2000/svg",q={stroke:"#000000","stroke-width":2,fill:"none"},G={stroke:"#000000","stroke-width":2,fill:"#fff"},V={},z=function(t,n,e){o["a"].defaults(n,{"css-class":"simple","font-size":16,"font-family":"Andale Mono, monospace"}),this.init(t,n,e)};o["a"].extend(z.prototype,I.prototype,{init:function(t,n,e){I.prototype.init.call(this,t),this.paper_=void 0,this.cssClass_=n["css-class"]||void 0,this.font_={"font-size":n["font-size"],"font-family":n["font-family"]};var r=this.arrowTypes_={};r[k.FILLED]="Block",r[k.OPEN]="Open";var i=this.lineTypes_={};i[S.SOLID]="",i[S.DOTTED]="6,2";var o=this;this.waitForFont((function(){e(o)}))},waitForFont:function(t){var n=this.font_["font-family"];if("undefined"==typeof c.a)throw new Error("WebFont is required (https://github.com/typekit/webfontloader).");V[n]?t():c.a.load({custom:{families:[n]},classes:!1,active:function(){V[n]=!0,t()},inactive:function(){V[n]=!0,t()}})},addDescription:function(t,n){var e=document.createElementNS(R,"desc");e.appendChild(document.createTextNode(n)),t.appendChild(e)},setupPaper:function(t){var n=document.createElementNS(R,"svg");t.appendChild(n),this.addDescription(n,this.diagram.title||""),this.paper_=s()(n),this.paper_.addClass("sequence"),this.cssClass_&&this.paper_.addClass(this.cssClass_),this.beginGroup();var e=this.arrowMarkers_={},r=this.paper_.path("M 0 0 L 5 2.5 L 0 5 z");e[k.FILLED]=r.marker(0,0,5,5,5,2.5).attr({id:"markerArrowBlock"}),r=this.paper_.path("M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z"),e[k.OPEN]=r.marker(0,0,9.6,16,9.6,8).attr({markerWidth:"4",id:"markerArrowOpen"})},layout:function(){I.prototype.layout.call(this),this.paper_.attr({width:this.diagram.width+"px",height:this.diagram.height+"px"})},textBBox:function(t,n){var e=this.createText(t,n),r=e.getBBox();return e.remove(),r},pushToStack:function(t){return this._stack.push(t),t},beginGroup:function(){this._stack=[]},finishGroup:function(){var t=this.paper_.group.apply(this.paper_,this._stack);return this.beginGroup(),t},createText:function(t,n){t=o["a"].invoke(t.split("\n"),"trim");var e=this.paper_.text(0,0,t);return e.attr(n||{}),t.length>1&&e.selectAll("tspan:nth-child(n+2)").attr({dy:"1.2em",x:0}),e},drawLine:function(t,n,e,r,i,o){var a=this.paper_.line(t,n,e,r).attr(q);return void 0!==i&&a.attr("strokeDasharray",this.lineTypes_[i]),void 0!==o&&a.attr("markerEnd",this.arrowMarkers_[o]),this.pushToStack(a)},drawRect:function(t,n,e,r){var i=this.paper_.rect(t,n,e,r).attr(G);return this.pushToStack(i)},drawText:function(t,n,e,r,i){var o=this.createText(e,r),a=o.getBBox();return i==C&&(t-=a.width/2,n-=a.height/2),o.attr({x:t-a.x,y:n-a.y}),o.selectAll("tspan").attr({x:t}),this.pushToStack(o),o},drawTitle:function(){return this.beginGroup(),I.prototype.drawTitle.call(this),this.finishGroup().addClass("title")},drawActor:function(t,n,e){return this.beginGroup(),I.prototype.drawActor.call(this,t,n,e),this.finishGroup().addClass("actor")},drawSignal:function(t,n){return this.beginGroup(),I.prototype.drawSignal.call(this,t,n),this.finishGroup().addClass("signal")},drawSelfSignal:function(t,n){return this.beginGroup(),I.prototype.drawSelfSignal.call(this,t,n),this.finishGroup().addClass("signal")},drawNote:function(t,n){return this.beginGroup(),I.prototype.drawNote.call(this,t,n),this.finishGroup().addClass("note")}});var $=function(t,n,e){o["a"].defaults(n,{"css-class":"hand","font-size":16,"font-family":"danielbd"}),this.init(t,n,e)};o["a"].extend($.prototype,z.prototype,{drawLine:function(t,n,e,r,i,o){var a=this.paper_.path(L(t,n,e,r)).attr(q);return void 0!==i&&a.attr("strokeDasharray",this.lineTypes_[i]),void 0!==o&&a.attr("markerEnd",this.arrowMarkers_[o]),this.pushToStack(a)},drawRect:function(t,n,e,r){var i=this.paper_.path(P(t,n,e,r)).attr(G);return this.pushToStack(i)}}),j("snapSimple",z),j("snapHand",$)}if("undefined"==typeof Raphael&&"undefined"==typeof s.a)throw new Error("Raphael or Snap.svg is required to be included.");if(o["a"].isEmpty(l.themes))throw new Error("No themes were registered. Please call registerTheme(...).");l.themes.hand=l.themes.snapHand||l.themes.raphaelHand,l.themes.simple=l.themes.snapSimple||l.themes.raphaelSimple,l.prototype.drawSVG=function(t,n){var e={theme:"hand"};if(n=o["a"].defaults(n||{},e),!(n.theme in l.themes))throw new Error("Unsupported theme: "+n.theme);var r=o["a"].isString(t)?document.getElementById(t):t;if(null===r||!r.tagName)throw new Error("Invalid container: "+t);var i=l.themes[n.theme];new i(this,n,(function(t){t.draw(r)}))},n["a"]=l}).call(this,e("f28c"),e("dd40")(t))},c155:function(t,n,e){var r,i,o;(function(e){var o,a,s="0.5.0",u="hasOwnProperty",c=/[\.\/]/,l=/\s*,\s*/,h="*",f=function(t,n){return t-n},d={n:{}},p=function(){for(var t=0,n=this.length;t<n;t++)if("undefined"!=typeof this[t])return this[t]},g=function(){var t=this.length;while(--t)if("undefined"!=typeof this[t])return this[t]},y=Object.prototype.toString,v=String,m=Array.isArray||function(t){return t instanceof Array||"[object Array]"==y.call(t)};eve=function(t,n){var e,r=a,i=Array.prototype.slice.call(arguments,2),s=eve.listeners(t),u=0,c=[],l={},h=[],d=o;h.firstDefined=p,h.lastDefined=g,o=t,a=0;for(var y=0,v=s.length;y<v;y++)"zIndex"in s[y]&&(c.push(s[y].zIndex),s[y].zIndex<0&&(l[s[y].zIndex]=s[y]));c.sort(f);while(c[u]<0)if(e=l[c[u++]],h.push(e.apply(n,i)),a)return a=r,h;for(y=0;y<v;y++)if(e=s[y],"zIndex"in e)if(e.zIndex==c[u]){if(h.push(e.apply(n,i)),a)break;do{if(u++,e=l[c[u]],e&&h.push(e.apply(n,i)),a)break}while(e)}else l[e.zIndex]=e;else if(h.push(e.apply(n,i)),a)break;return a=r,o=d,h},eve._events=d,eve.listeners=function(t){var n,e,r,i,o,a,s,u,l=m(t)?t:t.split(c),f=d,p=[f],g=[];for(i=0,o=l.length;i<o;i++){for(u=[],a=0,s=p.length;a<s;a++){f=p[a].n,e=[f[l[i]],f[h]],r=2;while(r--)n=e[r],n&&(u.push(n),g=g.concat(n.f||[]))}p=u}return g},eve.separator=function(t){t?(t=v(t).replace(/(?=[\.\^\]\[\-])/g,"\\"),t="["+t+"]",c=new RegExp(t)):c=/[\.\/]/},eve.on=function(t,n){if("function"!=typeof n)return function(){};for(var e=m(t)?m(t[0])?t:[t]:v(t).split(l),r=0,i=e.length;r<i;r++)(function(t){for(var e,r=m(t)?t:v(t).split(c),i=d,o=0,a=r.length;o<a;o++)i=i.n,i=i.hasOwnProperty(r[o])&&i[r[o]]||(i[r[o]]={n:{}});for(i.f=i.f||[],o=0,a=i.f.length;o<a;o++)if(i.f[o]==n){e=!0;break}!e&&i.f.push(n)})(e[r]);return function(t){+t==+t&&(n.zIndex=+t)}},eve.f=function(t){var n=[].slice.call(arguments,1);return function(){eve.apply(null,[t,null].concat(n).concat([].slice.call(arguments,0)))}},eve.stop=function(){a=1},eve.nt=function(t){var n=m(o)?o.join("."):o;return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(n):n},eve.nts=function(){return m(o)?o:o.split(c)},eve.off=eve.unbind=function(t,n){if(t){var e=m(t)?m(t[0])?t:[t]:v(t).split(l);if(e.length>1)for(var r=0,i=e.length;r<i;r++)eve.off(e[r],n);else{e=m(t)?t:v(t).split(c);var o,a,s,f,p,g=[d],y=[];for(r=0,i=e.length;r<i;r++)for(f=0;f<g.length;f+=s.length-2){if(s=[f,1],o=g[f].n,e[r]!=h)o[e[r]]&&(s.push(o[e[r]]),y.unshift({n:o,name:e[r]}));else for(a in o)o[u](a)&&(s.push(o[a]),y.unshift({n:o,name:a}));g.splice.apply(g,s)}for(r=0,i=g.length;r<i;r++){o=g[r];while(o.n){if(n){if(o.f){for(f=0,p=o.f.length;f<p;f++)if(o.f[f]==n){o.f.splice(f,1);break}!o.f.length&&delete o.f}for(a in o.n)if(o.n[u](a)&&o.n[a].f){var x=o.n[a].f;for(f=0,p=x.length;f<p;f++)if(x[f]==n){x.splice(f,1);break}!x.length&&delete o.n[a].f}}else for(a in delete o.f,o.n)o.n[u](a)&&o.n[a].f&&delete o.n[a].f;o=o.n}}t:for(r=0,i=y.length;r<i;r++){for(a in o=y[r],o.n[o.name].f)continue t;for(a in o.n[o.name].n)continue t;delete o.n[o.name]}}}else eve._events=d={n:{}}},eve.once=function(t,n){var e=function(){return eve.off(t,e),n.apply(this,arguments)};return eve.on(t,e)},eve.version=s,eve.toString=function(){return"You are running Eve "+s},t.exports?t.exports=eve:(i=[],r=function(){return eve}.apply(n,i))})(),function(e,a){i=[r],o=function(t){return a(e,t)}.apply(n,i),void 0===o||(t.exports=o)}(window||this,(function(t,n){var e=function(n){var e,r={},i=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(t){return setTimeout(t,16,(new Date).getTime()),!0},o=Array.isArray||function(t){return t instanceof Array||"[object Array]"==Object.prototype.toString.call(t)},a=0,s="M"+(+new Date).toString(36),u=function(){return s+(a++).toString(36)},c=Date.now||function(){return+new Date},l=function(t){var n=this;if(null==t)return n.s;var e=n.s-t;n.b+=n.dur*e,n.B+=n.dur*e,n.s=t},h=function(t){var n=this;if(null==t)return n.spd;n.spd=t},f=function(t){var n=this;if(null==t)return n.dur;n.s=n.s*t/n.dur,n.dur=t},d=function(){var t=this;delete r[t.id],t.update(),n("mina.stop."+t.id,t)},p=function(){var t=this;t.pdif||(delete r[t.id],t.update(),t.pdif=t.get()-t.b)},g=function(){var t=this;t.pdif&&(t.b=t.get()-t.pdif,delete t.pdif,r[t.id]=t,v())},y=function(){var t,n=this;if(o(n.start)){t=[];for(var e=0,r=n.start.length;e<r;e++)t[e]=+n.start[e]+(n.end[e]-n.start[e])*n.easing(n.s)}else t=+n.start+(n.end-n.start)*n.easing(n.s);n.set(t)},v=function(t){if(t){var o=0;for(var a in r)if(r.hasOwnProperty(a)){var s=r[a],u=s.get();o++,s.s=(u-s.b)/(s.dur/s.spd),s.s>=1&&(delete r[a],s.s=1,o--,function(t){setTimeout((function(){n("mina.finish."+t.id,t)}))}(s)),s.update()}e=!!o&&i(v)}else e||(e=i(v))},m=function(t,n,e,i,o,a,s){var c={id:u(),start:t,end:n,b:e,s:0,dur:i-e,spd:1,get:o,set:a,easing:s||m.linear,status:l,speed:h,duration:f,stop:d,pause:p,resume:g,update:y};r[c.id]=c;var x,b=0;for(x in r)if(r.hasOwnProperty(x)&&(b++,2==b))break;return 1==b&&v(),c};return m.time=c,m.getById=function(t){return r[t]||null},m.linear=function(t){return t},m.easeout=function(t){return Math.pow(t,1.7)},m.easein=function(t){return Math.pow(t,.48)},m.easeinout=function(t){if(1==t)return 1;if(0==t)return 0;var n=.48-t/1.04,e=Math.sqrt(.1734+n*n),r=e-n,i=Math.pow(Math.abs(r),1/3)*(r<0?-1:1),o=-e-n,a=Math.pow(Math.abs(o),1/3)*(o<0?-1:1),s=i+a+.5;return 3*(1-s)*s*s+s*s*s},m.backin=function(t){if(1==t)return 1;var n=1.70158;return t*t*((n+1)*t-n)},m.backout=function(t){if(0==t)return 0;t-=1;var n=1.70158;return t*t*((n+1)*t+n)+1},m.elastic=function(t){return t==!!t?t:Math.pow(2,-10*t)*Math.sin((t-.075)*(2*Math.PI)/.3)+1},m.bounce=function(t){var n,e=7.5625,r=2.75;return t<1/r?n=e*t*t:t<2/r?(t-=1.5/r,n=e*t*t+.75):t<2.5/r?(t-=2.25/r,n=e*t*t+.9375):(t-=2.625/r,n=e*t*t+.984375),n},t.mina=m,m}("undefined"==typeof n?function(){}:n),r=function(t){function e(t,n){if(t){if(t.nodeType)return Q(t);if(B(t,"array")&&e.set)return e.set.apply(e,t);if(t instanceof Y)return t;if(null==n)return t=r.doc.querySelector(String(t)),Q(t)}return t=null==t?"100%":t,n=null==n?"100%":n,new K(t,n)}e.version="0.5.1",e.toString=function(){return"Snap v"+this.version},e._={};var r={win:t.window,doc:t.window.document};e._.glob=r;var i="hasOwnProperty",o=String,a=parseFloat,s=parseInt,u=Math,c=u.max,l=u.min,h=u.abs,f=(u.pow,u.PI),d=(u.round,""),p=Object.prototype.toString,y=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,v=(e._.separator=/[,\s]+/,/[\s]*,[\s]*/),m={hs:1,rg:1},x=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,b=/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,w=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/gi,F=0,_="S"+(+new Date).toString(36),E=function(t){return(t&&t.type?t.type:d)+_+(F++).toString(36)},S="http://www.w3.org/1999/xlink",k="http://www.w3.org/2000/svg",A={};e.url=function(t){return"url('#"+t+"')"};function C(t,n){if(n){if("#text"==t&&(t=r.doc.createTextNode(n.text||n["#text"]||"")),"#comment"==t&&(t=r.doc.createComment(n.text||n["#text"]||"")),"string"==typeof t&&(t=C(t)),"string"==typeof n)return 1==t.nodeType?"xlink:"==n.substring(0,6)?t.getAttributeNS(S,n.substring(6)):"xml:"==n.substring(0,4)?t.getAttributeNS(k,n.substring(4)):t.getAttribute(n):"text"==n?t.nodeValue:null;if(1==t.nodeType){for(var e in n)if(n[i](e)){var a=o(n[e]);a?"xlink:"==e.substring(0,6)?t.setAttributeNS(S,e.substring(6),a):"xml:"==e.substring(0,4)?t.setAttributeNS(k,e.substring(4),a):t.setAttribute(e,a):t.removeAttribute(e)}}else"text"in n&&(t.nodeValue=n.text)}else t=r.doc.createElementNS(k,t);return t}function B(t,n){return n=o.prototype.toLowerCase.call(n),"finite"==n?isFinite(t):!("array"!=n||!(t instanceof Array||Array.isArray&&Array.isArray(t)))||("null"==n&&null===t||n==typeof t&&null!==t||"object"==n&&t===Object(t)||p.call(t).slice(8,-1).toLowerCase()==n)}function T(t){if("function"==typeof t||Object(t)!==t)return t;var n=new t.constructor;for(var e in t)t[i](e)&&(n[e]=T(t[e]));return n}function j(t,n){for(var e=0,r=t.length;e<r;e++)if(t[e]===n)return t.push(t.splice(e,1)[0])}function N(t,n,e){function r(){var o=Array.prototype.slice.call(arguments,0),a=o.join("␀"),s=r.cache=r.cache||{},u=r.count=r.count||[];return s[i](a)?(j(u,a),e?e(s[a]):s[a]):(u.length>=1e3&&delete s[u.shift()],u.push(a),s[a]=t.apply(n,o),e?e(s[a]):s[a])}return r}function D(t,n,e,r,i,o){if(null==i){var a=t-e,s=n-r;return a||s?(180+180*u.atan2(-s,-a)/f+360)%360:0}return D(t,n,i,o)-D(e,r,i,o)}function M(t){return t%360*f/180}function O(t){return 180*t/f%360}e._.$=C,e._.id=E,e.format=function(){var t=/\{([^\}]+)\}/g,n=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,e=function(t,e,r){var i=r;return e.replace(n,(function(t,n,e,r,o){n=n||r,i&&(n in i&&(i=i[n]),"function"==typeof i&&o&&(i=i()))})),i=(null==i||i==r?t:i)+"",i};return function(n,r){return o(n).replace(t,(function(t,n){return e(t,n,r)}))}}(),e._.clone=T,e._.cacher=N,e.rad=M,e.deg=O,e.sin=function(t){return u.sin(e.rad(t))},e.tan=function(t){return u.tan(e.rad(t))},e.cos=function(t){return u.cos(e.rad(t))},e.asin=function(t){return e.deg(u.asin(t))},e.acos=function(t){return e.deg(u.acos(t))},e.atan=function(t){return e.deg(u.atan(t))},e.atan2=function(t){return e.deg(u.atan2(t))},e.angle=D,e.len=function(t,n,r,i){return Math.sqrt(e.len2(t,n,r,i))},e.len2=function(t,n,e,r){return(t-e)*(t-e)+(n-r)*(n-r)},e.closestPoint=function(t,n,e){function r(t){var r=t.x-n,i=t.y-e;return r*r+i*i}for(var i,o,a,s,u=t.node,c=u.getTotalLength(),l=c/u.pathSegList.numberOfItems*.125,h=1/0,f=0;f<=c;f+=l)(s=r(a=u.getPointAtLength(f)))<h&&(i=a,o=f,h=s);l*=.5;while(l>.5){var d,p,g,y,v,m;(g=o-l)>=0&&(v=r(d=u.getPointAtLength(g)))<h?(i=d,o=g,h=v):(y=o+l)<=c&&(m=r(p=u.getPointAtLength(y)))<h?(i=p,o=y,h=m):l*=.5}return i={x:i.x,y:i.y,length:o,distance:Math.sqrt(h)},i},e.is=B,e.snapTo=function(t,n,e){if(e=B(e,"finite")?e:10,B(t,"array")){var r=t.length;while(r--)if(h(t[r]-n)<=e)return t[r]}else{t=+t;var i=n%t;if(i<e)return n-i;if(i>t-e)return n-i+t}return n},e.getRGB=N((function(t){if(!t||(t=o(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:R};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:R};if(!m[i](t.toLowerCase().substring(0,2))&&"#"!=t.charAt()&&(t=P(t)),!t)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:R};var n,r,h,f,d,p,g=t.match(y);return g?(g[2]&&(h=s(g[2].substring(5),16),r=s(g[2].substring(3,5),16),n=s(g[2].substring(1,3),16)),g[3]&&(h=s((d=g[3].charAt(3))+d,16),r=s((d=g[3].charAt(2))+d,16),n=s((d=g[3].charAt(1))+d,16)),g[4]&&(p=g[4].split(v),n=a(p[0]),"%"==p[0].slice(-1)&&(n*=2.55),r=a(p[1]),"%"==p[1].slice(-1)&&(r*=2.55),h=a(p[2]),"%"==p[2].slice(-1)&&(h*=2.55),"rgba"==g[1].toLowerCase().slice(0,4)&&(f=a(p[3])),p[3]&&"%"==p[3].slice(-1)&&(f/=100)),g[5]?(p=g[5].split(v),n=a(p[0]),"%"==p[0].slice(-1)&&(n/=100),r=a(p[1]),"%"==p[1].slice(-1)&&(r/=100),h=a(p[2]),"%"==p[2].slice(-1)&&(h/=100),("deg"==p[0].slice(-3)||"°"==p[0].slice(-1))&&(n/=360),"hsba"==g[1].toLowerCase().slice(0,4)&&(f=a(p[3])),p[3]&&"%"==p[3].slice(-1)&&(f/=100),e.hsb2rgb(n,r,h,f)):g[6]?(p=g[6].split(v),n=a(p[0]),"%"==p[0].slice(-1)&&(n/=100),r=a(p[1]),"%"==p[1].slice(-1)&&(r/=100),h=a(p[2]),"%"==p[2].slice(-1)&&(h/=100),("deg"==p[0].slice(-3)||"°"==p[0].slice(-1))&&(n/=360),"hsla"==g[1].toLowerCase().slice(0,4)&&(f=a(p[3])),p[3]&&"%"==p[3].slice(-1)&&(f/=100),e.hsl2rgb(n,r,h,f)):(n=l(u.round(n),255),r=l(u.round(r),255),h=l(u.round(h),255),f=l(c(f,0),1),g={r:n,g:r,b:h,toString:R},g.hex="#"+(16777216|h|r<<8|n<<16).toString(16).slice(1),g.opacity=B(f,"finite")?f:1,g)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:R}}),e),e.hsb=N((function(t,n,r){return e.hsb2rgb(t,n,r).hex})),e.hsl=N((function(t,n,r){return e.hsl2rgb(t,n,r).hex})),e.rgb=N((function(t,n,e,r){if(B(r,"finite")){var i=u.round;return"rgba("+[i(t),i(n),i(e),+r.toFixed(2)]+")"}return"#"+(16777216|e|n<<8|t<<16).toString(16).slice(1)}));var P=function(t){var n=r.doc.getElementsByTagName("head")[0]||r.doc.getElementsByTagName("svg")[0],e="rgb(255, 0, 0)";return P=N((function(t){if("red"==t.toLowerCase())return e;n.style.color=e,n.style.color=t;var i=r.doc.defaultView.getComputedStyle(n,d).getPropertyValue("color");return i==e?null:i})),P(t)},L=function(){return"hsb("+[this.h,this.s,this.b]+")"},I=function(){return"hsl("+[this.h,this.s,this.l]+")"},R=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},q=function(t,n,r){if(null==n&&B(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(r=t.b,n=t.g,t=t.r),null==n&&B(t,string)){var i=e.getRGB(t);t=i.r,n=i.g,r=i.b}return(t>1||n>1||r>1)&&(t/=255,n/=255,r/=255),[t,n,r]},G=function(t,n,r,i){t=u.round(255*t),n=u.round(255*n),r=u.round(255*r);var o={r:t,g:n,b:r,opacity:B(i,"finite")?i:1,hex:e.rgb(t,n,r),toString:R};return B(i,"finite")&&(o.opacity=i),o};e.color=function(t){var n;return B(t,"object")&&"h"in t&&"s"in t&&"b"in t?(n=e.hsb2rgb(t),t.r=n.r,t.g=n.g,t.b=n.b,t.opacity=1,t.hex=n.hex):B(t,"object")&&"h"in t&&"s"in t&&"l"in t?(n=e.hsl2rgb(t),t.r=n.r,t.g=n.g,t.b=n.b,t.opacity=1,t.hex=n.hex):(B(t,"string")&&(t=e.getRGB(t)),B(t,"object")&&"r"in t&&"g"in t&&"b"in t&&!("error"in t)?(n=e.rgb2hsl(t),t.h=n.h,t.s=n.s,t.l=n.l,n=e.rgb2hsb(t),t.v=n.b):(t={hex:"none"},t.r=t.g=t.b=t.h=t.s=t.v=t.l=-1,t.error=1)),t.toString=R,t},e.hsb2rgb=function(t,n,e,r){var i,o,a,s,u;return B(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(e=t.b,n=t.s,r=t.o,t=t.h),t*=360,t=t%360/60,u=e*n,s=u*(1-h(t%2-1)),i=o=a=e-u,t=~~t,i+=[u,s,0,0,s,u][t],o+=[s,u,u,s,0,0][t],a+=[0,0,s,u,u,s][t],G(i,o,a,r)},e.hsl2rgb=function(t,n,e,r){var i,o,a,s,u;return B(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(e=t.l,n=t.s,t=t.h),(t>1||n>1||e>1)&&(t/=360,n/=100,e/=100),t*=360,t=t%360/60,u=2*n*(e<.5?e:1-e),s=u*(1-h(t%2-1)),i=o=a=e-u/2,t=~~t,i+=[u,s,0,0,s,u][t],o+=[s,u,u,s,0,0][t],a+=[0,0,s,u,u,s][t],G(i,o,a,r)},e.rgb2hsb=function(t,n,e){var r,i,o,a;return e=q(t,n,e),t=e[0],n=e[1],e=e[2],o=c(t,n,e),a=o-l(t,n,e),r=0==a?null:o==t?(n-e)/a:o==n?(e-t)/a+2:(t-n)/a+4,r=(r+360)%6*60/360,i=0==a?0:a/o,{h:r,s:i,b:o,toString:L}},e.rgb2hsl=function(t,n,e){var r,i,o,a,s,u;return e=q(t,n,e),t=e[0],n=e[1],e=e[2],a=c(t,n,e),s=l(t,n,e),u=a-s,r=0==u?null:a==t?(n-e)/u:a==n?(e-t)/u+2:(t-n)/u+4,r=(r+360)%6*60/360,o=(a+s)/2,i=0==u?0:o<.5?u/(2*o):u/(2-2*o),{h:r,s:i,l:o,toString:I}},e.parsePathString=function(t){if(!t)return null;var n=e.path(t);if(n.arr)return e.path.clone(n.arr);var r={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},i=[];return B(t,"array")&&B(t[0],"array")&&(i=e.path.clone(t)),i.length||o(t).replace(x,(function(t,n,e){var o=[],a=n.toLowerCase();if(e.replace(w,(function(t,n){n&&o.push(+n)})),"m"==a&&o.length>2&&(i.push([n].concat(o.splice(0,2))),a="l",n="m"==n?"l":"L"),"o"==a&&1==o.length&&i.push([n,o[0]]),"r"==a)i.push([n].concat(o));else while(o.length>=r[a])if(i.push([n].concat(o.splice(0,r[a]))),!r[a])break})),i.toString=e.path.toString,n.arr=e.path.clone(i),i};var V=e.parseTransformString=function(t){if(!t)return null;var n=[];return B(t,"array")&&B(t[0],"array")&&(n=e.path.clone(t)),n.length||o(t).replace(b,(function(t,e,r){var i=[];e.toLowerCase();r.replace(w,(function(t,n){n&&i.push(+n)})),n.push([e].concat(i))})),n.toString=e.path.toString,n};function z(t){var n=[];return t=t.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,(function(t,e,r){return r=r.split(/\s*,\s*|\s+/),"rotate"==e&&1==r.length&&r.push(0,0),"scale"==e&&(r.length>2?r=r.slice(0,2):2==r.length&&r.push(0,0),1==r.length&&r.push(r[0],0,0)),"skewX"==e?n.push(["m",1,0,u.tan(M(r[0])),1,0,0]):"skewY"==e?n.push(["m",1,u.tan(M(r[0])),0,1,0,0]):n.push([e.charAt(0)].concat(r)),t})),n}function $(t,n){var r=V(t),i=new e.Matrix;if(r)for(var a=0,s=r.length;a<s;a++){var u,c,l,h,f,d=r[a],p=d.length,g=o(d[0]).toLowerCase(),y=d[0]!=g,v=y?i.invert():0;"t"==g&&2==p?i.translate(d[1],0):"t"==g&&3==p?y?(u=v.x(0,0),c=v.y(0,0),l=v.x(d[1],d[2]),h=v.y(d[1],d[2]),i.translate(l-u,h-c)):i.translate(d[1],d[2]):"r"==g?2==p?(f=f||n,i.rotate(d[1],f.x+f.width/2,f.y+f.height/2)):4==p&&(y?(l=v.x(d[2],d[3]),h=v.y(d[2],d[3]),i.rotate(d[1],l,h)):i.rotate(d[1],d[2],d[3])):"s"==g?2==p||3==p?(f=f||n,i.scale(d[1],d[p-1],f.x+f.width/2,f.y+f.height/2)):4==p?y?(l=v.x(d[2],d[3]),h=v.y(d[2],d[3]),i.scale(d[1],d[1],l,h)):i.scale(d[1],d[1],d[2],d[3]):5==p&&(y?(l=v.x(d[3],d[4]),h=v.y(d[3],d[4]),i.scale(d[1],d[2],l,h)):i.scale(d[1],d[2],d[3],d[4])):"m"==g&&7==p&&i.add(d[1],d[2],d[3],d[4],d[5],d[6])}return i}e._.svgTransform2string=z,e._.rgTransform=/^[a-z][\s]*-?\.?\d/i,e._.transform2matrix=$,e._unit2px=W;r.doc.contains||r.doc.compareDocumentPosition;function H(t){var n=t.node.ownerSVGElement&&Q(t.node.ownerSVGElement)||t.node.parentNode&&Q(t.node.parentNode)||e.select("svg")||e(0,0),r=n.select("defs"),i=null!=r&&r.node;return i||(i=J("defs",n.node).node),i}function U(t){return t.node.ownerSVGElement&&Q(t.node.ownerSVGElement)||e.select("svg")}function W(t,n,e){var r=U(t).node,i={},o=r.querySelector(".svg---mgr");function a(t){if(null==t)return d;if(t==+t)return t;C(o,{width:t});try{return o.getBBox().width}catch(n){return 0}}function s(t){if(null==t)return d;if(t==+t)return t;C(o,{height:t});try{return o.getBBox().height}catch(n){return 0}}function u(r,o){null==n?i[r]=o(t.attr(r)||0):r==n&&(i=o(null==e?t.attr(r)||0:e))}switch(o||(o=C("rect"),C(o,{x:-9e9,y:-9e9,width:10,height:10,class:"svg---mgr",fill:"none"}),r.appendChild(o)),t.type){case"rect":u("rx",a),u("ry",s);case"image":u("width",a),u("height",s);case"text":u("x",a),u("y",s);break;case"circle":u("cx",a),u("cy",s),u("r",a);break;case"ellipse":u("cx",a),u("cy",s),u("rx",a),u("ry",s);break;case"line":u("x1",a),u("x2",a),u("y1",s),u("y2",s);break;case"marker":u("refX",a),u("markerWidth",a),u("refY",s),u("markerHeight",s);break;case"radialGradient":u("fx",a),u("fy",s);break;case"tspan":u("dx",a),u("dy",s);break;default:u(n,a)}return r.removeChild(o),i}function X(t){B(t,"array")||(t=Array.prototype.slice.call(arguments,0));var n=0,e=0,r=this.node;while(this[n])delete this[n++];for(n=0;n<t.length;n++)"set"==t[n].type?t[n].forEach((function(t){r.appendChild(t.node)})):r.appendChild(t[n].node);var i=r.childNodes;for(n=0;n<i.length;n++)this[e++]=Q(i[n]);return this}function Y(t){if(t.snap in A)return A[t.snap];var n;try{n=t.ownerSVGElement}catch(o){}this.node=t,n&&(this.paper=new K(n)),this.type=t.tagName||t.nodeName;var e=this.id=E(this);if(this.anims={},this._={transform:[]},t.snap=e,A[e]=this,"g"==this.type&&(this.add=X),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var r in K.prototype)K.prototype[i](r)&&(this[r]=K.prototype[r])}function Z(t){this.node=t}function J(t,n){var e=C(t);n.appendChild(e);var r=Q(e);return r}function K(t,n){var e,o,a,s=K.prototype;if(t&&t.tagName&&"svg"==t.tagName.toLowerCase()){if(t.snap in A)return A[t.snap];var u=t.ownerDocument;for(var c in e=new Y(t),o=t.getElementsByTagName("desc")[0],a=t.getElementsByTagName("defs")[0],o||(o=C("desc"),o.appendChild(u.createTextNode("Created with Snap")),e.node.appendChild(o)),a||(a=C("defs"),e.node.appendChild(a)),e.defs=a,s)s[i](c)&&(e[c]=s[c]);e.paper=e.root=e}else e=J("svg",r.doc.body),C(e.node,{height:n,version:1.1,width:t,xmlns:k});return e}function Q(t){return t?t instanceof Y||t instanceof Z?t:t.tagName&&"svg"==t.tagName.toLowerCase()?new K(t):t.tagName&&"object"==t.tagName.toLowerCase()&&"image/svg+xml"==t.type?new K(t.contentDocument.getElementsByTagName("svg")[0]):new Y(t):t}function tt(t,n){for(var e=0,r=t.length;e<r;e++){var i={type:t[e].type,attr:t[e].attr()},o=t[e].children();n.push(i),o.length&&tt(o,i.childNodes=[])}}e._.getSomeDefs=H,e._.getSomeSVG=U,e.select=function(t){return t=o(t).replace(/([^\\]):/g,"$1\\:"),Q(r.doc.querySelector(t))},e.selectAll=function(t){for(var n=r.doc.querySelectorAll(t),i=(e.set||Array)(),o=0;o<n.length;o++)i.push(Q(n[o]));return i},setInterval((function(){for(var t in A)if(A[i](t)){var n=A[t],e=n.node;("svg"!=n.type&&!e.ownerSVGElement||"svg"==n.type&&(!e.parentNode||"ownerSVGElement"in e.parentNode&&!e.ownerSVGElement))&&delete A[t]}}),1e4),Y.prototype.attr=function(t,e){var r=this,o=r.node;if(!t){if(1!=o.nodeType)return{text:o.nodeValue};for(var a=o.attributes,s={},u=0,c=a.length;u<c;u++)s[a[u].nodeName]=a[u].nodeValue;return s}if(B(t,"string")){if(!(arguments.length>1))return n("snap.util.getattr."+t,r).firstDefined();var l={};l[t]=e,t=l}for(var h in t)t[i](h)&&n("snap.util.attr."+h,r,t[h]);return r},e.parse=function(t){var n=r.doc.createDocumentFragment(),e=!0,i=r.doc.createElement("div");if(t=o(t),t.match(/^\s*<\s*svg(?:\s|>)/)||(t="<svg>"+t+"</svg>",e=!1),i.innerHTML=t,t=i.getElementsByTagName("svg")[0],t)if(e)n=t;else while(t.firstChild)n.appendChild(t.firstChild);return new Z(n)},e.fragment=function(){for(var t=Array.prototype.slice.call(arguments,0),n=r.doc.createDocumentFragment(),i=0,o=t.length;i<o;i++){var a=t[i];a.node&&a.node.nodeType&&n.appendChild(a.node),a.nodeType&&n.appendChild(a),"string"==typeof a&&n.appendChild(e.parse(a).node)}return new Z(n)},e._.make=J,e._.wrap=Q,K.prototype.el=function(t,n){var e=J(t,this.node);return n&&e.attr(n),e},Y.prototype.children=function(){for(var t=[],n=this.node.childNodes,r=0,i=n.length;r<i;r++)t[r]=e(n[r]);return t},Y.prototype.toJSON=function(){var t=[];return tt([this],t),t[0]},n.on("snap.util.getattr",(function(){var t=n.nt();t=t.substring(t.lastIndexOf(".")+1);var e=t.replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}));return nt[i](e)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(e):C(this.node,t)}));var nt={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};n.on("snap.util.attr",(function(t){var e=n.nt(),r={};e=e.substring(e.lastIndexOf(".")+1),r[e]=t;var o=e.replace(/-(\w)/gi,(function(t,n){return n.toUpperCase()})),a=e.replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}));nt[i](a)?this.node.style[o]=null==t?d:t:C(this.node,r)})),K.prototype,e.ajax=function(t,e,r,i){var o=new XMLHttpRequest,a=E();if(o){if(B(e,"function"))i=r,r=e,e=null;else if(B(e,"object")){var s=[];for(var u in e)e.hasOwnProperty(u)&&s.push(encodeURIComponent(u)+"="+encodeURIComponent(e[u]));e=s.join("&")}return o.open(e?"POST":"GET",t,!0),e&&(o.setRequestHeader("X-Requested-With","XMLHttpRequest"),o.setRequestHeader("Content-type","application/x-www-form-urlencoded")),r&&(n.once("snap.ajax."+a+".0",r),n.once("snap.ajax."+a+".200",r),n.once("snap.ajax."+a+".304",r)),o.onreadystatechange=function(){4==o.readyState&&n("snap.ajax."+a+"."+o.status,i,o)},4==o.readyState?o:(o.send(e),o)}},e.load=function(t,n,r){e.ajax(t,(function(t){var i=e.parse(t.responseText);r?n.call(r,i):n(i)}))};var et=function(t){var n=t.getBoundingClientRect(),e=t.ownerDocument,r=e.body,i=e.documentElement,o=i.clientTop||r.clientTop||0,a=i.clientLeft||r.clientLeft||0,s=n.top+(g.win.pageYOffset||i.scrollTop||r.scrollTop)-o,u=n.left+(g.win.pageXOffset||i.scrollLeft||r.scrollLeft)-a;return{y:s,x:u}};return e.getElementByPoint=function(t,n){var e=this,i=(e.canvas,r.doc.elementFromPoint(t,n));if(r.win.opera&&"svg"==i.tagName){var o=et(i),a=i.createSVGRect();a.x=t-o.x,a.y=n-o.y,a.width=a.height=1;var s=i.getIntersectionList(a,null);s.length&&(i=s[s.length-1])}return i?Q(i):null},e.plugin=function(t){t(e,Y,K,r,Z)},r.win.Snap=e,e}(t||this);return r.plugin((function(e,r,i,o,a){var s=r.prototype,u=e.is,c=String,l=e._unit2px,h=e._.$,f=e._.make,d=e._.getSomeDefs,p="hasOwnProperty",g=e._.wrap;s.getBBox=function(t){if("tspan"==this.type)return e._.box(this.node.getClientRects().item(0));if(!e.Matrix||!e.path)return this.node.getBBox();var n=this,r=new e.Matrix;if(n.removed)return e._.box();while("use"==n.type)if(t||(r=r.add(n.transform().localMatrix.translate(n.attr("x")||0,n.attr("y")||0))),n.original)n=n.original;else{var i=n.attr("xlink:href");n=n.original=n.node.ownerDocument.getElementById(i.substring(i.indexOf("#")+1))}var o=n._,a=e.path.get[n.type]||e.path.get.deflt;try{return t?(o.bboxwt=a?e.path.getBBox(n.realPath=a(n)):e._.box(n.node.getBBox()),e._.box(o.bboxwt)):(n.realPath=a(n),n.matrix=n.transform().localMatrix,o.bbox=e.path.getBBox(e.path.map(n.realPath,r.add(n.matrix))),e._.box(o.bbox))}catch(s){return e._.box()}};var y=function(){return this.string};function v(t,n){if(null==n){var r=!0;if(n="linearGradient"==t.type||"radialGradient"==t.type?t.node.getAttribute("gradientTransform"):"pattern"==t.type?t.node.getAttribute("patternTransform"):t.node.getAttribute("transform"),!n)return new e.Matrix;n=e._.svgTransform2string(n)}else n=e._.rgTransform.test(n)?c(n).replace(/\.{3}|\u2026/g,t._.transform||""):e._.svgTransform2string(n),u(n,"array")&&(n=e.path?e.path.toString.call(n):c(n)),t._.transform=n;var i=e._.transform2matrix(n,t.getBBox(1));if(r)return i;t.matrix=i}function m(t){var n,r=t.selectAll("*"),i=/^\s*url\(("|'|)(.*)\1\)\s*$/,o=[],a={};function s(t,n){var r=h(t.node,n);r=r&&r.match(i),r=r&&r[2],r&&"#"==r.charAt()&&(r=r.substring(1),r&&(a[r]=(a[r]||[]).concat((function(r){var i={};i[n]=e.url(r),h(t.node,i)}))))}function u(t){var n=h(t.node,"xlink:href");n&&"#"==n.charAt()&&(n=n.substring(1),n&&(a[n]=(a[n]||[]).concat((function(n){t.attr("xlink:href","#"+n)}))))}for(var c=0,l=r.length;c<l;c++){n=r[c],s(n,"fill"),s(n,"stroke"),s(n,"filter"),s(n,"mask"),s(n,"clip-path"),u(n);var f=h(n.node,"id");f&&(h(n.node,{id:n.id}),o.push({old:f,id:n.id}))}for(c=0,l=o.length;c<l;c++){var d=a[o[c].old];if(d)for(var p=0,g=d.length;p<g;p++)d[p](o[c].id)}}s.transform=function(t){var n=this._;if(null==t){var r,i=this,o=new e.Matrix(this.node.getCTM()),a=v(this),s=[a],u=new e.Matrix,l=a.toTransformString(),f=c(a)==c(this.matrix)?c(n.transform):l;while("svg"!=i.type&&(i=i.parent()))s.push(v(i));r=s.length;while(r--)u.add(s[r]);return{string:f,globalMatrix:o,totalMatrix:u,localMatrix:a,diffMatrix:o.clone().add(a.invert()),global:o.toTransformString(),total:u.toTransformString(),local:l,toString:y}}return t instanceof e.Matrix?(this.matrix=t,this._.transform=t.toTransformString()):v(this,t),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?h(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?h(this.node,{patternTransform:this.matrix}):h(this.node,{transform:this.matrix})),this},s.parent=function(){return g(this.node.parentNode)},s.append=s.add=function(t){if(t){if("set"==t.type){var n=this;return t.forEach((function(t){n.add(t)})),this}t=g(t),this.node.appendChild(t.node),t.paper=this.paper}return this},s.appendTo=function(t){return t&&(t=g(t),t.append(this)),this},s.prepend=function(t){if(t){if("set"==t.type){var n,e=this;return t.forEach((function(t){n?n.after(t):e.prepend(t),n=t})),this}t=g(t);var r=t.parent();this.node.insertBefore(t.node,this.node.firstChild),this.add&&this.add(),t.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},s.prependTo=function(t){return t=g(t),t.prepend(this),this},s.before=function(t){if("set"==t.type){var n=this;return t.forEach((function(t){var e=t.parent();n.node.parentNode.insertBefore(t.node,n.node),e&&e.add()})),this.parent().add(),this}t=g(t);var e=t.parent();return this.node.parentNode.insertBefore(t.node,this.node),this.parent()&&this.parent().add(),e&&e.add(),t.paper=this.paper,this},s.after=function(t){t=g(t);var n=t.parent();return this.node.nextSibling?this.node.parentNode.insertBefore(t.node,this.node.nextSibling):this.node.parentNode.appendChild(t.node),this.parent()&&this.parent().add(),n&&n.add(),t.paper=this.paper,this},s.insertBefore=function(t){t=g(t);var n=this.parent();return t.node.parentNode.insertBefore(this.node,t.node),this.paper=t.paper,n&&n.add(),t.parent()&&t.parent().add(),this},s.insertAfter=function(t){t=g(t);var n=this.parent();return t.node.parentNode.insertBefore(this.node,t.node.nextSibling),this.paper=t.paper,n&&n.add(),t.parent()&&t.parent().add(),this},s.remove=function(){var t=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,t&&t.add(),this},s.select=function(t){return g(this.node.querySelector(t))},s.selectAll=function(t){for(var n=this.node.querySelectorAll(t),r=(e.set||Array)(),i=0;i<n.length;i++)r.push(g(n[i]));return r},s.asPX=function(t,n){return null==n&&(n=this.attr(t)),+l(this,t,n)},s.use=function(){var t,n=this.node.id;return n||(n=this.id,h(this.node,{id:n})),t="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?f(this.type,this.node.parentNode):f("use",this.node.parentNode),h(t.node,{"xlink:href":"#"+n}),t.original=this,t},s.clone=function(){var t=g(this.node.cloneNode(!0));return h(t.node,"id")&&h(t.node,{id:t.id}),m(t),t.insertAfter(this),t},s.toDefs=function(){var t=d(this);return t.appendChild(this.node),this},s.pattern=s.toPattern=function(t,n,e,r){var i=f("pattern",d(this));return null==t&&(t=this.getBBox()),u(t,"object")&&"x"in t&&(n=t.y,e=t.width,r=t.height,t=t.x),h(i.node,{x:t,y:n,width:e,height:r,patternUnits:"userSpaceOnUse",id:i.id,viewBox:[t,n,e,r].join(" ")}),i.node.appendChild(this.node),i},s.marker=function(t,n,e,r,i,o){var a=f("marker",d(this));return null==t&&(t=this.getBBox()),u(t,"object")&&"x"in t&&(n=t.y,e=t.width,r=t.height,i=t.refX||t.cx,o=t.refY||t.cy,t=t.x),h(a.node,{viewBox:[t,n,e,r].join(" "),markerWidth:e,markerHeight:r,orient:"auto",refX:i||0,refY:o||0,id:a.id}),a.node.appendChild(this.node),a};var x={};function b(t){return function(){var n=t?"<"+this.type:"",e=this.node.attributes,r=this.node.childNodes;if(t)for(var i=0,o=e.length;i<o;i++)n+=" "+e[i].name+'="'+e[i].value.replace(/"/g,'\\"')+'"';if(r.length){for(t&&(n+=">"),i=0,o=r.length;i<o;i++)3==r[i].nodeType?n+=r[i].nodeValue:1==r[i].nodeType&&(n+=g(r[i]).toString());t&&(n+="</"+this.type+">")}else t&&(n+="/>");return n}}s.data=function(t,r){var i=x[this.id]=x[this.id]||{};if(0==arguments.length)return n("snap.data.get."+this.id,this,i,null),i;if(1==arguments.length){if(e.is(t,"object")){for(var o in t)t[p](o)&&this.data(o,t[o]);return this}return n("snap.data.get."+this.id,this,i[t],t),i[t]}return i[t]=r,n("snap.data.set."+this.id,this,r,t),this},s.removeData=function(t){return null==t?x[this.id]={}:x[this.id]&&delete x[this.id][t],this},s.outerSVG=s.toString=b(1),s.innerSVG=b(),s.toDataURL=function(){if(t&&t.btoa){var n=this.getBBox(),r=e.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+n.x.toFixed(3),y:+n.y.toFixed(3),width:+n.width.toFixed(3),height:+n.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(r)))}},a.prototype.select=s.select,a.prototype.selectAll=s.selectAll})),r.plugin((function(t,r,i,o,a){var s=r.prototype,u=t.is,c=String,l="hasOwnProperty";function h(t,n,e){return function(r){var i=r.slice(t,n);return 1==i.length&&(i=i[0]),e?e(i):i}}var f=function(t,n,r,i){"function"!=typeof r||r.length||(i=r,r=e.linear),this.attr=t,this.dur=n,r&&(this.easing=r),i&&(this.callback=i)};t._.Animation=f,t.animation=function(t,n,e,r){return new f(t,n,e,r)},s.inAnim=function(){var t=this,n=[];for(var e in t.anims)t.anims[l](e)&&function(t){n.push({anim:new f(t._attrs,t.dur,t.easing,t._callback),mina:t,curStatus:t.status(),status:function(n){return t.status(n)},stop:function(){t.stop()}})}(t.anims[e]);return n},t.animate=function(t,r,i,o,a,s){"function"!=typeof a||a.length||(s=a,a=e.linear);var u=e.time(),c=e(t,r,u,u+o,e.time,i,a);return s&&n.once("mina.finish."+c.id,s),c},s.stop=function(){for(var t=this.inAnim(),n=0,e=t.length;n<e;n++)t[n].stop();return this},s.animate=function(t,r,i,o){"function"!=typeof i||i.length||(o=i,i=e.linear),t instanceof f&&(o=t.callback,i=t.easing,r=t.dur,t=t.attr);var a,s,d,p,g=[],y=[],v={},m=this;for(var x in t)if(t[l](x)){m.equal?(p=m.equal(x,c(t[x])),a=p.from,s=p.to,d=p.f):(a=+m.attr(x),s=+t[x]);var b=u(a,"array")?a.length:1;v[x]=h(g.length,g.length+b,d),g=g.concat(a),y=y.concat(s)}var w=e.time(),F=e(g,y,w,w+r,e.time,(function(t){var n={};for(var e in v)v[l](e)&&(n[e]=v[e](t));m.attr(n)}),i);return m.anims[F.id]=F,F._attrs=t,F._callback=o,n("snap.animcreated."+m.id,F),n.once("mina.finish."+F.id,(function(){n.off("mina.*."+F.id),delete m.anims[F.id],o&&o.call(m)})),n.once("mina.stop."+F.id,(function(){n.off("mina.*."+F.id),delete m.anims[F.id]})),m}})),r.plugin((function(t,n,e,r,i){var o=Object.prototype.toString,a=String,s=Math,u="";function c(t,n,e,r,i,a){if(null==n&&"[object SVGMatrix]"==o.call(t))return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.e=t.e,void(this.f=t.f);null!=t?(this.a=+t,this.b=+n,this.c=+e,this.d=+r,this.e=+i,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}(function(n){function e(t){return t[0]*t[0]+t[1]*t[1]}function r(t){var n=s.sqrt(e(t));t[0]&&(t[0]/=n),t[1]&&(t[1]/=n)}n.add=function(t,n,e,r,i,o){if(t&&t instanceof c)return this.add(t.a,t.b,t.c,t.d,t.e,t.f);var a=t*this.a+n*this.c,s=t*this.b+n*this.d;return this.e+=i*this.a+o*this.c,this.f+=i*this.b+o*this.d,this.c=e*this.a+r*this.c,this.d=e*this.b+r*this.d,this.a=a,this.b=s,this},c.prototype.multLeft=function(t,n,e,r,i,o){if(t&&t instanceof c)return this.multLeft(t.a,t.b,t.c,t.d,t.e,t.f);var a=t*this.a+e*this.b,s=t*this.c+e*this.d,u=t*this.e+e*this.f+i;return this.b=n*this.a+r*this.b,this.d=n*this.c+r*this.d,this.f=n*this.e+r*this.f+o,this.a=a,this.c=s,this.e=u,this},n.invert=function(){var t=this,n=t.a*t.d-t.b*t.c;return new c(t.d/n,-t.b/n,-t.c/n,t.a/n,(t.c*t.f-t.d*t.e)/n,(t.b*t.e-t.a*t.f)/n)},n.clone=function(){return new c(this.a,this.b,this.c,this.d,this.e,this.f)},n.translate=function(t,n){return this.e+=t*this.a+n*this.c,this.f+=t*this.b+n*this.d,this},n.scale=function(t,n,e,r){return null==n&&(n=t),(e||r)&&this.translate(e,r),this.a*=t,this.b*=t,this.c*=n,this.d*=n,(e||r)&&this.translate(-e,-r),this},n.rotate=function(n,e,r){n=t.rad(n),e=e||0,r=r||0;var i=+s.cos(n).toFixed(9),o=+s.sin(n).toFixed(9);return this.add(i,o,-o,i,e,r),this.add(1,0,0,1,-e,-r)},n.skewX=function(t){return this.skew(t,0)},n.skewY=function(t){return this.skew(0,t)},n.skew=function(n,e){n=n||0,e=e||0,n=t.rad(n),e=t.rad(e);var r=s.tan(n).toFixed(9),i=s.tan(e).toFixed(9);return this.add(1,i,r,1,0,0)},n.x=function(t,n){return t*this.a+n*this.c+this.e},n.y=function(t,n){return t*this.b+n*this.d+this.f},n.get=function(t){return+this[a.fromCharCode(97+t)].toFixed(4)},n.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},n.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},n.determinant=function(){return this.a*this.d-this.b*this.c},n.split=function(){var n={};n.dx=this.e,n.dy=this.f;var i=[[this.a,this.b],[this.c,this.d]];n.scalex=s.sqrt(e(i[0])),r(i[0]),n.shear=i[0][0]*i[1][0]+i[0][1]*i[1][1],i[1]=[i[1][0]-i[0][0]*n.shear,i[1][1]-i[0][1]*n.shear],n.scaley=s.sqrt(e(i[1])),r(i[1]),n.shear/=n.scaley,this.determinant()<0&&(n.scalex=-n.scalex);var o=i[0][1],a=i[1][1];return a<0?(n.rotate=t.deg(s.acos(a)),o<0&&(n.rotate=360-n.rotate)):n.rotate=t.deg(s.asin(o)),n.isSimple=!+n.shear.toFixed(9)&&(n.scalex.toFixed(9)==n.scaley.toFixed(9)||!n.rotate),n.isSuperSimple=!+n.shear.toFixed(9)&&n.scalex.toFixed(9)==n.scaley.toFixed(9)&&!n.rotate,n.noRotation=!+n.shear.toFixed(9)&&!n.rotate,n},n.toTransformString=function(t){var n=t||this.split();return+n.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(n.scalex=+n.scalex.toFixed(4),n.scaley=+n.scaley.toFixed(4),n.rotate=+n.rotate.toFixed(4),(n.dx||n.dy?"t"+[+n.dx.toFixed(4),+n.dy.toFixed(4)]:u)+(n.rotate?"r"+[+n.rotate.toFixed(4),0,0]:u)+(1!=n.scalex||1!=n.scaley?"s"+[n.scalex,n.scaley,0,0]:u))}})(c.prototype),t.Matrix=c,t.matrix=function(t,n,e,r,i,o){return new c(t,n,e,r,i,o)}})),r.plugin((function(t,e,r,i,o){var a=t._.make,s=t._.wrap,u=t.is,c=t._.getSomeDefs,l=/^url\((['"]?)([^)]+)\1\)$/,h=t._.$,f=t.url,d=String,p=t._.separator,g="";function y(r){return function(i){if(n.stop(),i instanceof o&&1==i.node.childNodes.length&&("radialGradient"==i.node.firstChild.tagName||"linearGradient"==i.node.firstChild.tagName||"pattern"==i.node.firstChild.tagName)&&(i=i.node.firstChild,c(this).appendChild(i),i=s(i)),i instanceof e)if("radialGradient"==i.type||"linearGradient"==i.type||"pattern"==i.type){i.node.id||h(i.node,{id:i.id});var a=f(i.node.id)}else a=i.attr(r);else if(a=t.color(i),a.error){var u=t(c(this).ownerSVGElement).gradient(i);u?(u.node.id||h(u.node,{id:u.id}),a=f(u.node.id)):a=i}else a=d(a);var l={};l[r]=a,h(this.node,l),this.node.style[r]=g}}t.deurl=function(t){var n=String(t).match(l);return n?n[2]:t},n.on("snap.util.attr.mask",(function(t){if(t instanceof e||t instanceof o){if(n.stop(),t instanceof o&&1==t.node.childNodes.length&&(t=t.node.firstChild,c(this).appendChild(t),t=s(t)),"mask"==t.type)var r=t;else r=a("mask",c(this)),r.node.appendChild(t.node);!r.node.id&&h(r.node,{id:r.id}),h(this.node,{mask:f(r.id)})}})),function(t){n.on("snap.util.attr.clip",t),n.on("snap.util.attr.clip-path",t),n.on("snap.util.attr.clipPath",t)}((function(t){if(t instanceof e||t instanceof o){n.stop();var r,i=t.node;while(i){if("clipPath"===i.nodeName){r=new e(i);break}if("svg"===i.nodeName){r=void 0;break}i=i.parentNode}r||(r=a("clipPath",c(this)),r.node.appendChild(t.node),!r.node.id&&h(r.node,{id:r.id})),h(this.node,{"clip-path":f(r.node.id||r.id)})}})),n.on("snap.util.attr.fill",y("fill")),n.on("snap.util.attr.stroke",y("stroke"));var v=/^([lr])(?:\(([^)]*)\))?(.*)$/i;function m(t){n.stop(),t==+t&&(t+="px"),this.node.style.fontSize=t}function x(t){for(var n=[],e=t.childNodes,r=0,i=e.length;r<i;r++){var o=e[r];3==o.nodeType&&n.push(o.nodeValue),"tspan"==o.tagName&&(1==o.childNodes.length&&3==o.firstChild.nodeType?n.push(o.firstChild.nodeValue):n.push(x(o)))}return n}function b(){return n.stop(),this.node.style.fontSize}n.on("snap.util.grad.parse",(function(t){t=d(t);var n=t.match(v);if(!n)return null;var e=n[1],r=n[2],i=n[3];r=r.split(/\s*,\s*/).map((function(t){return+t==t?+t:t})),1==r.length&&0==r[0]&&(r=[]),i=i.split("-"),i=i.map((function(t){t=t.split(":");var n={color:t[0]};return t[1]&&(n.offset=parseFloat(t[1])),n}));var o=i.length,a=0,s=0;function u(t,n){for(var e=(n-a)/(t-s),r=s;r<t;r++)i[r].offset=+(+a+e*(r-s)).toFixed(2);s=t,a=n}o--;for(var c=0;c<o;c++)"offset"in i[c]&&u(c,i[c].offset);return i[o].offset=i[o].offset||100,u(o,i[o].offset),{type:e,params:r,stops:i}})),n.on("snap.util.attr.d",(function(e){n.stop(),u(e,"array")&&u(e[0],"array")&&(e=t.path.toString.call(e)),e=d(e),e.match(/[ruo]/i)&&(e=t.path.toAbsolute(e)),h(this.node,{d:e})}))(-1),n.on("snap.util.attr.#text",(function(t){n.stop(),t=d(t);var e=i.doc.createTextNode(t);while(this.node.firstChild)this.node.removeChild(this.node.firstChild);this.node.appendChild(e)}))(-1),n.on("snap.util.attr.path",(function(t){n.stop(),this.attr({d:t})}))(-1),n.on("snap.util.attr.class",(function(t){n.stop(),this.node.className.baseVal=t}))(-1),n.on("snap.util.attr.viewBox",(function(t){var e;e=u(t,"object")&&"x"in t?[t.x,t.y,t.width,t.height].join(" "):u(t,"array")?t.join(" "):t,h(this.node,{viewBox:e}),n.stop()}))(-1),n.on("snap.util.attr.transform",(function(t){this.transform(t),n.stop()}))(-1),n.on("snap.util.attr.r",(function(t){"rect"==this.type&&(n.stop(),h(this.node,{rx:t,ry:t}))}))(-1),n.on("snap.util.attr.textpath",(function(t){if(n.stop(),"text"==this.type){var r,i,o;if(!t&&this.textPath){i=this.textPath;while(i.node.firstChild)this.node.appendChild(i.node.firstChild);return i.remove(),void delete this.textPath}if(u(t,"string")){var a=c(this),l=s(a.parentNode).path(t);a.appendChild(l.node),r=l.id,l.attr({id:r})}else t=s(t),t instanceof e&&(r=t.attr("id"),r||(r=t.id,t.attr({id:r})));if(r)if(i=this.textPath,o=this.node,i)i.attr({"xlink:href":"#"+r});else{i=h("textPath",{"xlink:href":"#"+r});while(o.firstChild)i.appendChild(o.firstChild);o.appendChild(i),this.textPath=s(i)}}}))(-1),n.on("snap.util.attr.text",(function(t){if("text"==this.type){var e=this.node,r=function(t){var n=h("tspan");if(u(t,"array"))for(var e=0;e<t.length;e++)n.appendChild(r(t[e]));else n.appendChild(i.doc.createTextNode(t));return n.normalize&&n.normalize(),n};while(e.firstChild)e.removeChild(e.firstChild);var o=r(t);while(o.firstChild)e.appendChild(o.firstChild)}n.stop()}))(-1),n.on("snap.util.attr.fontSize",m)(-1),n.on("snap.util.attr.font-size",m)(-1),n.on("snap.util.getattr.transform",(function(){return n.stop(),this.transform()}))(-1),n.on("snap.util.getattr.textpath",(function(){return n.stop(),this.textPath}))(-1),function(){function e(e){return function(){n.stop();var r=i.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+e);return"none"==r?r:t(i.doc.getElementById(r.match(l)[1]))}}function r(t){return function(e){n.stop();var r="marker"+t.charAt(0).toUpperCase()+t.substring(1);if(""!=e&&e){if("marker"==e.type){var i=e.node.id;return i||h(e.node,{id:e.id}),void(this.node.style[r]=f(i))}}else this.node.style[r]="none"}}n.on("snap.util.getattr.marker-end",e("end"))(-1),n.on("snap.util.getattr.markerEnd",e("end"))(-1),n.on("snap.util.getattr.marker-start",e("start"))(-1),n.on("snap.util.getattr.markerStart",e("start"))(-1),n.on("snap.util.getattr.marker-mid",e("mid"))(-1),n.on("snap.util.getattr.markerMid",e("mid"))(-1),n.on("snap.util.attr.marker-end",r("end"))(-1),n.on("snap.util.attr.markerEnd",r("end"))(-1),n.on("snap.util.attr.marker-start",r("start"))(-1),n.on("snap.util.attr.markerStart",r("start"))(-1),n.on("snap.util.attr.marker-mid",r("mid"))(-1),n.on("snap.util.attr.markerMid",r("mid"))(-1)}(),n.on("snap.util.getattr.r",(function(){if("rect"==this.type&&h(this.node,"rx")==h(this.node,"ry"))return n.stop(),h(this.node,"rx")}))(-1),n.on("snap.util.getattr.text",(function(){if("text"==this.type||"tspan"==this.type){n.stop();var t=x(this.node);return 1==t.length?t[0]:t}}))(-1),n.on("snap.util.getattr.#text",(function(){return this.node.textContent}))(-1),n.on("snap.util.getattr.fill",(function(e){if(!e){n.stop();var r=n("snap.util.getattr.fill",this,!0).firstDefined();return t(t.deurl(r))||r}}))(-1),n.on("snap.util.getattr.stroke",(function(e){if(!e){n.stop();var r=n("snap.util.getattr.stroke",this,!0).firstDefined();return t(t.deurl(r))||r}}))(-1),n.on("snap.util.getattr.viewBox",(function(){n.stop();var e=h(this.node,"viewBox");return e?(e=e.split(p),t._.box(+e[0],+e[1],+e[2],+e[3])):void 0}))(-1),n.on("snap.util.getattr.points",(function(){var t=h(this.node,"points");return n.stop(),t?t.split(p):void 0}))(-1),n.on("snap.util.getattr.path",(function(){var t=h(this.node,"d");return n.stop(),t}))(-1),n.on("snap.util.getattr.class",(function(){return this.node.className.baseVal}))(-1),n.on("snap.util.getattr.fontSize",b)(-1),n.on("snap.util.getattr.font-size",b)(-1)})),r.plugin((function(t,n,e,r,i){var o=/\S+/g,a=String,s=n.prototype;s.addClass=function(t){var n,e,r,i,s=a(t||"").match(o)||[],u=this.node,c=u.className.baseVal,l=c.match(o)||[];if(s.length){n=0;while(r=s[n++])e=l.indexOf(r),~e||l.push(r);i=l.join(" "),c!=i&&(u.className.baseVal=i)}return this},s.removeClass=function(t){var n,e,r,i,s=a(t||"").match(o)||[],u=this.node,c=u.className.baseVal,l=c.match(o)||[];if(l.length){n=0;while(r=s[n++])e=l.indexOf(r),~e&&l.splice(e,1);i=l.join(" "),c!=i&&(u.className.baseVal=i)}return this},s.hasClass=function(t){var n=this.node,e=n.className.baseVal,r=e.match(o)||[];return!!~r.indexOf(t)},s.toggleClass=function(t,n){if(null!=n)return n?this.addClass(t):this.removeClass(t);var e,r,i,a,s=(t||"").match(o)||[],u=this.node,c=u.className.baseVal,l=c.match(o)||[];e=0;while(i=s[e++])r=l.indexOf(i),~r?l.splice(r,1):l.push(i);return a=l.join(" "),c!=a&&(u.className.baseVal=a),this}})),r.plugin((function(t,e,r,i,o){var a={"+":function(t,n){return t+n},"-":function(t,n){return t-n},"/":function(t,n){return t/n},"*":function(t,n){return t*n}},s=String,u=/[a-z]+$/i,c=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;function l(t){return t}function h(t){return function(n){return+n.toFixed(3)+t}}n.on("snap.util.attr",(function(t){var e=s(t).match(c);if(e){var r=n.nt(),i=r.substring(r.lastIndexOf(".")+1),o=this.attr(i),l={};n.stop();var h=e[3]||"",f=o.match(u),d=a[e[1]];if(f&&f==h?t=d(parseFloat(o),+e[2]):(o=this.asPX(i),t=d(this.asPX(i),this.asPX(i,e[2]+h))),isNaN(o)||isNaN(t))return;l[i]=t,this.attr(l)}}))(-10),n.on("snap.util.equal",(function(t,e){var r=s(this.attr(t)||""),i=s(e).match(c);if(i){n.stop();var o=i[3]||"",f=r.match(u),d=a[i[1]];return f&&f==o?{from:parseFloat(r),to:d(parseFloat(r),+i[2]),f:h(f)}:(r=this.asPX(t),{from:r,to:d(r,this.asPX(t,i[2]+o)),f:l})}}))(-10)})),r.plugin((function(e,r,i,o,a){var s=i.prototype,u=e.is;s.rect=function(t,n,e,r,i,o){var a;return null==o&&(o=i),u(t,"object")&&"[object Object]"==t?a=t:null!=t&&(a={x:t,y:n,width:e,height:r},null!=i&&(a.rx=i,a.ry=o)),this.el("rect",a)},s.circle=function(t,n,e){var r;return u(t,"object")&&"[object Object]"==t?r=t:null!=t&&(r={cx:t,cy:n,r:e}),this.el("circle",r)};var c=function(){function t(){this.parentNode.removeChild(this)}return function(n,e){var r=o.doc.createElement("img"),i=o.doc.body;r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){e.call(r),r.onload=r.onerror=null,i.removeChild(r)},r.onerror=t,i.appendChild(r),r.src=n}}();s.image=function(t,n,r,i,o){var a=this.el("image");if(u(t,"object")&&"src"in t)a.attr(t);else if(null!=t){var s={"xlink:href":t,preserveAspectRatio:"none"};null!=n&&null!=r&&(s.x=n,s.y=r),null!=i&&null!=o?(s.width=i,s.height=o):c(t,(function(){e._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})})),e._.$(a.node,s)}return a},s.ellipse=function(t,n,e,r){var i;return u(t,"object")&&"[object Object]"==t?i=t:null!=t&&(i={cx:t,cy:n,rx:e,ry:r}),this.el("ellipse",i)},s.path=function(t){var n;return u(t,"object")&&!u(t,"array")?n=t:t&&(n={d:t}),this.el("path",n)},s.group=s.g=function(t){var n=this.el("g");return 1==arguments.length&&t&&!t.type?n.attr(t):arguments.length&&n.add(Array.prototype.slice.call(arguments,0)),n},s.svg=function(t,n,e,r,i,o,a,s){var c={};return u(t,"object")&&null==n?c=t:(null!=t&&(c.x=t),null!=n&&(c.y=n),null!=e&&(c.width=e),null!=r&&(c.height=r),null!=i&&null!=o&&null!=a&&null!=s&&(c.viewBox=[i,o,a,s])),this.el("svg",c)},s.mask=function(t){var n=this.el("mask");return 1==arguments.length&&t&&!t.type?n.attr(t):arguments.length&&n.add(Array.prototype.slice.call(arguments,0)),n},s.ptrn=function(t,n,e,r,i,o,a,s){if(u(t,"object"))var c=t;else c={patternUnits:"userSpaceOnUse"},t&&(c.x=t),n&&(c.y=n),null!=e&&(c.width=e),null!=r&&(c.height=r),c.viewBox=null!=i&&null!=o&&null!=a&&null!=s?[i,o,a,s]:[t||0,n||0,e||0,r||0];return this.el("pattern",c)},s.use=function(t){return null!=t?(t instanceof r&&(t.attr("id")||t.attr({id:e._.id(t)}),t=t.attr("id")),"#"==String(t).charAt()&&(t=t.substring(1)),this.el("use",{"xlink:href":"#"+t})):r.prototype.use.call(this)},s.symbol=function(t,n,e,r){var i={};return null!=t&&null!=n&&null!=e&&null!=r&&(i.viewBox=[t,n,e,r]),this.el("symbol",i)},s.text=function(t,n,e){var r={};return u(t,"object")?r=t:null!=t&&(r={x:t,y:n,text:e||""}),this.el("text",r)},s.line=function(t,n,e,r){var i={};return u(t,"object")?i=t:null!=t&&(i={x1:t,x2:e,y1:n,y2:r}),this.el("line",i)},s.polyline=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var n={};return u(t,"object")&&!u(t,"array")?n=t:null!=t&&(n={points:t}),this.el("polyline",n)},s.polygon=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var n={};return u(t,"object")&&!u(t,"array")?n=t:null!=t&&(n={points:t}),this.el("polygon",n)},function(){var r=e._.$;function i(){return this.selectAll("stop")}function o(t,n){var i=r("stop"),o={offset:+n+"%"};t=e.color(t),o["stop-color"]=t.hex,t.opacity<1&&(o["stop-opacity"]=t.opacity),r(i,o);for(var a,s=this.stops(),u=0;u<s.length;u++){var c=parseFloat(s[u].attr("offset"));if(c>n){this.node.insertBefore(i,s[u].node),a=!0;break}}return a||this.node.appendChild(i),this}function a(){if("linearGradient"==this.type){var t=r(this.node,"x1")||0,n=r(this.node,"x2")||1,i=r(this.node,"y1")||0,o=r(this.node,"y2")||0;return e._.box(t,i,math.abs(n-t),math.abs(o-i))}var a=this.node.cx||.5,s=this.node.cy||.5,u=this.node.r||0;return e._.box(a-u,s-u,2*u,2*u)}function u(t){var r=t,i=this.stops();if("string"==typeof t&&(r=n("snap.util.grad.parse",null,"l(0,0,0,1)"+t).firstDefined().stops),e.is(r,"array")){for(var o=0;o<i.length;o++)if(r[o]){var a=e.color(r[o].color),s={offset:r[o].offset+"%"};s["stop-color"]=a.hex,a.opacity<1&&(s["stop-opacity"]=a.opacity),i[o].attr(s)}else i[o].remove();for(o=i.length;o<r.length;o++)this.addStop(r[o].color,r[o].offset);return this}}function c(t,e){var i,o=n("snap.util.grad.parse",null,e).firstDefined();if(!o)return null;o.params.unshift(t),i="l"==o.type.toLowerCase()?l.apply(0,o.params):h.apply(0,o.params),o.type!=o.type.toLowerCase()&&r(i.node,{gradientUnits:"userSpaceOnUse"});for(var a=o.stops,s=a.length,u=0;u<s;u++){var c=a[u];i.addStop(c.color,c.offset)}return i}function l(t,n,s,c,l){var h=e._.make("linearGradient",t);return h.stops=i,h.addStop=o,h.getBBox=a,h.setStops=u,null!=n&&r(h.node,{x1:n,y1:s,x2:c,y2:l}),h}function h(t,n,s,u,c,l){var h=e._.make("radialGradient",t);return h.stops=i,h.addStop=o,h.getBBox=a,null!=n&&r(h.node,{cx:n,cy:s,r:u}),null!=c&&null!=l&&r(h.node,{fx:c,fy:l}),h}s.gradient=function(t){return c(this.defs,t)},s.gradientLinear=function(t,n,e,r){return l(this.defs,t,n,e,r)},s.gradientRadial=function(t,n,e,r,i){return h(this.defs,t,n,e,r,i)},s.toString=function(){var t,n=this.node.ownerDocument,r=n.createDocumentFragment(),i=n.createElement("div"),o=this.node.cloneNode(!0);return r.appendChild(i),i.appendChild(o),e._.$(o,{xmlns:"http://www.w3.org/2000/svg"}),t=i.innerHTML,r.removeChild(r.firstChild),t},s.toDataURL=function(){if(t&&t.btoa)return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this)))},s.clear=function(){var t,n=this.node.firstChild;while(n)t=n.nextSibling,"defs"!=n.tagName?n.parentNode.removeChild(n):s.clear.call({node:n}),n=t}}()})),r.plugin((function(t,n,e,r){var i=n.prototype,o=t.is,a=t._.clone,s="hasOwnProperty",u=/,?([a-z]),?/gi,c=parseFloat,l=Math,h=l.PI,f=l.min,d=l.max,p=l.pow,g=l.abs;function y(t){var n=y.ps=y.ps||{};return n[t]?n[t].sleep=100:n[t]={sleep:100},setTimeout((function(){for(var e in n)n[s](e)&&e!=t&&(n[e].sleep--,!n[e].sleep&&delete n[e])})),n[t]}function v(t,n,e,r){return null==t&&(t=n=e=r=0),null==n&&(n=t.y,e=t.width,r=t.height,t=t.x),{x:t,y:n,width:e,w:e,height:r,h:r,x2:t+e,y2:n+r,cx:t+e/2,cy:n+r/2,r1:l.min(e,r)/2,r2:l.max(e,r)/2,r0:l.sqrt(e*e+r*r)/2,path:R(t,n,e,r),vb:[t,n,e,r].join(" ")}}function m(){return this.join(",").replace(u,"$1")}function x(t){var n=a(t);return n.toString=m,n}function b(t,n,e,r,i,o,a,s,u){return null==u?T(t,n,e,r,i,o,a,s):S(t,n,e,r,i,o,a,s,j(t,n,e,r,i,o,a,s,u))}function w(e,r){function i(t){return+(+t).toFixed(3)}return t._.cacher((function(t,o,a){t instanceof n&&(t=t.attr("d")),t=Y(t);for(var s,u,c,l,h,f="",d={},p=0,g=0,y=t.length;g<y;g++){if(c=t[g],"M"==c[0])s=+c[1],u=+c[2];else{if(l=b(s,u,c[1],c[2],c[3],c[4],c[5],c[6]),p+l>o){if(r&&!d.start){if(h=b(s,u,c[1],c[2],c[3],c[4],c[5],c[6],o-p),f+=["C"+i(h.start.x),i(h.start.y),i(h.m.x),i(h.m.y),i(h.x),i(h.y)],a)return f;d.start=f,f=["M"+i(h.x),i(h.y)+"C"+i(h.n.x),i(h.n.y),i(h.end.x),i(h.end.y),i(c[5]),i(c[6])].join(),p+=l,s=+c[5],u=+c[6];continue}if(!e&&!r)return h=b(s,u,c[1],c[2],c[3],c[4],c[5],c[6],o-p),h}p+=l,s=+c[5],u=+c[6]}f+=c.shift()+c}return d.end=f,h=e?p:r?d:S(s,u,c[0],c[1],c[2],c[3],c[4],c[5],1),h}),null,t._.clone)}var F=w(1),_=w(),E=w(0,1);function S(t,n,e,r,i,o,a,s,u){var c=1-u,f=p(c,3),d=p(c,2),g=u*u,y=g*u,v=f*t+3*d*u*e+3*c*u*u*i+y*a,m=f*n+3*d*u*r+3*c*u*u*o+y*s,x=t+2*u*(e-t)+g*(i-2*e+t),b=n+2*u*(r-n)+g*(o-2*r+n),w=e+2*u*(i-e)+g*(a-2*i+e),F=r+2*u*(o-r)+g*(s-2*o+r),_=c*t+u*e,E=c*n+u*r,S=c*i+u*a,k=c*o+u*s,A=90-180*l.atan2(x-w,b-F)/h;return{x:v,y:m,m:{x:x,y:b},n:{x:w,y:F},start:{x:_,y:E},end:{x:S,y:k},alpha:A}}function k(n,e,r,i,o,a,s,u){t.is(n,"array")||(n=[n,e,r,i,o,a,s,u]);var c=X.apply(null,n);return v(c.min.x,c.min.y,c.max.x-c.min.x,c.max.y-c.min.y)}function A(t,n,e){return n>=t.x&&n<=t.x+t.width&&e>=t.y&&e<=t.y+t.height}function C(t,n){return t=v(t),n=v(n),A(n,t.x,t.y)||A(n,t.x2,t.y)||A(n,t.x,t.y2)||A(n,t.x2,t.y2)||A(t,n.x,n.y)||A(t,n.x2,n.y)||A(t,n.x,n.y2)||A(t,n.x2,n.y2)||(t.x<n.x2&&t.x>n.x||n.x<t.x2&&n.x>t.x)&&(t.y<n.y2&&t.y>n.y||n.y<t.y2&&n.y>t.y)}function B(t,n,e,r,i){var o=-3*n+9*e-9*r+3*i,a=t*o+6*n-12*e+6*r;return t*a-3*n+3*e}function T(t,n,e,r,i,o,a,s,u){null==u&&(u=1),u=u>1?1:u<0?0:u;for(var c=u/2,h=12,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],d=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],p=0,g=0;g<h;g++){var y=c*f[g]+c,v=B(y,t,e,i,a),m=B(y,n,r,o,s),x=v*v+m*m;p+=d[g]*l.sqrt(x)}return c*p}function j(t,n,e,r,i,o,a,s,u){if(!(u<0||T(t,n,e,r,i,o,a,s)<u)){var c,l=1,h=l/2,f=l-h,d=.01;c=T(t,n,e,r,i,o,a,s,f);while(g(c-u)>d)h/=2,f+=(c<u?1:-1)*h,c=T(t,n,e,r,i,o,a,s,f);return f}}function N(t,n,e,r,i,o,a,s){if(!(d(t,e)<f(i,a)||f(t,e)>d(i,a)||d(n,r)<f(o,s)||f(n,r)>d(o,s))){var u=(t*r-n*e)*(i-a)-(t-e)*(i*s-o*a),c=(t*r-n*e)*(o-s)-(n-r)*(i*s-o*a),l=(t-e)*(o-s)-(n-r)*(i-a);if(l){var h=u/l,p=c/l,g=+h.toFixed(2),y=+p.toFixed(2);if(!(g<+f(t,e).toFixed(2)||g>+d(t,e).toFixed(2)||g<+f(i,a).toFixed(2)||g>+d(i,a).toFixed(2)||y<+f(n,r).toFixed(2)||y>+d(n,r).toFixed(2)||y<+f(o,s).toFixed(2)||y>+d(o,s).toFixed(2)))return{x:h,y:p}}}}function D(t,n,e){var r=k(t),i=k(n);if(!C(r,i))return e?0:[];for(var o=T.apply(0,t),a=T.apply(0,n),s=~~(o/8),u=~~(a/8),c=[],l=[],h={},f=e?0:[],d=0;d<s+1;d++){var p=S.apply(0,t.concat(d/s));c.push({x:p.x,y:p.y,t:d/s})}for(d=0;d<u+1;d++)p=S.apply(0,n.concat(d/u)),l.push({x:p.x,y:p.y,t:d/u});for(d=0;d<s;d++)for(var y=0;y<u;y++){var v=c[d],m=c[d+1],x=l[y],b=l[y+1],w=g(m.x-v.x)<.001?"y":"x",F=g(b.x-x.x)<.001?"y":"x",_=N(v.x,v.y,m.x,m.y,x.x,x.y,b.x,b.y);if(_){if(h[_.x.toFixed(4)]==_.y.toFixed(4))continue;h[_.x.toFixed(4)]=_.y.toFixed(4);var E=v.t+g((_[w]-v[w])/(m[w]-v[w]))*(m.t-v.t),A=x.t+g((_[F]-x[F])/(b[F]-x[F]))*(b.t-x.t);E>=0&&E<=1&&A>=0&&A<=1&&(e?f++:f.push({x:_.x,y:_.y,t1:E,t2:A}))}}return f}function M(t,n){return P(t,n)}function O(t,n){return P(t,n,1)}function P(t,n,e){t=Y(t),n=Y(n);for(var r,i,o,a,s,u,c,l,h,f,d=e?0:[],p=0,g=t.length;p<g;p++){var y=t[p];if("M"==y[0])r=s=y[1],i=u=y[2];else{"C"==y[0]?(h=[r,i].concat(y.slice(1)),r=h[6],i=h[7]):(h=[r,i,r,i,s,u,s,u],r=s,i=u);for(var v=0,m=n.length;v<m;v++){var x=n[v];if("M"==x[0])o=c=x[1],a=l=x[2];else{"C"==x[0]?(f=[o,a].concat(x.slice(1)),o=f[6],a=f[7]):(f=[o,a,o,a,c,l,c,l],o=c,a=l);var b=D(h,f,e);if(e)d+=b;else{for(var w=0,F=b.length;w<F;w++)b[w].segment1=p,b[w].segment2=v,b[w].bez1=h,b[w].bez2=f;d=d.concat(b)}}}}}return d}function L(t,n,e){var r=I(t);return A(r,n,e)&&P(t,[["M",n,e],["H",r.x2+10]],1)%2==1}function I(t){var n=y(t);if(n.bbox)return a(n.bbox);if(!t)return v();t=Y(t);for(var e,r=0,i=0,o=[],s=[],u=0,c=t.length;u<c;u++)if(e=t[u],"M"==e[0])r=e[1],i=e[2],o.push(r),s.push(i);else{var l=X(r,i,e[1],e[2],e[3],e[4],e[5],e[6]);o=o.concat(l.min.x,l.max.x),s=s.concat(l.min.y,l.max.y),r=e[5],i=e[6]}var h=f.apply(0,o),p=f.apply(0,s),g=d.apply(0,o),m=d.apply(0,s),x=v(h,p,g-h,m-p);return n.bbox=a(x),x}function R(t,n,e,r,i){if(i)return[["M",+t+ +i,n],["l",e-2*i,0],["a",i,i,0,0,1,i,i],["l",0,r-2*i],["a",i,i,0,0,1,-i,i],["l",2*i-e,0],["a",i,i,0,0,1,-i,-i],["l",0,2*i-r],["a",i,i,0,0,1,i,-i],["z"]];var o=[["M",t,n],["l",e,0],["l",0,r],["l",-e,0],["z"]];return o.toString=m,o}function q(t,n,e,r,i){if(null==i&&null==r&&(r=e),t=+t,n=+n,e=+e,r=+r,null!=i)var o=Math.PI/180,a=t+e*Math.cos(-r*o),s=t+e*Math.cos(-i*o),u=n+e*Math.sin(-r*o),c=n+e*Math.sin(-i*o),l=[["M",a,u],["A",e,e,0,+(i-r>180),0,s,c]];else l=[["M",t,n],["m",0,-r],["a",e,r,0,1,1,0,2*r],["a",e,r,0,1,1,0,-2*r],["z"]];return l.toString=m,l}var G=t._unit2px,V={path:function(t){return t.attr("path")},circle:function(t){var n=G(t);return q(n.cx,n.cy,n.r)},ellipse:function(t){var n=G(t);return q(n.cx||0,n.cy||0,n.rx,n.ry)},rect:function(t){var n=G(t);return R(n.x||0,n.y||0,n.width,n.height,n.rx,n.ry)},image:function(t){var n=G(t);return R(n.x||0,n.y||0,n.width,n.height)},line:function(t){return"M"+[t.attr("x1")||0,t.attr("y1")||0,t.attr("x2"),t.attr("y2")]},polyline:function(t){return"M"+t.attr("points")},polygon:function(t){return"M"+t.attr("points")+"z"},deflt:function(t){var n=t.node.getBBox();return R(n.x,n.y,n.width,n.height)}};function z(n){var e=y(n),r=String.prototype.toLowerCase;if(e.rel)return x(e.rel);t.is(n,"array")&&t.is(n&&n[0],"array")||(n=t.parsePathString(n));var i=[],o=0,a=0,s=0,u=0,c=0;"M"==n[0][0]&&(o=n[0][1],a=n[0][2],s=o,u=a,c++,i.push(["M",o,a]));for(var l=c,h=n.length;l<h;l++){var f=i[l]=[],d=n[l];if(d[0]!=r.call(d[0]))switch(f[0]=r.call(d[0]),f[0]){case"a":f[1]=d[1],f[2]=d[2],f[3]=d[3],f[4]=d[4],f[5]=d[5],f[6]=+(d[6]-o).toFixed(3),f[7]=+(d[7]-a).toFixed(3);break;case"v":f[1]=+(d[1]-a).toFixed(3);break;case"m":s=d[1],u=d[2];default:for(var p=1,g=d.length;p<g;p++)f[p]=+(d[p]-(p%2?o:a)).toFixed(3)}else{f=i[l]=[],"m"==d[0]&&(s=d[1]+o,u=d[2]+a);for(var v=0,b=d.length;v<b;v++)i[l][v]=d[v]}var w=i[l].length;switch(i[l][0]){case"z":o=s,a=u;break;case"h":o+=+i[l][w-1];break;case"v":a+=+i[l][w-1];break;default:o+=+i[l][w-2],a+=+i[l][w-1]}}return i.toString=m,e.rel=x(i),i}function $(n){var e=y(n);if(e.abs)return x(e.abs);if(o(n,"array")&&o(n&&n[0],"array")||(n=t.parsePathString(n)),!n||!n.length)return[["M",0,0]];var r,i=[],a=0,s=0,u=0,c=0,l=0;"M"==n[0][0]&&(a=+n[0][1],s=+n[0][2],u=a,c=s,l++,i[0]=["M",a,s]);for(var h,f,d=3==n.length&&"M"==n[0][0]&&"R"==n[1][0].toUpperCase()&&"Z"==n[2][0].toUpperCase(),p=l,g=n.length;p<g;p++){if(i.push(h=[]),f=n[p],r=f[0],r!=r.toUpperCase())switch(h[0]=r.toUpperCase(),h[0]){case"A":h[1]=f[1],h[2]=f[2],h[3]=f[3],h[4]=f[4],h[5]=f[5],h[6]=+f[6]+a,h[7]=+f[7]+s;break;case"V":h[1]=+f[1]+s;break;case"H":h[1]=+f[1]+a;break;case"R":for(var v=[a,s].concat(f.slice(1)),b=2,w=v.length;b<w;b++)v[b]=+v[b]+a,v[++b]=+v[b]+s;i.pop(),i=i.concat(J(v,d));break;case"O":i.pop(),v=q(a,s,f[1],f[2]),v.push(v[0]),i=i.concat(v);break;case"U":i.pop(),i=i.concat(q(a,s,f[1],f[2],f[3])),h=["U"].concat(i[i.length-1].slice(-2));break;case"M":u=+f[1]+a,c=+f[2]+s;default:for(b=1,w=f.length;b<w;b++)h[b]=+f[b]+(b%2?a:s)}else if("R"==r)v=[a,s].concat(f.slice(1)),i.pop(),i=i.concat(J(v,d)),h=["R"].concat(f.slice(-2));else if("O"==r)i.pop(),v=q(a,s,f[1],f[2]),v.push(v[0]),i=i.concat(v);else if("U"==r)i.pop(),i=i.concat(q(a,s,f[1],f[2],f[3])),h=["U"].concat(i[i.length-1].slice(-2));else for(var F=0,_=f.length;F<_;F++)h[F]=f[F];if(r=r.toUpperCase(),"O"!=r)switch(h[0]){case"Z":a=+u,s=+c;break;case"H":a=h[1];break;case"V":s=h[1];break;case"M":u=h[h.length-2],c=h[h.length-1];default:a=h[h.length-2],s=h[h.length-1]}}return i.toString=m,e.abs=x(i),i}function H(t,n,e,r){return[t,n,e,r,e,r]}function U(t,n,e,r,i,o){var a=1/3,s=2/3;return[a*t+s*e,a*n+s*r,a*i+s*e,a*o+s*r,i,o]}function W(n,e,r,i,o,a,s,u,c,f){var d,p=120*h/180,y=h/180*(+o||0),v=[],m=t._.cacher((function(t,n,e){var r=t*l.cos(e)-n*l.sin(e),i=t*l.sin(e)+n*l.cos(e);return{x:r,y:i}}));if(!r||!i)return[n,e,u,c,u,c];if(f)A=f[0],C=f[1],S=f[2],k=f[3];else{d=m(n,e,-y),n=d.x,e=d.y,d=m(u,c,-y),u=d.x,c=d.y;l.cos(h/180*o),l.sin(h/180*o);var x=(n-u)/2,b=(e-c)/2,w=x*x/(r*r)+b*b/(i*i);w>1&&(w=l.sqrt(w),r*=w,i*=w);var F=r*r,_=i*i,E=(a==s?-1:1)*l.sqrt(g((F*_-F*b*b-_*x*x)/(F*b*b+_*x*x))),S=E*r*b/i+(n+u)/2,k=E*-i*x/r+(e+c)/2,A=l.asin(((e-k)/i).toFixed(9)),C=l.asin(((c-k)/i).toFixed(9));A=n<S?h-A:A,C=u<S?h-C:C,A<0&&(A=2*h+A),C<0&&(C=2*h+C),s&&A>C&&(A-=2*h),!s&&C>A&&(C-=2*h)}var B=C-A;if(g(B)>p){var T=C,j=u,N=c;C=A+p*(s&&C>A?1:-1),u=S+r*l.cos(C),c=k+i*l.sin(C),v=W(u,c,r,i,o,0,s,j,N,[C,T,S,k])}B=C-A;var D=l.cos(A),M=l.sin(A),O=l.cos(C),P=l.sin(C),L=l.tan(B/4),I=4/3*r*L,R=4/3*i*L,q=[n,e],G=[n+I*M,e-R*D],V=[u+I*P,c-R*O],z=[u,c];if(G[0]=2*q[0]-G[0],G[1]=2*q[1]-G[1],f)return[G,V,z].concat(v);v=[G,V,z].concat(v).join().split(",");for(var $=[],H=0,U=v.length;H<U;H++)$[H]=H%2?m(v[H-1],v[H],y).y:m(v[H],v[H+1],y).x;return $}function X(t,n,e,r,i,o,a,s){for(var u,c,h,p,y,v,m,x,b=[],w=[[],[]],F=0;F<2;++F)if(0==F?(c=6*t-12*e+6*i,u=-3*t+9*e-9*i+3*a,h=3*e-3*t):(c=6*n-12*r+6*o,u=-3*n+9*r-9*o+3*s,h=3*r-3*n),g(u)<1e-12){if(g(c)<1e-12)continue;p=-h/c,0<p&&p<1&&b.push(p)}else m=c*c-4*h*u,x=l.sqrt(m),m<0||(y=(-c+x)/(2*u),0<y&&y<1&&b.push(y),v=(-c-x)/(2*u),0<v&&v<1&&b.push(v));var _,E=b.length,S=E;while(E--)p=b[E],_=1-p,w[0][E]=_*_*_*t+3*_*_*p*e+3*_*p*p*i+p*p*p*a,w[1][E]=_*_*_*n+3*_*_*p*r+3*_*p*p*o+p*p*p*s;return w[0][S]=t,w[1][S]=n,w[0][S+1]=a,w[1][S+1]=s,w[0].length=w[1].length=S+2,{min:{x:f.apply(0,w[0]),y:f.apply(0,w[1])},max:{x:d.apply(0,w[0]),y:d.apply(0,w[1])}}}function Y(t,n){var e=!n&&y(t);if(!n&&e.curve)return x(e.curve);for(var r=$(t),i=n&&$(n),o={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s=function(t,n,e){var r,i;if(!t)return["C",n.x,n.y,n.x,n.y,n.x,n.y];switch(!(t[0]in{T:1,Q:1})&&(n.qx=n.qy=null),t[0]){case"M":n.X=t[1],n.Y=t[2];break;case"A":t=["C"].concat(W.apply(0,[n.x,n.y].concat(t.slice(1))));break;case"S":"C"==e||"S"==e?(r=2*n.x-n.bx,i=2*n.y-n.by):(r=n.x,i=n.y),t=["C",r,i].concat(t.slice(1));break;case"T":"Q"==e||"T"==e?(n.qx=2*n.x-n.qx,n.qy=2*n.y-n.qy):(n.qx=n.x,n.qy=n.y),t=["C"].concat(U(n.x,n.y,n.qx,n.qy,t[1],t[2]));break;case"Q":n.qx=t[1],n.qy=t[2],t=["C"].concat(U(n.x,n.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(H(n.x,n.y,t[1],t[2]));break;case"H":t=["C"].concat(H(n.x,n.y,t[1],n.y));break;case"V":t=["C"].concat(H(n.x,n.y,n.x,t[1]));break;case"Z":t=["C"].concat(H(n.x,n.y,n.X,n.Y));break}return t},u=function(t,n){if(t[n].length>7){t[n].shift();var e=t[n];while(e.length)h[n]="A",i&&(f[n]="A"),t.splice(n++,0,["C"].concat(e.splice(0,6)));t.splice(n,1),m=d(r.length,i&&i.length||0)}},l=function(t,n,e,o,a){t&&n&&"M"==t[a][0]&&"M"!=n[a][0]&&(n.splice(a,0,["M",o.x,o.y]),e.bx=0,e.by=0,e.x=t[a][1],e.y=t[a][2],m=d(r.length,i&&i.length||0))},h=[],f=[],p="",g="",v=0,m=d(r.length,i&&i.length||0);v<m;v++){r[v]&&(p=r[v][0]),"C"!=p&&(h[v]=p,v&&(g=h[v-1])),r[v]=s(r[v],o,g),"A"!=h[v]&&"C"==p&&(h[v]="C"),u(r,v),i&&(i[v]&&(p=i[v][0]),"C"!=p&&(f[v]=p,v&&(g=f[v-1])),i[v]=s(i[v],a,g),"A"!=f[v]&&"C"==p&&(f[v]="C"),u(i,v)),l(r,i,o,a,v),l(i,r,a,o,v);var b=r[v],w=i&&i[v],F=b.length,_=i&&w.length;o.x=b[F-2],o.y=b[F-1],o.bx=c(b[F-4])||o.x,o.by=c(b[F-3])||o.y,a.bx=i&&(c(w[_-4])||a.x),a.by=i&&(c(w[_-3])||a.y),a.x=i&&w[_-2],a.y=i&&w[_-1]}return i||(e.curve=x(r)),i?[r,i]:r}function Z(t,n){if(!n)return t;var e,r,i,o,a,s,u;for(t=Y(t),i=0,a=t.length;i<a;i++)for(u=t[i],o=1,s=u.length;o<s;o+=2)e=n.x(u[o],u[o+1]),r=n.y(u[o],u[o+1]),u[o]=e,u[o+1]=r;return t}function J(t,n){for(var e=[],r=0,i=t.length;i-2*!n>r;r+=2){var o=[{x:+t[r-2],y:+t[r-1]},{x:+t[r],y:+t[r+1]},{x:+t[r+2],y:+t[r+3]},{x:+t[r+4],y:+t[r+5]}];n?r?i-4==r?o[3]={x:+t[0],y:+t[1]}:i-2==r&&(o[2]={x:+t[0],y:+t[1]},o[3]={x:+t[2],y:+t[3]}):o[0]={x:+t[i-2],y:+t[i-1]}:i-4==r?o[3]=o[2]:r||(o[0]={x:+t[r],y:+t[r+1]}),e.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y])}return e}t.path=y,t.path.getTotalLength=F,t.path.getPointAtLength=_,t.path.getSubpath=function(t,n,e){if(this.getTotalLength(t)-e<1e-6)return E(t,n).end;var r=E(t,e,1);return n?E(r,n).end:r},i.getTotalLength=function(){if(this.node.getTotalLength)return this.node.getTotalLength()},i.getPointAtLength=function(t){return _(this.attr("d"),t)},i.getSubpath=function(n,e){return t.path.getSubpath(this.attr("d"),n,e)},t._.box=v,t.path.findDotsAtSegment=S,t.path.bezierBBox=k,t.path.isPointInsideBBox=A,t.closest=function(n,e,r,i){var o=100,a=v(n-o/2,e-o/2,o,o),s=[],u=r[0].hasOwnProperty("x")?function(t){return{x:r[t].x,y:r[t].y}}:function(t){return{x:r[t],y:i[t]}},c=0;while(o<=1e6&&!c){for(var l=0,h=r.length;l<h;l++){var f=u(l);if(A(a,f.x,f.y)){c++,s.push(f);break}}c||(o*=2,a=v(n-o/2,e-o/2,o,o))}if(1e6!=o){var d,p=1/0;for(l=0,h=s.length;l<h;l++){var g=t.len(n,e,s[l].x,s[l].y);p>g&&(p=g,s[l].len=g,d=s[l])}return d}},t.path.isBBoxIntersect=C,t.path.intersection=M,t.path.intersectionNumber=O,t.path.isPointInside=L,t.path.getBBox=I,t.path.get=V,t.path.toRelative=z,t.path.toAbsolute=$,t.path.toCubic=Y,t.path.map=Z,t.path.toString=m,t.path.clone=x})),r.plugin((function(t,r,i,o){var a=Math.max,s=Math.min,u=function(t){if(this.items=[],this.bindings={},this.length=0,this.type="set",t)for(var n=0,e=t.length;n<e;n++)t[n]&&(this[this.items.length]=this.items[this.items.length]=t[n],this.length++)},c=u.prototype;c.push=function(){for(var t,n,e=0,r=arguments.length;e<r;e++)t=arguments[e],t&&(n=this.items.length,this[n]=this.items[n]=t,this.length++);return this},c.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},c.forEach=function(t,n){for(var e=0,r=this.items.length;e<r;e++)if(!1===t.call(n,this.items[e],e))return this;return this},c.animate=function(r,i,o,a){"function"!=typeof o||o.length||(a=o,o=e.linear),r instanceof t._.Animation&&(a=r.callback,o=r.easing,i=o.dur,r=r.attr);var s=arguments;if(t.is(r,"array")&&t.is(s[s.length-1],"array"))var u=!0;var c,l=function(){c?this.b=c:c=this.b},h=0,f=this,d=a&&function(){++h==f.length&&a.call(this)};return this.forEach((function(t,e){n.once("snap.animcreated."+t.id,l),u?s[e]&&t.animate.apply(t,s[e]):t.animate(r,i,o,d)}))},c.remove=function(){while(this.length)this.pop().remove();return this},c.bind=function(t,n,e){var r={};if("function"==typeof n)this.bindings[t]=n;else{var i=e||t;this.bindings[t]=function(t){r[i]=t,n.attr(r)}}return this},c.attr=function(t){var n={};for(var e in t)this.bindings[e]?this.bindings[e](t[e]):n[e]=t[e];for(var r=0,i=this.items.length;r<i;r++)this.items[r].attr(n);return this},c.clear=function(){while(this.length)this.pop()},c.splice=function(t,n,e){t=t<0?a(this.length+t,0):t,n=a(0,s(this.length-t,n));var r,i=[],o=[],c=[];for(r=2;r<arguments.length;r++)c.push(arguments[r]);for(r=0;r<n;r++)o.push(this[t+r]);for(;r<this.length-t;r++)i.push(this[t+r]);var l=c.length;for(r=0;r<l+i.length;r++)this.items[t+r]=this[t+r]=r<l?c[r]:i[r-l];r=this.items.length=this.length-=n-l;while(this[r])delete this[r++];return new u(o)},c.exclude=function(t){for(var n=0,e=this.length;n<e;n++)if(this[n]==t)return this.splice(n,1),!0;return!1},c.insertAfter=function(t){var n=this.items.length;while(n--)this.items[n].insertAfter(t);return this},c.getBBox=function(){for(var t=[],n=[],e=[],r=[],i=this.items.length;i--;)if(!this.items[i].removed){var o=this.items[i].getBBox();t.push(o.x),n.push(o.y),e.push(o.x+o.width),r.push(o.y+o.height)}return t=s.apply(0,t),n=s.apply(0,n),e=a.apply(0,e),r=a.apply(0,r),{x:t,y:n,x2:e,y2:r,width:e-t,height:r-n,cx:t+(e-t)/2,cy:n+(r-n)/2}},c.clone=function(t){t=new u;for(var n=0,e=this.items.length;n<e;n++)t.push(this.items[n].clone());return t},c.toString=function(){return"Snap‘s set"},c.type="set",t.Set=u,t.set=function(){var t=new u;return arguments.length&&t.push.apply(t,Array.prototype.slice.call(arguments,0)),t}})),r.plugin((function(t,e,r,i){var o={},a=/[%a-z]+$/i,s=String;function u(t){var n=t[0];switch(n.toLowerCase()){case"t":return[n,0,0];case"m":return[n,1,0,0,1,0,0];case"r":return 4==t.length?[n,0,t[2],t[3]]:[n,0];case"s":return 5==t.length?[n,1,1,t[3],t[4]]:3==t.length?[n,1,1]:[n,1]}}function c(n,e,r){n=n||new t.Matrix,e=e||new t.Matrix,n=t.parseTransformString(n.toTransformString())||[],e=t.parseTransformString(e.toTransformString())||[];for(var i,o,a,s,c=Math.max(n.length,e.length),l=[],h=[],f=0;f<c;f++){if(a=n[f]||u(e[f]),s=e[f]||u(a),a[0]!=s[0]||"r"==a[0].toLowerCase()&&(a[2]!=s[2]||a[3]!=s[3])||"s"==a[0].toLowerCase()&&(a[3]!=s[3]||a[4]!=s[4])){n=t._.transform2matrix(n,r()),e=t._.transform2matrix(e,r()),l=[["m",n.a,n.b,n.c,n.d,n.e,n.f]],h=[["m",e.a,e.b,e.c,e.d,e.e,e.f]];break}for(l[f]=[],h[f]=[],i=0,o=Math.max(a.length,s.length);i<o;i++)i in a&&(l[f][i]=a[i]),i in s&&(h[f][i]=s[i])}return{from:g(l),to:g(h),f:p(l)}}function l(t){return t}function h(t){return function(n){return+n.toFixed(3)+t}}function f(t){return t.join(" ")}function d(n){return t.rgb(n[0],n[1],n[2],n[3])}function p(t){var n,e,r,i,o,a,s=0,u=[];for(n=0,e=t.length;n<e;n++){for(o="[",a=['"'+t[n][0]+'"'],r=1,i=t[n].length;r<i;r++)a[r]="val["+s+++"]";o+=a+"]",u[n]=o}return Function("val","return Snap.path.toString.call(["+u+"])")}function g(t){for(var n=[],e=0,r=t.length;e<r;e++)for(var i=1,o=t[e].length;i<o;i++)n.push(t[e][i]);return n}function y(t){return isFinite(t)}function v(n,e){return!(!t.is(n,"array")||!t.is(e,"array"))&&n.toString()==e.toString()}o.stroke=o.fill="colour",e.prototype.equal=function(t,e){return n("snap.util.equal",this,t,e).firstDefined()},n.on("snap.util.equal",(function(n,e){var r,i,u=s(this.attr(n)||""),m=this;if("colour"==o[n])return r=t.color(u),i=t.color(e),{from:[r.r,r.g,r.b,r.opacity],to:[i.r,i.g,i.b,i.opacity],f:d};if("viewBox"==n)return r=this.attr(n).vb.split(" ").map(Number),i=e.split(" ").map(Number),{from:r,to:i,f:f};if("transform"==n||"gradientTransform"==n||"patternTransform"==n)return"string"==typeof e&&(e=s(e).replace(/\.{3}|\u2026/g,u)),u=this.matrix,e=t._.rgTransform.test(e)?t._.transform2matrix(e,this.getBBox()):t._.transform2matrix(t._.svgTransform2string(e),this.getBBox()),c(u,e,(function(){return m.getBBox(1)}));if("d"==n||"path"==n)return r=t.path.toCubic(u,e),{from:g(r[0]),to:g(r[1]),f:p(r[0])};if("points"==n)return r=s(u).split(t._.separator),i=s(e).split(t._.separator),{from:r,to:i,f:function(t){return t}};if(y(u)&&y(e))return{from:parseFloat(u),to:parseFloat(e),f:l};var x=u.match(a),b=s(e).match(a);return x&&v(x,b)?{from:parseFloat(u),to:parseFloat(e),f:h(x)}:{from:this.asPX(n),to:this.asPX(n,e),f:l}}))})),r.plugin((function(t,e,r,i){for(var o=e.prototype,a="hasOwnProperty",s=("createTouch"in i.doc),u=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],c={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},l=function(t,n){var e="y"==t?"scrollTop":"scrollLeft",r=n&&n.node?n.node.ownerDocument:i.doc;return r[e in r.documentElement?"documentElement":"body"][e]},h=function(){return this.originalEvent.preventDefault()},f=function(){return this.originalEvent.stopPropagation()},d=function(t,n,e,r){var i=s&&c[n]?c[n]:n,o=function(i){var o=l("y",r),u=l("x",r);if(s&&c[a](n))for(var d=0,p=i.targetTouches&&i.targetTouches.length;d<p;d++)if(i.targetTouches[d].target==t||t.contains(i.targetTouches[d].target)){var g=i;i=i.targetTouches[d],i.originalEvent=g,i.preventDefault=h,i.stopPropagation=f;break}var y=i.clientX+u,v=i.clientY+o;return e.call(r,i,y,v)};return n!==i&&t.addEventListener(n,o,!1),t.addEventListener(i,o,!1),function(){return n!==i&&t.removeEventListener(n,o,!1),t.removeEventListener(i,o,!1),!0}},p=[],g=function(t){var e,r=t.clientX,i=t.clientY,o=l("y"),a=l("x"),u=p.length;while(u--){if(e=p[u],s){var c,h=t.touches&&t.touches.length;while(h--)if(c=t.touches[h],c.identifier==e.el._drag.id||e.el.node.contains(c.target)){r=c.clientX,i=c.clientY,(t.originalEvent?t.originalEvent:t).preventDefault();break}}else t.preventDefault();var f=e.el.node;f.nextSibling,f.parentNode,f.style.display;r+=a,i+=o,n("snap.drag.move."+e.el.id,e.move_scope||e.el,r-e.el._drag.x,i-e.el._drag.y,r,i,t)}},y=function(e){t.unmousemove(g).unmouseup(y);var r,i=p.length;while(i--)r=p[i],r.el._drag={},n("snap.drag.end."+r.el.id,r.end_scope||r.start_scope||r.move_scope||r.el,e),n.off("snap.drag.*."+r.el.id);p=[]},v=u.length;v--;)(function(n){t[n]=o[n]=function(e,r){if(t.is(e,"function"))this.events=this.events||[],this.events.push({name:n,f:e,unbind:d(this.node||document,n,e,r||this)});else for(var i=0,o=this.events.length;i<o;i++)if(this.events[i].name==n)try{this.events[i].f.call(this)}catch(a){}return this},t["un"+n]=o["un"+n]=function(t){var e=this.events||[],r=e.length;while(r--)if(e[r].name==n&&(e[r].f==t||!t))return e[r].unbind(),e.splice(r,1),!e.length&&delete this.events,this;return this}})(u[v]);o.hover=function(t,n,e,r){return this.mouseover(t,e).mouseout(n,r||e)},o.unhover=function(t,n){return this.unmouseover(t).unmouseout(n)};var m=[];o.drag=function(e,r,i,o,a,s){var u,c=this;if(!arguments.length)return c.drag((function(t,n){this.attr({transform:u+(u?"T":"t")+[t,n]})}),(function(){u=this.transform().local}));function l(u,l,h){(u.originalEvent||u).preventDefault(),c._drag.x=l,c._drag.y=h,c._drag.id=u.identifier,!p.length&&t.mousemove(g).mouseup(y),p.push({el:c,move_scope:o,start_scope:a,end_scope:s}),r&&n.on("snap.drag.start."+c.id,r),e&&n.on("snap.drag.move."+c.id,e),i&&n.on("snap.drag.end."+c.id,i),n("snap.drag.start."+c.id,a||o||c,l,h,u)}function h(t,e,r){n("snap.draginit."+c.id,c,t,e,r)}return n.on("snap.draginit."+c.id,l),c._drag={},m.push({el:c,start:l,init:h}),c.mousedown(h),c},o.undrag=function(){var e=m.length;while(e--)m[e].el==this&&(this.unmousedown(m[e].init),m.splice(e,1),n.unbind("snap.drag.*."+this.id),n.unbind("snap.draginit."+this.id));return!m.length&&t.unmousemove(g).unmouseup(y),this}})),r.plugin((function(t,e,r,i){e.prototype;var o=r.prototype,a=/^\s*url\((.+)\)/,s=String,u=t._.$;t.filter={},o.filter=function(n){var r=this;"svg"!=r.type&&(r=r.paper);var i=t.parse(s(n)),o=t._.id(),a=(r.node.offsetWidth,r.node.offsetHeight,u("filter"));return u(a,{id:o,filterUnits:"userSpaceOnUse"}),a.appendChild(i.node),r.defs.appendChild(a),new e(a)},n.on("snap.util.getattr.filter",(function(){n.stop();var e=u(this.node,"filter");if(e){var r=s(e).match(a);return r&&t.select(r[1])}})),n.on("snap.util.attr.filter",(function(r){if(r instanceof e&&"filter"==r.type){n.stop();var i=r.node.id;i||(u(r.node,{id:r.id}),i=r.id),u(this.node,{filter:t.url(i)})}r&&"none"!=r||(n.stop(),this.node.removeAttribute("filter"))})),t.filter.blur=function(n,e){null==n&&(n=2);var r=null==e?n:[n,e];return t.format('<feGaussianBlur stdDeviation="{def}"/>',{def:r})},t.filter.blur.toString=function(){return this()},t.filter.shadow=function(n,e,r,i,o){return null==o&&(null==i?(o=r,r=4,i="#000"):(o=i,i=r,r=4)),null==r&&(r=4),null==o&&(o=1),null==n&&(n=0,e=2),null==e&&(e=n),i=t.color(i),t.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:i,dx:n,dy:e,blur:r,opacity:o})},t.filter.shadow.toString=function(){return this()},t.filter.grayscale=function(n){return null==n&&(n=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-n),b:.7152-.7152*(1-n),c:.0722-.0722*(1-n),d:.2126-.2126*(1-n),e:.7152+.2848*(1-n),f:.0722-.0722*(1-n),g:.2126-.2126*(1-n),h:.0722+.9278*(1-n)})},t.filter.grayscale.toString=function(){return this()},t.filter.sepia=function(n){return null==n&&(n=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-n),b:.769-.769*(1-n),c:.189-.189*(1-n),d:.349-.349*(1-n),e:.686+.314*(1-n),f:.168-.168*(1-n),g:.272-.272*(1-n),h:.534-.534*(1-n),i:.131+.869*(1-n)})},t.filter.sepia.toString=function(){return this()},t.filter.saturate=function(n){return null==n&&(n=1),t.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-n})},t.filter.saturate.toString=function(){return this()},t.filter.hueRotate=function(n){return n=n||0,t.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:n})},t.filter.hueRotate.toString=function(){return this()},t.filter.invert=function(n){return null==n&&(n=1),t.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:n,amount2:1-n})},t.filter.invert.toString=function(){return this()},t.filter.brightness=function(n){return null==n&&(n=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:n})},t.filter.brightness.toString=function(){return this()},t.filter.contrast=function(n){return null==n&&(n=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:n,amount2:.5-n/2})},t.filter.contrast.toString=function(){return this()}})),r.plugin((function(t,n,e,r,i){var o=t._.box,a=t.is,s=/^[^a-z]*([tbmlrc])/i,u=function(){return"T"+this.dx+","+this.dy};n.prototype.getAlign=function(t,n){null==n&&a(t,"string")&&(n=t,t=null),t=t||this.paper;var e=t.getBBox?t.getBBox():o(t),r=this.getBBox(),i={};switch(n=n&&n.match(s),n=n?n[1].toLowerCase():"c",n){case"t":i.dx=0,i.dy=e.y-r.y;break;case"b":i.dx=0,i.dy=e.y2-r.y2;break;case"m":i.dx=0,i.dy=e.cy-r.cy;break;case"l":i.dx=e.x-r.x,i.dy=0;break;case"r":i.dx=e.x2-r.x2,i.dy=0;break;default:i.dx=e.cx-r.cx,i.dy=0;break}return i.toString=u,i},n.prototype.align=function(t,n){return this.transform("..."+this.getAlign(t,n))}})),r.plugin((function(n,e,r,i){var o="#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000",a="#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162",s="#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF",u="#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA",c="#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE",l="#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF",h="#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA",f="#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4",d="#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5",p="#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853",g="#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17",y="#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00",v="#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600",m="#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00",x="#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00",b="#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00",w="#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723",F="#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121",_="#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238";function E(t){t=t.split(/(?=#)/);var n=new String(t[5]);return n[50]=t[0],n[100]=t[1],n[200]=t[2],n[300]=t[3],n[400]=t[4],n[500]=t[5],n[600]=t[6],n[700]=t[7],n[800]=t[8],n[900]=t[9],t[10]&&(n.A100=t[10],n.A200=t[11],n.A400=t[12],n.A700=t[13]),n}n.mui={},n.flat={},n.mui.red=E(o),n.mui.pink=E(a),n.mui.purple=E(s),n.mui.deeppurple=E(u),n.mui.indigo=E(c),n.mui.blue=E(l),n.mui.lightblue=E(h),n.mui.cyan=E(f),n.mui.teal=E(d),n.mui.green=E(p),n.mui.lightgreen=E(g),n.mui.lime=E(y),n.mui.yellow=E(v),n.mui.amber=E(m),n.mui.orange=E(x),n.mui.deeporange=E(b),n.mui.brown=E(w),n.mui.grey=E(F),n.mui.bluegrey=E(_),n.flat.turquoise="#1abc9c",n.flat.greensea="#16a085",n.flat.sunflower="#f1c40f",n.flat.orange="#f39c12",n.flat.emerland="#2ecc71",n.flat.nephritis="#27ae60",n.flat.carrot="#e67e22",n.flat.pumpkin="#d35400",n.flat.peterriver="#3498db",n.flat.belizehole="#2980b9",n.flat.alizarin="#e74c3c",n.flat.pomegranate="#c0392b",n.flat.amethyst="#9b59b6",n.flat.wisteria="#8e44ad",n.flat.clouds="#ecf0f1",n.flat.silver="#bdc3c7",n.flat.wetasphalt="#34495e",n.flat.midnightblue="#2c3e50",n.flat.concrete="#95a5a6",n.flat.asbestos="#7f8c8d",n.importMUIColors=function(){for(var e in n.mui)n.mui.hasOwnProperty(e)&&(t[e]=n.mui[e])}})),r}))},c46f:function(t,n,e){"use strict";e.d(n,"a",(function(){return he}));var r={};e.r(r),e.d(r,"VERSION",(function(){return i["e"]})),e.d(r,"restArguments",(function(){return o})),e.d(r,"isObject",(function(){return a})),e.d(r,"isNull",(function(){return s})),e.d(r,"isUndefined",(function(){return u})),e.d(r,"isBoolean",(function(){return c})),e.d(r,"isElement",(function(){return l})),e.d(r,"isString",(function(){return f})),e.d(r,"isNumber",(function(){return d})),e.d(r,"isDate",(function(){return p})),e.d(r,"isRegExp",(function(){return g})),e.d(r,"isError",(function(){return y})),e.d(r,"isSymbol",(function(){return v})),e.d(r,"isMap",(function(){return m})),e.d(r,"isWeakMap",(function(){return x})),e.d(r,"isSet",(function(){return b})),e.d(r,"isWeakSet",(function(){return w})),e.d(r,"isArrayBuffer",(function(){return F})),e.d(r,"isDataView",(function(){return _})),e.d(r,"isArray",(function(){return E})),e.d(r,"isFunction",(function(){return A})),e.d(r,"isArguments",(function(){return T})),e.d(r,"isFinite",(function(){return j})),e.d(r,"isNaN",(function(){return N})),e.d(r,"isTypedArray",(function(){return q})),e.d(r,"isEmpty",(function(){return U})),e.d(r,"isMatch",(function(){return W})),e.d(r,"isEqual",(function(){return J})),e.d(r,"keys",(function(){return H})),e.d(r,"allKeys",(function(){return K})),e.d(r,"values",(function(){return Q})),e.d(r,"pairs",(function(){return tt})),e.d(r,"invert",(function(){return nt})),e.d(r,"functions",(function(){return et})),e.d(r,"methods",(function(){return et})),e.d(r,"extend",(function(){return it})),e.d(r,"extendOwn",(function(){return ot})),e.d(r,"assign",(function(){return ot})),e.d(r,"defaults",(function(){return at})),e.d(r,"create",(function(){return ct})),e.d(r,"clone",(function(){return lt})),e.d(r,"tap",(function(){return ht})),e.d(r,"has",(function(){return ft})),e.d(r,"mapObject",(function(){return wt})),e.d(r,"identity",(function(){return dt})),e.d(r,"constant",(function(){return D})),e.d(r,"noop",(function(){return Ft})),e.d(r,"property",(function(){return yt})),e.d(r,"propertyOf",(function(){return _t})),e.d(r,"matcher",(function(){return pt})),e.d(r,"matches",(function(){return pt})),e.d(r,"times",(function(){return Et})),e.d(r,"random",(function(){return St})),e.d(r,"now",(function(){return kt})),e.d(r,"escape",(function(){return Bt})),e.d(r,"unescape",(function(){return jt})),e.d(r,"templateSettings",(function(){return Nt})),e.d(r,"template",(function(){return Lt})),e.d(r,"result",(function(){return It})),e.d(r,"uniqueId",(function(){return qt})),e.d(r,"chain",(function(){return Gt})),e.d(r,"iteratee",(function(){return xt})),e.d(r,"partial",(function(){return $t})),e.d(r,"bind",(function(){return Ht})),e.d(r,"bindAll",(function(){return Wt})),e.d(r,"memoize",(function(){return Xt})),e.d(r,"delay",(function(){return Yt})),e.d(r,"defer",(function(){return Zt})),e.d(r,"throttle",(function(){return Jt})),e.d(r,"debounce",(function(){return Kt})),e.d(r,"wrap",(function(){return Qt})),e.d(r,"negate",(function(){return tn})),e.d(r,"compose",(function(){return nn})),e.d(r,"after",(function(){return en})),e.d(r,"before",(function(){return rn})),e.d(r,"once",(function(){return on})),e.d(r,"findKey",(function(){return an})),e.d(r,"findIndex",(function(){return un})),e.d(r,"findLastIndex",(function(){return cn})),e.d(r,"sortedIndex",(function(){return ln})),e.d(r,"indexOf",(function(){return fn})),e.d(r,"lastIndexOf",(function(){return dn})),e.d(r,"find",(function(){return pn})),e.d(r,"detect",(function(){return pn})),e.d(r,"findWhere",(function(){return gn})),e.d(r,"each",(function(){return yn})),e.d(r,"forEach",(function(){return yn})),e.d(r,"map",(function(){return vn})),e.d(r,"collect",(function(){return vn})),e.d(r,"reduce",(function(){return xn})),e.d(r,"foldl",(function(){return xn})),e.d(r,"inject",(function(){return xn})),e.d(r,"reduceRight",(function(){return bn})),e.d(r,"foldr",(function(){return bn})),e.d(r,"filter",(function(){return wn})),e.d(r,"select",(function(){return wn})),e.d(r,"reject",(function(){return Fn})),e.d(r,"every",(function(){return _n})),e.d(r,"all",(function(){return _n})),e.d(r,"some",(function(){return En})),e.d(r,"any",(function(){return En})),e.d(r,"contains",(function(){return Sn})),e.d(r,"includes",(function(){return Sn})),e.d(r,"include",(function(){return Sn})),e.d(r,"invoke",(function(){return kn})),e.d(r,"pluck",(function(){return An})),e.d(r,"where",(function(){return Cn})),e.d(r,"max",(function(){return Bn})),e.d(r,"min",(function(){return Tn})),e.d(r,"shuffle",(function(){return Nn})),e.d(r,"sample",(function(){return jn})),e.d(r,"sortBy",(function(){return Dn})),e.d(r,"groupBy",(function(){return On})),e.d(r,"indexBy",(function(){return Pn})),e.d(r,"countBy",(function(){return Ln})),e.d(r,"partition",(function(){return In})),e.d(r,"toArray",(function(){return qn})),e.d(r,"size",(function(){return Gn})),e.d(r,"pick",(function(){return zn})),e.d(r,"omit",(function(){return $n})),e.d(r,"first",(function(){return Un})),e.d(r,"head",(function(){return Un})),e.d(r,"take",(function(){return Un})),e.d(r,"initial",(function(){return Hn})),e.d(r,"last",(function(){return Xn})),e.d(r,"rest",(function(){return Wn})),e.d(r,"tail",(function(){return Wn})),e.d(r,"drop",(function(){return Wn})),e.d(r,"compact",(function(){return Yn})),e.d(r,"flatten",(function(){return Zn})),e.d(r,"without",(function(){return Kn})),e.d(r,"uniq",(function(){return Qn})),e.d(r,"unique",(function(){return Qn})),e.d(r,"union",(function(){return te})),e.d(r,"intersection",(function(){return ne})),e.d(r,"difference",(function(){return Jn})),e.d(r,"unzip",(function(){return ee})),e.d(r,"transpose",(function(){return ee})),e.d(r,"zip",(function(){return re})),e.d(r,"object",(function(){return ie})),e.d(r,"range",(function(){return oe})),e.d(r,"chunk",(function(){return ae})),e.d(r,"mixin",(function(){return ue})),e.d(r,"default",(function(){return ce}));var i=e("2f47");function o(t,n){return n=null==n?t.length-1:+n,function(){for(var e=Math.max(arguments.length-n,0),r=Array(e),i=0;i<e;i++)r[i]=arguments[i+n];switch(n){case 0:return t.call(this,r);case 1:return t.call(this,arguments[0],r);case 2:return t.call(this,arguments[0],arguments[1],r)}var o=Array(n+1);for(i=0;i<n;i++)o[i]=arguments[i];return o[n]=r,t.apply(this,o)}}function a(t){var n=typeof t;return"function"===n||"object"===n&&!!t}function s(t){return null===t}function u(t){return void 0===t}function c(t){return!0===t||!1===t||"[object Boolean]"===i["s"].call(t)}function l(t){return!(!t||1!==t.nodeType)}function h(t){return function(n){return i["s"].call(n)==="[object "+t+"]"}}var f=h("String"),d=h("Number"),p=h("Date"),g=h("RegExp"),y=h("Error"),v=h("Symbol"),m=h("Map"),x=h("WeakMap"),b=h("Set"),w=h("WeakSet"),F=h("ArrayBuffer"),_=h("DataView"),E=i["k"]||h("Array"),S=h("Function"),k=i["p"].document&&i["p"].document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof k&&(S=function(t){return"function"==typeof t||!1});var A=S;function C(t,n){return null!=t&&i["i"].call(t,n)}var B=h("Arguments");(function(){B(arguments)||(B=function(t){return C(t,"callee")})})();var T=B;function j(t){return!v(t)&&Object(i["f"])(t)&&!isNaN(parseFloat(t))}function N(t){return d(t)&&Object(i["g"])(t)}function D(t){return function(){return t}}function M(t){return function(n){var e=t(n);return"number"==typeof e&&e>=0&&e<=i["b"]}}function O(t){return function(n){return null==n?void 0:n[t]}}var P=O("byteLength"),L=M(P),I=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;function R(t){return i["l"]?Object(i["l"])(t)&&!_(t):L(t)&&I.test(i["s"].call(t))}var q=i["r"]?R:D(!1),G=O("length"),V=M(G);function z(t){for(var n={},e=t.length,r=0;r<e;++r)n[t[r]]=!0;return{contains:function(t){return n[t]},push:function(e){return n[e]=!0,t.push(e)}}}function $(t,n){n=z(n);var e=i["n"].length,r=t.constructor,o=A(r)&&r.prototype||i["c"],a="constructor";C(t,a)&&!n.contains(a)&&n.push(a);while(e--)a=i["n"][e],a in t&&t[a]!==o[a]&&!n.contains(a)&&n.push(a)}function H(t){if(!a(t))return[];if(i["m"])return Object(i["m"])(t);var n=[];for(var e in t)C(t,e)&&n.push(e);return i["h"]&&$(t,n),n}function U(t){return null==t||(V(t)&&(E(t)||f(t)||T(t))?0===t.length:0===H(t).length)}function W(t,n){var e=H(n),r=e.length;if(null==t)return!r;for(var i=Object(t),o=0;o<r;o++){var a=e[o];if(n[a]!==i[a]||!(a in i))return!1}return!0}function X(t){return t instanceof X?t:this instanceof X?void(this._wrapped=t):new X(t)}function Y(t,n,e,r){if(t===n)return 0!==t||1/t===1/n;if(null==t||null==n)return!1;if(t!==t)return n!==n;var i=typeof t;return("function"===i||"object"===i||"object"==typeof n)&&Z(t,n,e,r)}function Z(t,n,e,r){t instanceof X&&(t=t._wrapped),n instanceof X&&(n=n._wrapped);var o=i["s"].call(t);if(o!==i["s"].call(n))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+t===""+n;case"[object Number]":return+t!==+t?+n!==+n:0===+t?1/+t===1/n:+t===+n;case"[object Date]":case"[object Boolean]":return+t===+n;case"[object Symbol]":return i["d"].valueOf.call(t)===i["d"].valueOf.call(n);case"[object ArrayBuffer]":return Z(new DataView(t),new DataView(n),e,r);case"[object DataView]":var a=P(t);if(a!==P(n))return!1;while(a--)if(t.getUint8(a)!==n.getUint8(a))return!1;return!0}if(q(t))return Z(new DataView(t.buffer),new DataView(n.buffer),e,r);var s="[object Array]"===o;if(!s){if("object"!=typeof t||"object"!=typeof n)return!1;var u=t.constructor,c=n.constructor;if(u!==c&&!(A(u)&&u instanceof u&&A(c)&&c instanceof c)&&"constructor"in t&&"constructor"in n)return!1}e=e||[],r=r||[];var l=e.length;while(l--)if(e[l]===t)return r[l]===n;if(e.push(t),r.push(n),s){if(l=t.length,l!==n.length)return!1;while(l--)if(!Y(t[l],n[l],e,r))return!1}else{var h,f=H(t);if(l=f.length,H(n).length!==l)return!1;while(l--)if(h=f[l],!C(n,h)||!Y(t[h],n[h],e,r))return!1}return e.pop(),r.pop(),!0}function J(t,n){return Y(t,n)}function K(t){if(!a(t))return[];var n=[];for(var e in t)n.push(e);return i["h"]&&$(t,n),n}function Q(t){for(var n=H(t),e=n.length,r=Array(e),i=0;i<e;i++)r[i]=t[n[i]];return r}function tt(t){for(var n=H(t),e=n.length,r=Array(e),i=0;i<e;i++)r[i]=[n[i],t[n[i]]];return r}function nt(t){for(var n={},e=H(t),r=0,i=e.length;r<i;r++)n[t[e[r]]]=e[r];return n}function et(t){var n=[];for(var e in t)A(t[e])&&n.push(e);return n.sort()}function rt(t,n){return function(e){var r=arguments.length;if(n&&(e=Object(e)),r<2||null==e)return e;for(var i=1;i<r;i++)for(var o=arguments[i],a=t(o),s=a.length,u=0;u<s;u++){var c=a[u];n&&void 0!==e[c]||(e[c]=o[c])}return e}}X.VERSION=i["e"],X.prototype.value=function(){return this._wrapped},X.prototype.valueOf=X.prototype.toJSON=X.prototype.value,X.prototype.toString=function(){return String(this._wrapped)};var it=rt(K),ot=rt(H),at=rt(K,!0);function st(){return function(){}}function ut(t){if(!a(t))return{};if(i["j"])return Object(i["j"])(t);var n=st();n.prototype=t;var e=new n;return n.prototype=null,e}function ct(t,n){var e=ut(t);return n&&ot(e,n),e}function lt(t){return a(t)?E(t)?t.slice():it({},t):t}function ht(t,n){return n(t),t}function ft(t,n){if(!E(n))return C(t,n);for(var e=n.length,r=0;r<e;r++){var o=n[r];if(null==t||!i["i"].call(t,o))return!1;t=t[o]}return!!e}function dt(t){return t}function pt(t){return t=ot({},t),function(n){return W(n,t)}}function gt(t,n){for(var e=n.length,r=0;r<e;r++){if(null==t)return;t=t[n[r]]}return e?t:void 0}function yt(t){return E(t)?function(n){return gt(n,t)}:O(t)}function vt(t,n,e){if(void 0===n)return t;switch(null==e?3:e){case 1:return function(e){return t.call(n,e)};case 3:return function(e,r,i){return t.call(n,e,r,i)};case 4:return function(e,r,i,o){return t.call(n,e,r,i,o)}}return function(){return t.apply(n,arguments)}}function mt(t,n,e){return null==t?dt:A(t)?vt(t,n,e):a(t)&&!E(t)?pt(t):yt(t)}function xt(t,n){return mt(t,n,1/0)}function bt(t,n,e){return X.iteratee!==xt?X.iteratee(t,n):mt(t,n,e)}function wt(t,n,e){n=bt(n,e);for(var r=H(t),i=r.length,o={},a=0;a<i;a++){var s=r[a];o[s]=n(t[s],s,t)}return o}function Ft(){}function _t(t){return null==t?function(){}:function(n){return E(n)?gt(t,n):t[n]}}function Et(t,n,e){var r=Array(Math.max(0,t));n=vt(n,e,1);for(var i=0;i<t;i++)r[i]=n(i);return r}function St(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))}X.iteratee=xt;var kt=Date.now||function(){return(new Date).getTime()};function At(t){var n=function(n){return t[n]},e="(?:"+H(t).join("|")+")",r=RegExp(e),i=RegExp(e,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,n):t}}var Ct={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Bt=At(Ct),Tt=nt(Ct),jt=At(Tt),Nt=X.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Dt=/(.)^/,Mt={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Ot=/\\|'|\r|\n|\u2028|\u2029/g;function Pt(t){return"\\"+Mt[t]}function Lt(t,n,e){!n&&e&&(n=e),n=at({},n,X.templateSettings);var r,i=RegExp([(n.escape||Dt).source,(n.interpolate||Dt).source,(n.evaluate||Dt).source].join("|")+"|$","g"),o=0,a="__p+='";t.replace(i,(function(n,e,r,i,s){return a+=t.slice(o,s).replace(Ot,Pt),o=s+n.length,e?a+="'+\n((__t=("+e+"))==null?'':_.escape(__t))+\n'":r?a+="'+\n((__t=("+r+"))==null?'':__t)+\n'":i&&(a+="';\n"+i+"\n__p+='"),n})),a+="';\n",n.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{r=new Function(n.variable||"obj","_",a)}catch(c){throw c.source=a,c}var s=function(t){return r.call(this,t,X)},u=n.variable||"obj";return s.source="function("+u+"){\n"+a+"}",s}function It(t,n,e){E(n)||(n=[n]);var r=n.length;if(!r)return A(e)?e.call(t):e;for(var i=0;i<r;i++){var o=null==t?void 0:t[n[i]];void 0===o&&(o=e,i=r),t=A(o)?o.call(t):o}return t}var Rt=0;function qt(t){var n=++Rt+"";return t?t+n:n}function Gt(t){var n=X(t);return n._chain=!0,n}function Vt(t,n,e,r,i){if(!(r instanceof n))return t.apply(e,i);var o=ut(t.prototype),s=t.apply(o,i);return a(s)?s:o}var zt=o((function(t,n){var e=zt.placeholder,r=function(){for(var i=0,o=n.length,a=Array(o),s=0;s<o;s++)a[s]=n[s]===e?arguments[i++]:n[s];while(i<arguments.length)a.push(arguments[i++]);return Vt(t,r,this,this,a)};return r}));zt.placeholder=X;var $t=zt,Ht=o((function(t,n,e){if(!A(t))throw new TypeError("Bind must be called on a function");var r=o((function(i){return Vt(t,r,n,this,e.concat(i))}));return r}));function Ut(t,n,e,r){if(r=r||[],n||0===n){if(n<=0)return r.concat(t)}else n=1/0;for(var i=r.length,o=0,a=G(t);o<a;o++){var s=t[o];if(V(s)&&(E(s)||T(s)))if(n>1)Ut(s,n-1,e,r),i=r.length;else{var u=0,c=s.length;while(u<c)r[i++]=s[u++]}else e||(r[i++]=s)}return r}var Wt=o((function(t,n){n=Ut(n,!1,!1);var e=n.length;if(e<1)throw new Error("bindAll must be passed function names");while(e--){var r=n[e];t[r]=Ht(t[r],t)}return t}));function Xt(t,n){var e=function(r){var i=e.cache,o=""+(n?n.apply(this,arguments):r);return C(i,o)||(i[o]=t.apply(this,arguments)),i[o]};return e.cache={},e}var Yt=o((function(t,n,e){return setTimeout((function(){return t.apply(null,e)}),n)})),Zt=$t(Yt,X,1);function Jt(t,n,e){var r,i,o,a,s=0;e||(e={});var u=function(){s=!1===e.leading?0:kt(),r=null,a=t.apply(i,o),r||(i=o=null)},c=function(){var c=kt();s||!1!==e.leading||(s=c);var l=n-(c-s);return i=this,o=arguments,l<=0||l>n?(r&&(clearTimeout(r),r=null),s=c,a=t.apply(i,o),r||(i=o=null)):r||!1===e.trailing||(r=setTimeout(u,l)),a};return c.cancel=function(){clearTimeout(r),s=0,r=i=o=null},c}function Kt(t,n,e){var r,i,a=function(n,e){r=null,e&&(i=t.apply(n,e))},s=o((function(o){if(r&&clearTimeout(r),e){var s=!r;r=setTimeout(a,n),s&&(i=t.apply(this,o))}else r=Yt(a,n,this,o);return i}));return s.cancel=function(){clearTimeout(r),r=null},s}function Qt(t,n){return $t(n,t)}function tn(t){return function(){return!t.apply(this,arguments)}}function nn(){var t=arguments,n=t.length-1;return function(){var e=n,r=t[n].apply(this,arguments);while(e--)r=t[e].call(this,r);return r}}function en(t,n){return function(){if(--t<1)return n.apply(this,arguments)}}function rn(t,n){var e;return function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=null),e}}var on=$t(rn,2);function an(t,n,e){n=bt(n,e);for(var r,i=H(t),o=0,a=i.length;o<a;o++)if(r=i[o],n(t[r],r,t))return r}function sn(t){return function(n,e,r){e=bt(e,r);for(var i=G(n),o=t>0?0:i-1;o>=0&&o<i;o+=t)if(e(n[o],o,n))return o;return-1}}var un=sn(1),cn=sn(-1);function ln(t,n,e,r){e=bt(e,r,1);var i=e(n),o=0,a=G(t);while(o<a){var s=Math.floor((o+a)/2);e(t[s])<i?o=s+1:a=s}return o}function hn(t,n,e){return function(r,o,a){var s=0,u=G(r);if("number"==typeof a)t>0?s=a>=0?a:Math.max(a+u,s):u=a>=0?Math.min(a+1,u):a+u+1;else if(e&&a&&u)return a=e(r,o),r[a]===o?a:-1;if(o!==o)return a=n(i["q"].call(r,s,u),N),a>=0?a+s:-1;for(a=t>0?s:u-1;a>=0&&a<u;a+=t)if(r[a]===o)return a;return-1}}var fn=hn(1,un,ln),dn=hn(-1,cn);function pn(t,n,e){var r=V(t)?un:an,i=r(t,n,e);if(void 0!==i&&-1!==i)return t[i]}function gn(t,n){return pn(t,pt(n))}function yn(t,n,e){var r,i;if(n=vt(n,e),V(t))for(r=0,i=t.length;r<i;r++)n(t[r],r,t);else{var o=H(t);for(r=0,i=o.length;r<i;r++)n(t[o[r]],o[r],t)}return t}function vn(t,n,e){n=bt(n,e);for(var r=!V(t)&&H(t),i=(r||t).length,o=Array(i),a=0;a<i;a++){var s=r?r[a]:a;o[a]=n(t[s],s,t)}return o}function mn(t){var n=function(n,e,r,i){var o=!V(n)&&H(n),a=(o||n).length,s=t>0?0:a-1;for(i||(r=n[o?o[s]:s],s+=t);s>=0&&s<a;s+=t){var u=o?o[s]:s;r=e(r,n[u],u,n)}return r};return function(t,e,r,i){var o=arguments.length>=3;return n(t,vt(e,i,4),r,o)}}var xn=mn(1),bn=mn(-1);function wn(t,n,e){var r=[];return n=bt(n,e),yn(t,(function(t,e,i){n(t,e,i)&&r.push(t)})),r}function Fn(t,n,e){return wn(t,tn(bt(n)),e)}function _n(t,n,e){n=bt(n,e);for(var r=!V(t)&&H(t),i=(r||t).length,o=0;o<i;o++){var a=r?r[o]:o;if(!n(t[a],a,t))return!1}return!0}function En(t,n,e){n=bt(n,e);for(var r=!V(t)&&H(t),i=(r||t).length,o=0;o<i;o++){var a=r?r[o]:o;if(n(t[a],a,t))return!0}return!1}function Sn(t,n,e,r){return V(t)||(t=Q(t)),("number"!=typeof e||r)&&(e=0),fn(t,n,e)>=0}var kn=o((function(t,n,e){var r,i;return A(n)?i=n:E(n)&&(r=n.slice(0,-1),n=n[n.length-1]),vn(t,(function(t){var o=i;if(!o){if(r&&r.length&&(t=gt(t,r)),null==t)return;o=t[n]}return null==o?o:o.apply(t,e)}))}));function An(t,n){return vn(t,yt(n))}function Cn(t,n){return wn(t,pt(n))}function Bn(t,n,e){var r,i,o=-1/0,a=-1/0;if(null==n||"number"==typeof n&&"object"!=typeof t[0]&&null!=t){t=V(t)?t:Q(t);for(var s=0,u=t.length;s<u;s++)r=t[s],null!=r&&r>o&&(o=r)}else n=bt(n,e),yn(t,(function(t,e,r){i=n(t,e,r),(i>a||i===-1/0&&o===-1/0)&&(o=t,a=i)}));return o}function Tn(t,n,e){var r,i,o=1/0,a=1/0;if(null==n||"number"==typeof n&&"object"!=typeof t[0]&&null!=t){t=V(t)?t:Q(t);for(var s=0,u=t.length;s<u;s++)r=t[s],null!=r&&r<o&&(o=r)}else n=bt(n,e),yn(t,(function(t,e,r){i=n(t,e,r),(i<a||i===1/0&&o===1/0)&&(o=t,a=i)}));return o}function jn(t,n,e){if(null==n||e)return V(t)||(t=Q(t)),t[St(t.length-1)];var r=V(t)?lt(t):Q(t),i=G(r);n=Math.max(Math.min(n,i),0);for(var o=i-1,a=0;a<n;a++){var s=St(a,o),u=r[a];r[a]=r[s],r[s]=u}return r.slice(0,n)}function Nn(t){return jn(t,1/0)}function Dn(t,n,e){var r=0;return n=bt(n,e),An(vn(t,(function(t,e,i){return{value:t,index:r++,criteria:n(t,e,i)}})).sort((function(t,n){var e=t.criteria,r=n.criteria;if(e!==r){if(e>r||void 0===e)return 1;if(e<r||void 0===r)return-1}return t.index-n.index})),"value")}function Mn(t,n){return function(e,r,i){var o=n?[[],[]]:{};return r=bt(r,i),yn(e,(function(n,i){var a=r(n,i,e);t(o,n,a)})),o}}var On=Mn((function(t,n,e){C(t,e)?t[e].push(n):t[e]=[n]})),Pn=Mn((function(t,n,e){t[e]=n})),Ln=Mn((function(t,n,e){C(t,e)?t[e]++:t[e]=1})),In=Mn((function(t,n,e){t[e?0:1].push(n)}),!0),Rn=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function qn(t){return t?E(t)?i["q"].call(t):f(t)?t.match(Rn):V(t)?vn(t,dt):Q(t):[]}function Gn(t){return null==t?0:V(t)?t.length:H(t).length}function Vn(t,n,e){return n in e}var zn=o((function(t,n){var e={},r=n[0];if(null==t)return e;A(r)?(n.length>1&&(r=vt(r,n[1])),n=K(t)):(r=Vn,n=Ut(n,!1,!1),t=Object(t));for(var i=0,o=n.length;i<o;i++){var a=n[i],s=t[a];r(s,a,t)&&(e[a]=s)}return e})),$n=o((function(t,n){var e,r=n[0];return A(r)?(r=tn(r),n.length>1&&(e=n[1])):(n=vn(Ut(n,!1,!1),String),r=function(t,e){return!Sn(n,e)}),zn(t,r,e)}));function Hn(t,n,e){return i["q"].call(t,0,Math.max(0,t.length-(null==n||e?1:n)))}function Un(t,n,e){return null==t||t.length<1?null==n||e?void 0:[]:null==n||e?t[0]:Hn(t,t.length-n)}function Wn(t,n,e){return i["q"].call(t,null==n||e?1:n)}function Xn(t,n,e){return null==t||t.length<1?null==n||e?void 0:[]:null==n||e?t[t.length-1]:Wn(t,Math.max(0,t.length-n))}function Yn(t){return wn(t,Boolean)}function Zn(t,n){return Ut(t,n,!1)}var Jn=o((function(t,n){return n=Ut(n,!0,!0),wn(t,(function(t){return!Sn(n,t)}))})),Kn=o((function(t,n){return Jn(t,n)}));function Qn(t,n,e,r){c(n)||(r=e,e=n,n=!1),null!=e&&(e=bt(e,r));for(var i=[],o=[],a=0,s=G(t);a<s;a++){var u=t[a],l=e?e(u,a,t):u;n&&!e?(a&&o===l||i.push(u),o=l):e?Sn(o,l)||(o.push(l),i.push(u)):Sn(i,u)||i.push(u)}return i}var te=o((function(t){return Qn(Ut(t,!0,!0))}));function ne(t){for(var n=[],e=arguments.length,r=0,i=G(t);r<i;r++){var o=t[r];if(!Sn(n,o)){var a;for(a=1;a<e;a++)if(!Sn(arguments[a],o))break;a===e&&n.push(o)}}return n}function ee(t){for(var n=t&&Bn(t,G).length||0,e=Array(n),r=0;r<n;r++)e[r]=An(t,r);return e}var re=o(ee);function ie(t,n){for(var e={},r=0,i=G(t);r<i;r++)n?e[t[r]]=n[r]:e[t[r][0]]=t[r][1];return e}function oe(t,n,e){null==n&&(n=t||0,t=0),e||(e=n<t?-1:1);for(var r=Math.max(Math.ceil((n-t)/e),0),i=Array(r),o=0;o<r;o++,t+=e)i[o]=t;return i}function ae(t,n){if(null==n||n<1)return[];var e=[],r=0,o=t.length;while(r<o)e.push(i["q"].call(t,r,r+=n));return e}function se(t,n){return t._chain?X(n).chain():n}function ue(t){return yn(et(t),(function(n){var e=X[n]=t[n];X.prototype[n]=function(){var t=[this._wrapped];return i["o"].apply(t,arguments),se(this,e.apply(X,t))}})),X}yn(["pop","push","reverse","shift","sort","splice","unshift"],(function(t){var n=i["a"][t];X.prototype[t]=function(){var e=this._wrapped;return null!=e&&(n.apply(e,arguments),"shift"!==t&&"splice"!==t||0!==e.length||delete e[0]),se(this,e)}})),yn(["concat","join","slice"],(function(t){var n=i["a"][t];X.prototype[t]=function(){var t=this._wrapped;return null!=t&&(t=n.apply(t,arguments)),se(this,t)}}));var ce=X,le=ue(r);le._=le;var he=le},dd40:function(t,n){t.exports=function(t){if(!t.webpackPolyfill){var n=Object.create(t);n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),Object.defineProperty(n,"exports",{enumerable:!0}),n.webpackPolyfill=1}return n}},e0e3:function(t,n,e){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,