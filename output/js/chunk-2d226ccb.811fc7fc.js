(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d226ccb"],{e9cd:function(e,a){(function(e){var a=/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,t=/\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-F]+\b/;e.languages.soy={comment:[/\/\*[\s\S]*?\*\//,{pattern:/(\s)\/\/.*/,lookbehind:!0,greedy:!0}],"command-arg":{pattern:/({+\/?\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\s+)\.?[\w.]+/,lookbehind:!0,alias:"string",inside:{punctuation:/\./}},parameter:{pattern:/({+\/?\s*@?param\??\s+)\.?[\w.]+/,lookbehind:!0,alias:"variable"},keyword:[{pattern:/({+\/?[^\S\r\n]*)(?:\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\??|rb|sp|switch|template|xid)/,lookbehind:!0},/\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\b/],delimiter:{pattern:/^{+\/?|\/?}+$/,alias:"punctuation"},property:/\w+(?==)/,variable:{pattern:/\$[^\W\d]\w*(?:\??(?:\.\w+|\[[^\]]+]))*/,inside:{string:{pattern:a,greedy:!0},number:t,punctuation:/[\[\].?]/}},string:{pattern:a,greedy:!0},function:[/\w+(?=\()/,{pattern:/(\|[^\S\r\n]*)\w+/,lookbehind:!0}],boolean:/\b(?:true|false)\b/,number:t,operator:/\?:?|<=?|>=?|==?|!=|[+*/%-]|\b(?:and|not|or)\b/,punctuation:/[{}()\[\]|.,:]/},e.hooks.add("before-tokenize",(function(a){var t=/{{.+?}}|{.+?}|\s\/\/.*|\/\*[\s\S]*?\*\//g,n="{literal}",l="{/literal}",r=!1;e.languages["markup-templating"].buildPlaceholders(a,"soy",t,(function(e){return e===l&&(r=!1),!r&&(e===n&&(r=!0),!0)}))})),e.hooks.add("after-tokenize",(function(a){e.languages["markup-templating"].tokenizePlaceholders(a,"soy")}))})(Prism)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXNveS5qcyJdLCJuYW1lcyI6WyJQcmlzbSIsInN0cmluZ1BhdHRlcm4iLCJudW1iZXJQYXR0ZXJuIiwibGFuZ3VhZ2VzIiwic295IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJhbGlhcyIsImluc2lkZSIsImhvb2tzIiwiYWRkIiwiZW52Iiwic295UGF0dGVybiIsInNveUxpdHRlcmFsU3RhcnQiLCJzb3lMaXR0ZXJhbEVuZCIsInNveUxpdHRlcmFsTW9kZSIsImJ1aWxkUGxhY2Vob2xkZXJzIiwibWF0Y2giLCJ0b2tlbml6ZVBsYWNlaG9sZGVycyJdLCJtYXBwaW5ncyI6ImtHQUFDLFNBQVVBLEdBQ1YsSUFBSUMsRUFBZ0IsaURBQ2hCQyxFQUFnQixvREFFcEJGLEVBQU1HLFVBQVVDLElBQU0sQ0FDckIsUUFBVyxDQUNWLG1CQUNBLENBQ0NDLFFBQVMsYUFDVEMsWUFBWSxFQUNaQyxRQUFRLElBR1YsY0FBZSxDQUNkRixRQUFTLHlGQUNUQyxZQUFZLEVBQ1pFLE1BQU8sU0FDUEMsT0FBUSxDQUNQLFlBQWUsT0FHakIsVUFBYSxDQUNaSixRQUFTLG1DQUNUQyxZQUFZLEVBQ1pFLE1BQU8sWUFFUixRQUFXLENBQ1YsQ0FDQ0gsUUFBUyxrTkFDVEMsWUFBWSxHQUViLDJGQUVELFVBQWEsQ0FDWkQsUUFBUyxnQkFDVEcsTUFBTyxlQUVSLFNBQVksV0FDWixTQUFZLENBQ1hILFFBQVMsMENBQ1RJLE9BQVEsQ0FDUCxPQUFVLENBQ1RKLFFBQVNKLEVBQ1RNLFFBQVEsR0FFVCxPQUFVTCxFQUNWLFlBQWUsYUFHakIsT0FBVSxDQUNURyxRQUFTSixFQUNUTSxRQUFRLEdBRVQsU0FBWSxDQUNYLFlBQ0EsQ0FDQ0YsUUFBUyxvQkFDVEMsWUFBWSxJQUdkLFFBQVcscUJBQ1gsT0FBVUosRUFDVixTQUFZLGlEQUNaLFlBQWUsa0JBSWhCRixFQUFNVSxNQUFNQyxJQUFJLG1CQUFtQixTQUFVQyxHQUM1QyxJQUFJQyxFQUFhLDJDQUNiQyxFQUFtQixZQUNuQkMsRUFBaUIsYUFDakJDLEdBQWtCLEVBRXRCaEIsRUFBTUcsVUFBVSxxQkFBcUJjLGtCQUFrQkwsRUFBSyxNQUFPQyxHQUFZLFNBQVVLLEdBTXhGLE9BSklBLElBQVVILElBQ2JDLEdBQWtCLElBR2RBLElBQ0FFLElBQVVKLElBQ2JFLEdBQWtCLElBR1osU0FPVmhCLEVBQU1VLE1BQU1DLElBQUksa0JBQWtCLFNBQVVDLEdBQzNDWixFQUFNRyxVQUFVLHFCQUFxQmdCLHFCQUFxQlAsRUFBSyxXQTVGakUsQ0ErRkVaIiwiZmlsZSI6ImpzL2NodW5rLTJkMjI2Y2NiLjgxMWZjN2ZjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChQcmlzbSkge1xuXHR2YXIgc3RyaW5nUGF0dGVybiA9IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS87XG5cdHZhciBudW1iZXJQYXR0ZXJuID0gL1xcYlxcZCsoPzpcXC5cXGQrKT8oPzpbZUVdWystXT9cXGQrKT9cXGJ8XFxiMHhbXFxkQS1GXStcXGIvO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5zb3kgPSB7XG5cdFx0J2NvbW1lbnQnOiBbXG5cdFx0XHQvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG5cdFx0XHR7XG5cdFx0XHRcdHBhdHRlcm46IC8oXFxzKVxcL1xcLy4qLyxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0XHR9XG5cdFx0XSxcblx0XHQnY29tbWFuZC1hcmcnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKHsrXFwvP1xccyooPzphbGlhc3xjYWxsfGRlbGNhbGx8ZGVscGFja2FnZXxkZWx0ZW1wbGF0ZXxuYW1lc3BhY2V8dGVtcGxhdGUpXFxzKylcXC4/W1xcdy5dKy8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0YWxpYXM6ICdzdHJpbmcnLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9cXC4vXG5cdFx0XHR9XG5cdFx0fSxcblx0XHQncGFyYW1ldGVyJzoge1xuXHRcdFx0cGF0dGVybjogLyh7K1xcLz9cXHMqQD9wYXJhbVxcPz9cXHMrKVxcLj9bXFx3Ll0rLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRhbGlhczogJ3ZhcmlhYmxlJ1xuXHRcdH0sXG5cdFx0J2tleXdvcmQnOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBhdHRlcm46IC8oeytcXC8/W15cXFNcXHJcXG5dKikoPzpcXFxcW25ydF18YWxpYXN8Y2FsbHxjYXNlfGNzc3xkZWZhdWx0fGRlbGNhbGx8ZGVscGFja2FnZXxkZWx0ZW1wbGF0ZXxlbHNlKD86aWYpP3xmYWxsYmFja21zZ3xmb3IoPzplYWNoKT98aWYoPzplbXB0eSk/fGxifGxldHxsaXRlcmFsfG1zZ3xuYW1lc3BhY2V8bmlsfEA/cGFyYW1cXD8/fHJifHNwfHN3aXRjaHx0ZW1wbGF0ZXx4aWQpLyxcblx0XHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdC9cXGIoPzphbnl8YXN8YXR0cmlidXRlc3xib29sfGNzc3xmbG9hdHxpbnxpbnR8anN8aHRtbHxsaXN0fG1hcHxudWxsfG51bWJlcnxzdHJpbmd8dXJpKVxcYi9cblx0XHRdLFxuXHRcdCdkZWxpbWl0ZXInOiB7XG5cdFx0XHRwYXR0ZXJuOiAvXnsrXFwvP3xcXC8/fSskLyxcblx0XHRcdGFsaWFzOiAncHVuY3R1YXRpb24nXG5cdFx0fSxcblx0XHQncHJvcGVydHknOiAvXFx3Kyg/PT0pLyxcblx0XHQndmFyaWFibGUnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvXFwkW15cXFdcXGRdXFx3Kig/OlxcPz8oPzpcXC5cXHcrfFxcW1teXFxdXStdKSkqLyxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnc3RyaW5nJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IHN0cmluZ1BhdHRlcm4sXG5cdFx0XHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdudW1iZXInOiBudW1iZXJQYXR0ZXJuLFxuXHRcdFx0XHQncHVuY3R1YXRpb24nOiAvW1xcW1xcXS4/XS9cblx0XHRcdH1cblx0XHR9LFxuXHRcdCdzdHJpbmcnOiB7XG5cdFx0XHRwYXR0ZXJuOiBzdHJpbmdQYXR0ZXJuLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fSxcblx0XHQnZnVuY3Rpb24nOiBbXG5cdFx0XHQvXFx3Kyg/PVxcKCkvLFxuXHRcdFx0e1xuXHRcdFx0XHRwYXR0ZXJuOiAvKFxcfFteXFxTXFxyXFxuXSopXFx3Ky8sXG5cdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHRcdH1cblx0XHRdLFxuXHRcdCdib29sZWFuJzogL1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcblx0XHQnbnVtYmVyJzogbnVtYmVyUGF0dGVybixcblx0XHQnb3BlcmF0b3InOiAvXFw/Oj98PD0/fD49P3w9PT98IT18WysqLyUtXXxcXGIoPzphbmR8bm90fG9yKVxcYi8sXG5cdFx0J3B1bmN0dWF0aW9uJzogL1t7fSgpXFxbXFxdfC4sOl0vXG5cdH07XG5cblx0Ly8gVG9rZW5pemUgYWxsIGlubGluZSBTb3kgZXhwcmVzc2lvbnNcblx0UHJpc20uaG9va3MuYWRkKCdiZWZvcmUtdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG5cdFx0dmFyIHNveVBhdHRlcm4gPSAve3suKz99fXx7Lis/fXxcXHNcXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/XFwqXFwvL2c7XG5cdFx0dmFyIHNveUxpdHRlcmFsU3RhcnQgPSAne2xpdGVyYWx9Jztcblx0XHR2YXIgc295TGl0dGVyYWxFbmQgPSAney9saXRlcmFsfSc7XG5cdFx0dmFyIHNveUxpdHRlcmFsTW9kZSA9IGZhbHNlO1xuXG5cdFx0UHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddLmJ1aWxkUGxhY2Vob2xkZXJzKGVudiwgJ3NveScsIHNveVBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuXHRcdFx0Ly8gU295IHRhZ3MgaW5zaWRlIHtsaXRlcmFsfSBibG9jayBhcmUgaWdub3JlZFxuXHRcdFx0aWYgKG1hdGNoID09PSBzb3lMaXR0ZXJhbEVuZCkge1xuXHRcdFx0XHRzb3lMaXR0ZXJhbE1vZGUgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFzb3lMaXR0ZXJhbE1vZGUpIHtcblx0XHRcdFx0aWYgKG1hdGNoID09PSBzb3lMaXR0ZXJhbFN0YXJ0KSB7XG5cdFx0XHRcdFx0c295TGl0dGVyYWxNb2RlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuXHR9KTtcblxuXHQvLyBSZS1pbnNlcnQgdGhlIHRva2VucyBhZnRlciB0b2tlbml6aW5nXG5cdFByaXNtLmhvb2tzLmFkZCgnYWZ0ZXItdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG5cdFx0UHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddLnRva2VuaXplUGxhY2Vob2xkZXJzKGVudiwgJ3NveScpO1xuXHR9KTtcblxufShQcmlzbSkpOyJdLCJzb3VyY2VSb290IjoiIn0=